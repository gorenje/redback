[
    {
        "id": "6f63687f08193049",
        "type": "tab",
        "label": "Initialisation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "40ea5f2aea6592ae",
        "type": "tab",
        "label": "Router",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bc45159fffe25729",
        "type": "tab",
        "label": "Send Email",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "68148861ba0868a8",
        "type": "tab",
        "label": "Websocket",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c9628ef74314c30f",
        "type": "tab",
        "label": "api - get",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e79b7563e1176dfd",
        "type": "tab",
        "label": "api - post",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7b5adb0ea5051dde",
        "type": "tab",
        "label": "user - verification",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2516bfc49bf9ae93",
        "type": "tab",
        "label": "user - login",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "459c271a96458c7c",
        "type": "tab",
        "label": "eMail Templates",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "00143787a55e03a5",
        "type": "tab",
        "label": "admin - interface",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3270a3a7e718167b",
        "type": "tab",
        "label": "admin - QA",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "01e0c1a394d7f324",
        "type": "subflow",
        "name": "DEBUG ALL",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "80c175cec2e92ffa"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#87A980"
    },
    {
        "id": "454f61a0a8b759f9",
        "type": "subflow",
        "name": "HALT",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "65cfe48e96d34238"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFAAAA",
        "icon": "font-awesome/fa-trash-o"
    },
    {
        "id": "d03c4820970ac189",
        "type": "subflow",
        "name": "Respond: ERROR",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 80,
                "wires": [
                    {
                        "id": "626e48f3cb80df01"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-send"
    },
    {
        "id": "e8bbdc11f1fc0dd8",
        "type": "subflow",
        "name": "GATEWAY: payload ok?",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 70,
                "y": 80,
                "wires": [
                    {
                        "id": "b843b09e915a1928"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 427,
                "y": 74,
                "wires": [
                    {
                        "id": "b843b09e915a1928",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#D7D7A0",
        "icon": "font-awesome/fa-map-signs"
    },
    {
        "id": "507161adae3ca528",
        "type": "subflow",
        "name": "Email Valid?",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 123,
                "y": 188.66995239257812,
                "wires": [
                    {
                        "id": "247289e623912f75"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 703.0103454589844,
                "y": 77,
                "wires": [
                    {
                        "id": "e631d8a20dc635cf",
                        "port": "0"
                    }
                ]
            },
            {
                "x": 601.0103454589844,
                "y": 172,
                "wires": [
                    {
                        "id": "e631d8a20dc635cf",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "inputLabels": [
            "msg.origpayload.email"
        ],
        "outputLabels": [
            "YES",
            "NO"
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "1d3e4db6ecdf8e95",
        "type": "subflow",
        "name": "Comment",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "red",
        "icon": "node-red/comment.svg"
    },
    {
        "id": "1f6116ea2b105a8b",
        "type": "subflow",
        "name": "add dont spam me link",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 86,
                "y": 539,
                "wires": [
                    {
                        "id": "8116a126d363a248"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 746,
                "y": 531,
                "wires": [
                    {
                        "id": "8116a126d363a248",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#E7E7AE",
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "d1100a08134ce3c4",
        "type": "subflow",
        "name": "decode",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 244,
                "y": 326,
                "wires": [
                    {
                        "id": "f485ad532947a7b1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 632,
                "y": 766,
                "wires": [
                    {
                        "id": "f485ad532947a7b1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#E7E7AE",
        "inputLabels": [
            "msg.payload.data"
        ],
        "outputLabels": [
            "msg.datapayload"
        ],
        "icon": "font-awesome/fa-asl-interpreting"
    },
    {
        "id": "d1d7d446235ef659",
        "type": "subflow",
        "name": "OpenAI content rating",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 83,
                "y": 96,
                "wires": [
                    {
                        "id": "414aee716460928d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 823,
                "y": 250,
                "wires": [
                    {
                        "id": "e9507faf13b09943",
                        "port": 0
                    },
                    {
                        "id": "842729340c97b573",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#E6E0F8",
        "inputLabels": [
            "msg.payload[0].text"
        ],
        "outputLabels": [
            "msg.openaipayload"
        ],
        "icon": "node-red-contrib-ui-level/uilevel.png"
    },
    {
        "id": "b65a624658cc9a3d",
        "type": "group",
        "z": "68148861ba0868a8",
        "name": "Websocket Flows",
        "style": {
            "fill": "#ffffbf",
            "label": true,
            "label-position": "s",
            "fill-opacity": "0.39"
        },
        "nodes": [
            "96bc62610c19d5c5",
            "79659e62872be448",
            "907a47cec7119c6f",
            "e7a5e15f7c24c35b",
            "b75e1b093e3b03c4",
            "b112d19d7b81f894",
            "55af9b5c284afea3",
            "355f6a70f79f5e69",
            "517eb212d3604acf",
            "93ca8c3e8be2ad7c",
            "0004973f4c036fc5",
            "1e2388d383864efe",
            "e3bfdcb18e30095a",
            "27fafa85c903c954"
        ],
        "x": 31.99993896484375,
        "y": 58.666778564453125,
        "w": 1336.000244140625,
        "h": 263.1142883300781
    },
    {
        "id": "d960896a3598041e",
        "type": "group",
        "z": "7b5adb0ea5051dde",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c0106cae5a0430d4",
            "a60640d474ab616f"
        ],
        "x": 1750,
        "y": 31,
        "w": 412,
        "h": 260.0000457763672
    },
    {
        "id": "71032b34a625c818",
        "type": "group",
        "z": "e79b7563e1176dfd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cb2ad0e6e312eb6f",
            "22f84e59eb56ef79",
            "707e1daf8d8873f6"
        ],
        "x": 1895.5,
        "y": 29,
        "w": 412,
        "h": 204
    },
    {
        "id": "60a1c4da6e59e3ec",
        "type": "group",
        "z": "2516bfc49bf9ae93",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a03bee39b0756632",
            "5833f6397db688a7",
            "70bf2ea93cda19b5"
        ],
        "x": 1581,
        "y": 37.99999809265137,
        "w": 412,
        "h": 202
    },
    {
        "id": "fd5efc60ade316ce",
        "type": "group",
        "z": "e79b7563e1176dfd",
        "name": "[API] Don't spam Me",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "sw"
        },
        "nodes": [
            "54058489707eb9ec",
            "ab0aaf85f16dbce9",
            "1ea236a6749e2879",
            "9344a9eaf1766474",
            "c530b3cb814b9dd5",
            "e6e6187e2bb42de3",
            "f17995d3769f86f8",
            "f0c94bbfd4d0861c",
            "19de425071d31e50",
            "030780abf98798c4",
            "5a092213730a8ff6",
            "b650d8b3e462b228"
        ],
        "x": 194.50022888183594,
        "y": 446.0000991821289,
        "w": 1583.4998016357422,
        "h": 246
    },
    {
        "id": "1bbd8954ec9b6e2b",
        "type": "group",
        "z": "c9628ef74314c30f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3a5c4fbec689569a",
            "06ebd3a5555202e6",
            "bb39f3e0a8759fc9"
        ],
        "x": 1413.3953857421875,
        "y": 40.888031005859375,
        "w": 412,
        "h": 204
    },
    {
        "id": "df87ef0d81220bc2",
        "type": "group",
        "z": "e79b7563e1176dfd",
        "name": "accept / decline proposal",
        "style": {
            "label": true,
            "label-position": "sw",
            "color": "#001f60"
        },
        "nodes": [
            "f9cea51e2e779e12",
            "2349281462e6046f",
            "a3e42389b82a3a51",
            "e446e0ee0a6eebbf",
            "ef1b0a4a352fce6a",
            "ca58a70e3f27740b",
            "11759177a0935bf1",
            "5509bd67bb44ff89",
            "dcae012119e5e79d",
            "fcb92a57aae26dd5",
            "8aa234e82095cc91",
            "a53e9c2d5ac016cf",
            "591b51d4a9748432",
            "b1633fc8b1acc01a",
            "818211dfc79ff4aa",
            "634bce907b5ad314",
            "f8a904cf7451650c",
            "d1a5fb34f978f34e",
            "cd4a4efafde74243",
            "e012fb09e9897dda",
            "9f835318ae1e84d9",
            "7dd5bf86b99ba76e"
        ],
        "x": 194.50045013427734,
        "y": 750.0002756118774,
        "w": 1685.3957786560059,
        "h": 449.67005252838135
    },
    {
        "id": "0355d8f8a1687a73",
        "type": "group",
        "z": "e79b7563e1176dfd",
        "name": "new bid",
        "style": {
            "label": true,
            "label-position": "sw",
            "color": "#001f60"
        },
        "nodes": [
            "2454f11161812905",
            "ca338fb064bc3507",
            "1b3a5dc22396e54e",
            "635efe3e813cb9cb",
            "2acb43c5309ac0fd",
            "a1071b9d620c40d4",
            "1866f7d5bf4b0977",
            "35627cb32541e827",
            "1b472985ac13d3c3",
            "71299118ade1aa96"
        ],
        "x": 195.500244140625,
        "y": 111.00050926208496,
        "w": 1440.5004043579102,
        "h": 264.6662139892578
    },
    {
        "id": "4aa7d38b97ffdcc9",
        "type": "group",
        "z": "e79b7563e1176dfd",
        "name": "create new auction - offer or desire or proposal",
        "style": {
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "5f2ea7c8b71bd8c4",
            "25e513171ea468df",
            "793e52c874112957",
            "776532ef5bbd634c",
            "2696168e5d22f048",
            "fd9e4f65b0bd4785",
            "56caa8884a54032f",
            "3e5d267d6dad2c71",
            "6f6530251eaf202a",
            "b2973dd545e6883a",
            "76e4f45ee883daf2",
            "a9d68204b563f4d6",
            "781068f858cdd177",
            "46dde88b75490227",
            "8bbfbd51c8e73f1f",
            "6a7d0c7bc9a38934",
            "aa53ec32657a6d98",
            "15be66d6d6c64fe5",
            "6a0fd1f3384b341c",
            "c25f2cefaa8c6128",
            "1c855c30e7624b87",
            "fb6b28611a90e621",
            "416dae6b8bc2b6bc",
            "bae3f2f9179c77ae",
            "940aa6d426b32a11",
            "f6974aa6d8d57fba",
            "7f4def9059086d5e",
            "0d5776f282e79ff8",
            "e586b04807d8f2f2",
            "12ee951c3007e2e8",
            "df24ca080b02dc63",
            "273c923afe707aab",
            "66218e053020522e",
            "7fa15f66ab0c9353",
            "8853193f2ea9e146",
            "4f5fec0b8067ae42",
            "1cb000a4f60fccd8",
            "7a622d1fe40adef1",
            "bec33379748bc1ff",
            "f0b0c60746bee751",
            "6a7b9fd4d2a1b40f",
            "389cba1538299e97",
            "37428448ac962675",
            "25546edb290898bc",
            "a8bdbbf74525ab09",
            "01445804f6f81d47",
            "4d608a7d2f78fe1c",
            "6aa7b41aca9c6024",
            "ca094f0bb98c6877",
            "6f917b0db380531d",
            "234c504065ac64b8",
            "5dcc5de4b9a95767",
            "60978791072617f4",
            "b4c3805f8997097b",
            "cb34683ed1d94018",
            "a40c0e3201bf7a62",
            "7a6e59e69b59700b",
            "4a58a16acadf72be"
        ],
        "x": 196.50030136108398,
        "y": 1273,
        "w": 4171.000541687012,
        "h": 599
    },
    {
        "id": "487c8f7449f90598",
        "type": "group",
        "z": "40ea5f2aea6592ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5f9969817f9c403d",
            "cc0d78a673304144",
            "d80f6bfeaec940de",
            "abc3f4590b0a78c6",
            "cfe518eea648cfe3",
            "c49f0fc343b113fc",
            "a2a7b683c264dd2a"
        ],
        "x": 30.444510459899902,
        "y": 1189.4265775680542,
        "w": 2581.451729774475,
        "h": 82
    },
    {
        "id": "2ba8206c046d35e7",
        "type": "group",
        "z": "40ea5f2aea6592ae",
        "name": "not found",
        "style": {
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "575c4dd631dbe29d",
            "9298d66291096b56",
            "54b96e96d686e24a"
        ],
        "x": 1123,
        "y": 577.444580078125,
        "w": 943.5,
        "h": 90
    },
    {
        "id": "72a7341ed740203a",
        "type": "group",
        "z": "bc45159fffe25729",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "82fcf7aa4a35258c",
            "3f184f24108a4adf",
            "4001998a87a4a8c6",
            "72bcfcf692fdc3fb",
            "70dfedaf202734d4",
            "83550cc85136576e",
            "ced6c64dd360309b",
            "9a527b8f0dce6d08",
            "b3267cfa214160b5",
            "c2828789472cd43a",
            "319dfb9d1a50c45e",
            "ace443d83f9872cc"
        ],
        "x": 76.43768310546875,
        "y": 41.99999237060547,
        "w": 1221.0623168945312,
        "h": 452.36806869506836
    },
    {
        "id": "1c270262103d7377",
        "type": "group",
        "z": "bc45159fffe25729",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "48e950121b3eb4bd",
            "dbe49e4b98b2bb35",
            "067d54bff27de4bf",
            "dcd3c6b256468cfc",
            "e98e5a1856ca8f64",
            "682dcf75ec1a62eb",
            "482bb747982874ee",
            "40a94383e56f3119",
            "532e0608b417f23f",
            "2e0d4f109ee28da2",
            "4b570cba143531a3",
            "e85c81747978ba2d",
            "01de625c24a4f737",
            "a601defbf5afa765",
            "d95a5b760301b68a",
            "3568559f05e72b94",
            "f96c3e497dc4995f",
            "573d13673a440460"
        ],
        "x": 72.00006103515625,
        "y": 542.6319103240967,
        "w": 1372.9999389648438,
        "h": 567.8680896759033
    },
    {
        "id": "9a7e3b9084800623",
        "type": "group",
        "z": "00143787a55e03a5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1aeccb27b0a5c4aa",
            "c434bb84aa6f6c93",
            "ee56f7e9bb304954",
            "996057881aef42e7",
            "22342a073df130e2",
            "328e0d5e791d6d58",
            "7ef5ca61c569f0d5",
            "77655db02d6db197",
            "26aad223c49537a6",
            "8b0921d4668667d5",
            "d1a15ec2ccfe0828",
            "d39dd363ec9b67c2",
            "a981750927566068",
            "3face932f6bf1025",
            "bc1bc0423476a106",
            "63207e563560524b",
            "f0774bef9d00f5f8",
            "e7f3d55d9028d72e",
            "e8402726b2b5b523",
            "62fdb9df2c66d23b"
        ],
        "x": 114,
        "y": 753,
        "w": 1530,
        "h": 346
    },
    {
        "id": "e46283f84261872b",
        "type": "group",
        "z": "00143787a55e03a5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9982295af1f573f4",
            "9d451601e482c221",
            "aba5b9d7747dc5eb",
            "617d23a2a3eef7e6",
            "356d762a62241606",
            "26100e42e72fdc37",
            "8361dbb521dd281c",
            "1eee208459d3e9d7",
            "2076ca3b9ab9c30c",
            "940b3f7c9665a187",
            "14ecd16dd8b338a3",
            "60387e3f38f43a7e",
            "72139a0b66411c7d",
            "267d4e8a16500632",
            "55913cb5e2ed748d",
            "e7c96a450a0040c4",
            "ad95b7c23bc081b2"
        ],
        "x": 114.5555648803711,
        "y": 417,
        "w": 1328.444435119629,
        "h": 302.99994945526123
    },
    {
        "id": "285456a9074fb49a",
        "type": "group",
        "z": "00143787a55e03a5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8f0dc59eb139a4cf",
            "0462f7b72940d0a9",
            "22182d7be0c80c0e",
            "902beb68c01d6246",
            "81ecd9b5fe5f3892",
            "afd96a634618faa8",
            "d3d212b6abc4e02b",
            "35c596a6f158a7e7",
            "c2d436860ee431d0",
            "427c086cd5cc6cb9",
            "41255aa77882f033",
            "58648c3b1b52f1cf",
            "bfe609ba4f6a152f",
            "015ab92693f0a24d",
            "a018172b1fe6f68a",
            "d363ec3aafb229ea",
            "2b1d3baee3a695de",
            "e7b2f3a5248841af"
        ],
        "x": 113,
        "y": 44.183837890625,
        "w": 1573,
        "h": 336.816162109375
    },
    {
        "id": "6ca1f3f48de564e8",
        "type": "group",
        "z": "3270a3a7e718167b",
        "name": "Quality Assurance Tab",
        "style": {
            "label": true,
            "label-position": "s",
            "color": "#000000"
        },
        "nodes": [
            "34a4c11573b3ae02",
            "88aa7bc3edaad062",
            "bb8b0af2d65f1b73",
            "57fb630186ea18bc",
            "18ab5a81c9531b8b",
            "7bf62c8b086bce96",
            "10652afca8cd4f06",
            "0e97d2f196b2b580",
            "6e0f31f3e0b6335f",
            "94e5eebb16cd775a",
            "b2544d34b3e18dd6",
            "85f1235feba1c861",
            "48ba750c40d31b41",
            "d48f0c61d924ec01",
            "4420a36dc3475cea",
            "a43df303f7a163b1",
            "a7da7fb704b4ec0f",
            "3be213485874ced7",
            "8e7f55c3f2f0dadb",
            "76ba823543804652",
            "9feeafbf4edb1656",
            "cc53fc2820fea9eb",
            "944884b6c71b9151",
            "fed3a67f67427e96",
            "73947b1021464429",
            "61756564f2b0b2f5",
            "8b1ec1c668801d85"
        ],
        "x": 284.49997901916504,
        "y": 249.99999713897705,
        "w": 1115.3924102783203,
        "h": 598.6110095977783
    },
    {
        "id": "a60640d474ab616f",
        "type": "group",
        "z": "7b5adb0ea5051dde",
        "g": "d960896a3598041e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9494e69179972d85",
            "93a788a5367bdd71"
        ],
        "x": 1851.0002670288086,
        "y": 104.00009822845459,
        "w": 238.4998550415039,
        "h": 160.9999475479126
    },
    {
        "id": "25b02ea4c35f84af",
        "type": "group",
        "z": "00143787a55e03a5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3c825aa2e9cd68ce",
            "90cc1a35eeb85685",
            "ee12a63c7de13f9c",
            "35eae47b0d9ee531",
            "e2fbfcf097ae91c0",
            "737b6cbde56f6f01",
            "dde74b3e1105a2ad",
            "227b6fa7c9229524",
            "72a457707489e79f",
            "0a8b1a95c8e544b9",
            "e399b6bc1db99588",
            "09037520c8a8c909",
            "7f691fa22c035cf4"
        ],
        "x": 116.5,
        "y": 1155,
        "w": 956.5,
        "h": 327
    },
    {
        "id": "d4a8f3b2beda251e",
        "type": "group",
        "z": "2516bfc49bf9ae93",
        "name": "Send Login Code Email",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "efd1edaafeccb15c",
            "1bfdc0da48227ef4",
            "0821c3a843f871b5",
            "bc6f311db20a63c7",
            "d0226d45d36d55bc",
            "be4d2a6f12c6513f",
            "654a727d5e73414e",
            "439667fe99131c12",
            "204262a2d05ca231",
            "9548a851e7bf9eb7",
            "e265d3d510ea49aa"
        ],
        "x": 190.43759155273438,
        "y": 629,
        "w": 1392.5626831054688,
        "h": 292.7778196334839
    },
    {
        "id": "d3257d5f7e78d0fd",
        "type": "group",
        "z": "2516bfc49bf9ae93",
        "name": "Generate Login Code",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "02349d4bc9b984be",
            "3497def59ce798a4",
            "93958fc79e684d6d",
            "b8d05169bfb0dddc",
            "1225ded49b840f79",
            "ebf9051ea2762a3d",
            "1e6dc7c39a068dbd",
            "ede0859338d0d387",
            "203ce94f2a893358",
            "90ac085396fb2c18",
            "5d51b35ef4122398",
            "477b373107469586",
            "8fb5538bb33154af",
            "cc3dd8309af44d50",
            "03a21109f37626dd",
            "67073c8f9f9f3b50",
            "44228ada72ceb79d"
        ],
        "x": 188.43759155273438,
        "y": 304.0000305175781,
        "w": 2112.5626525878906,
        "h": 267.9999694824219
    },
    {
        "id": "504b7dd5f4443187",
        "type": "group",
        "z": "2516bfc49bf9ae93",
        "name": "Verify Login Code",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6afa8272796e7f43",
            "9074f8ebc25080f5",
            "83f103a7d31ccb62",
            "b98ae8d5afee1880",
            "f1b3bd72969b5002",
            "9cb207f48ed9960e",
            "aba9c515a0325ee1",
            "0c6574428120de57",
            "317a9744536713d7",
            "3d0187df697e8f6e",
            "3723b83281660ef9",
            "cfe602b3d10df742",
            "c34c8e7915bd95b6",
            "de153b8f12bc7251",
            "446f360dc77b95c2",
            "a3e54eb22c2d9f49",
            "376912a40c729007",
            "20490c0b9cd5409c",
            "cf7c98415790bc48",
            "096adf76a5d36d1d",
            "7318d990172eb62e",
            "1544dae8d63aca25"
        ],
        "x": 193.43759155273438,
        "y": 978.0000219345093,
        "w": 1611.5626754760742,
        "h": 609.222550868988
    },
    {
        "id": "86328b858d237cc0",
        "type": "group",
        "z": "7b5adb0ea5051dde",
        "name": "Generate Email Verification Code",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "27641a5c0e96e506",
            "5290664568a9580c",
            "73be955f54e0a1cf",
            "4e54b4db81e68bd3",
            "4d2e561241bfeb4a",
            "49fb459db0e20d88",
            "4d4fc85a4cbc3fa0",
            "d2bb170811c7e3ce",
            "142126c28ee25935",
            "e3a1b932a40da68d",
            "f3af6926971316d7",
            "e7a4a7ce3a918afd",
            "2ac9bcdd246dcd1b",
            "20afa49cd7f1333a",
            "c67aedbb0e32c2ef",
            "940608463c098d67"
        ],
        "x": 140.437744140625,
        "y": 156,
        "w": 1559.562255859375,
        "h": 256.00013160705566
    },
    {
        "id": "9969b30d869201d8",
        "type": "group",
        "z": "7b5adb0ea5051dde",
        "name": "Send Verification Email",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e372772cfbb59b9c",
            "7e1fdd1358625e6b",
            "bcb8cc00ad1fddd5",
            "728b41cdc2db124f",
            "15cd4fe283a32563",
            "a751fedc12c69357",
            "808ccf3ff61f71fb",
            "30f35c3706f7e73a",
            "449601abfe35007d",
            "eae85c0e14c8e75a",
            "efed77b7b393022f",
            "ea31119eb7bd67a6",
            "6354755fd1859629"
        ],
        "x": 144.4410171508789,
        "y": 517.000244140625,
        "w": 1350.558982849121,
        "h": 230.99987506866455
    },
    {
        "id": "949c51bcc148dfb3",
        "type": "group",
        "z": "7b5adb0ea5051dde",
        "name": "Verification of Verification Code",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "de58e9f8df2901de",
            "0c38cd63aaf94470",
            "729d4b21a33c5b7a",
            "9ea9ac8218495dff",
            "4a58cc9304e1827a",
            "bb59b8e5d9788aaa",
            "3aca23ea96ecc134",
            "f794e2163604a3e6",
            "ea533ff22bb9c6f9",
            "ae50b5ea5a0e7f11",
            "87bcec7ef2a78fca",
            "f7517921a3f48250",
            "97d3c895498c70d1",
            "4c6bc4a627e7c602",
            "df38a61a9e01339b",
            "94de5778d72cfbb3",
            "383ec80e38217175",
            "6dce5331c96fe21c",
            "77de6fa83f179b30",
            "239276b527435a34",
            "47622d5e4883fe3e",
            "18ac95e19d551495"
        ],
        "x": 137.8958282470703,
        "y": 851,
        "w": 1717.1041717529297,
        "h": 581.2219161987305
    },
    {
        "id": "8094cd6c49361de0",
        "type": "group",
        "z": "c9628ef74314c30f",
        "name": "User bidding and auction details",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "66e4187b8646b82e",
            "1a40662de1dc7735",
            "44a2f310d47bb9a8",
            "f411daa453a1dc69",
            "de0583bc21f4f09f",
            "174f4f234e5de4a0",
            "33cd46374884c461",
            "ccfe73f7ed559dd9",
            "c4497493b65e3f40",
            "1ec89738862ad0ff",
            "e9474cffdf393f84"
        ],
        "x": 152.5,
        "y": 570,
        "w": 1629.5,
        "h": 361
    },
    {
        "id": "3505240ca76844cd",
        "type": "group",
        "z": "c9628ef74314c30f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "16abd41a2971f496",
            "641d780dcc883352",
            "86de2b3f6ee785b6",
            "b2dc5be0e463e3b2",
            "cdfe0a2804636784",
            "33d7ea129f06d293",
            "48669bbc4153ba14",
            "5454979b74efae5c",
            "5d4c6a8b5e91228a",
            "42aced8f862ec770",
            "64c4ff52e2e32083",
            "1ad7baa8c8602cdf",
            "16d574c6cd60c5b3",
            "b97f417981e54cc6",
            "09089e06e0208be6",
            "27acebb953ca655d",
            "429b717667dbab9d"
        ],
        "x": 148.5,
        "y": 130.88864707946777,
        "w": 1115.3956298828125,
        "h": 358.6113529205322
    },
    {
        "id": "65cd1384cab49cf2",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#d3a709",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#d3a709",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#d3a709",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#f6cc32",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#d3a709",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Bid'n'Buy Admin",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 96,
                "sy": 96,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "be94af06ea9d59b1",
        "type": "ui_tab",
        "name": "Users",
        "icon": "fa-user",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5e8b4fbda54ed064",
        "type": "ui_group",
        "name": "Create",
        "tab": "be94af06ea9d59b1",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "85672f28419095b4",
        "type": "postgreSQLConfig",
        "name": "bnbc",
        "host": "PGHOST",
        "hostFieldType": "env",
        "port": "5432",
        "portFieldType": "num",
        "database": "PGDBNAME",
        "databaseFieldType": "env",
        "ssl": "PGSSLMODE",
        "sslFieldType": "env",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "PGUSERNAME",
        "userFieldType": "env",
        "password": "PGPASSWORD",
        "passwordFieldType": "env"
    },
    {
        "id": "fd345b66c3ade413",
        "type": "ui_group",
        "name": "Users",
        "tab": "be94af06ea9d59b1",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "479b0ef6deea7abb",
        "type": "ui_tab",
        "name": "Auctions",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9562b271e8019727",
        "type": "ui_group",
        "name": "Create",
        "tab": "479b0ef6deea7abb",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b3804011d211bca3",
        "type": "websocket-listener",
        "path": "/ws/bnbc",
        "wholemsg": "false"
    },
    {
        "id": "6915e4d3f031bfa1",
        "type": "ui_spacer",
        "z": "00143787a55e03a5",
        "name": "spacer",
        "group": "9562b271e8019727",
        "order": 2,
        "width": 3,
        "height": 1
    },
    {
        "id": "06f89e0ca474bb29",
        "type": "ui_spacer",
        "z": "00143787a55e03a5",
        "name": "spacer",
        "group": "9562b271e8019727",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "16fa08c2c4b26d03",
        "type": "ui_tab",
        "name": "Moderate Auction",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4b03d779e67bc094",
        "type": "ui_group",
        "name": "Accept or Decline Auction?",
        "tab": "16fa08c2c4b26d03",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1a7110855a4b08f0",
        "type": "ui_tab",
        "name": "Quality Assurance",
        "icon": "fa-check",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c8b8d44246de8478",
        "type": "ui_group",
        "name": "Quality Assurance",
        "tab": "1a7110855a4b08f0",
        "order": 1,
        "disp": true,
        "width": "9",
        "collapse": false,
        "className": ""
    },
    {
        "id": "188856016c1b695d",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "c18fbcea0dccd057",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "24f63af22585426b",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "c0cff9f4db87c906",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "1d84453af6d120e5",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "61e09821fb176ad0",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "87c9b93e52ad185f",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "daeb260840f7d38d",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 13,
        "width": 2,
        "height": 1
    },
    {
        "id": "8b2005d687de2f96",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "318a2a18d6778b06",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "cf103f9f055a61cc",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "3b2779b2f8f4468d",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 18,
        "width": 2,
        "height": 1
    },
    {
        "id": "19bd9f21290dc349",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "17c941eb2bd03925",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 21,
        "width": 2,
        "height": 1
    },
    {
        "id": "2bd63a6452a4367a",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "36d69801140fb31e",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "70538797e6622ddd",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 25,
        "width": 1,
        "height": 1
    },
    {
        "id": "cae1ec105269016b",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 26,
        "width": 2,
        "height": 1
    },
    {
        "id": "a4b5d165c98a6325",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "eafd7a1c8e85e899",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 29,
        "width": 2,
        "height": 1
    },
    {
        "id": "18686ef6595ece31",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 30,
        "width": 1,
        "height": 1
    },
    {
        "id": "d214dd26f8f59b50",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 32,
        "width": 1,
        "height": 1
    },
    {
        "id": "bd0e06a3a9b20ce8",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 33,
        "width": 1,
        "height": 1
    },
    {
        "id": "c9a417d6b02ceec3",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 34,
        "width": 2,
        "height": 1
    },
    {
        "id": "75a862b695ca62c8",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 35,
        "width": 1,
        "height": 1
    },
    {
        "id": "6d8b092294e61aee",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 37,
        "width": 2,
        "height": 1
    },
    {
        "id": "0ccb52310daa336b",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 38,
        "width": 1,
        "height": 1
    },
    {
        "id": "8a1c896b68db8de9",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 39,
        "width": 2,
        "height": 1
    },
    {
        "id": "af33d9706dbcda81",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 40,
        "width": 1,
        "height": 1
    },
    {
        "id": "61eb974d1f6cd024",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 42,
        "width": 1,
        "height": 1
    },
    {
        "id": "6975af5788db1c6c",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 43,
        "width": 1,
        "height": 1
    },
    {
        "id": "b90bfbad646288a4",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 44,
        "width": 2,
        "height": 1
    },
    {
        "id": "208887bfd949d746",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 45,
        "width": 1,
        "height": 1
    },
    {
        "id": "882ae943091407d9",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 46,
        "width": 2,
        "height": 1
    },
    {
        "id": "d19454939a8e5e66",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 47,
        "width": 1,
        "height": 1
    },
    {
        "id": "a1a1881c24badd92",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 49,
        "width": 2,
        "height": 1
    },
    {
        "id": "3b238a759ea6b2b1",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 50,
        "width": 1,
        "height": 1
    },
    {
        "id": "8bb77359eb1195cf",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 51,
        "width": 2,
        "height": 1
    },
    {
        "id": "a3db276a8308d9e0",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 52,
        "width": 1,
        "height": 1
    },
    {
        "id": "eb5f2d84c8c91a31",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 54,
        "width": 1,
        "height": 1
    },
    {
        "id": "c6e978c0266f4312",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 55,
        "width": 1,
        "height": 1
    },
    {
        "id": "95a2ba9dfe1ea327",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 56,
        "width": 2,
        "height": 1
    },
    {
        "id": "ec57f44734423eaa",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 57,
        "width": 1,
        "height": 1
    },
    {
        "id": "3d88fd6de574ceed",
        "type": "ui_spacer",
        "z": "3270a3a7e718167b",
        "name": "spacer",
        "group": "c8b8d44246de8478",
        "order": 58,
        "width": 2,
        "height": 1
    },
    {
        "id": "041a4d9bef78175c",
        "type": "ui_tab",
        "name": "Welcome",
        "icon": "fa-home",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "780f92655947be78",
        "type": "ui_group",
        "name": "Welcome",
        "tab": "041a4d9bef78175c",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "49c93391d41e757a",
        "type": "ui_tab",
        "name": "Login & Register Codes",
        "icon": "fa-code",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e74287b60578698c",
        "type": "ui_group",
        "name": "Login & Verification Codes",
        "tab": "49c93391d41e757a",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "80c175cec2e92ffa",
        "type": "debug",
        "z": "01e0c1a394d7f324",
        "name": "DEBUG ALL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 249.5,
        "y": 200,
        "wires": []
    },
    {
        "id": "65cfe48e96d34238",
        "type": "function",
        "z": "454f61a0a8b759f9",
        "name": "function 8",
        "func": "\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 199.5,
        "y": 181,
        "wires": [
            []
        ]
    },
    {
        "id": "626e48f3cb80df01",
        "type": "function",
        "z": "d03c4820970ac189",
        "name": "send error",
        "func": "msg.payload = {\n    status: \"error\",\n    msg: msg.error\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "3d1e8765a364c1f6"
            ]
        ]
    },
    {
        "id": "3d1e8765a364c1f6",
        "type": "http response",
        "z": "d03c4820970ac189",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 433.999755859375,
        "y": 79.99992370605469,
        "wires": []
    },
    {
        "id": "b843b09e915a1928",
        "type": "switch",
        "z": "e8bbdc11f1fc0dd8",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "db_check",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "missing_data",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 80,
        "wires": [
            [],
            [
                "a0e47f0b6400dad9"
            ]
        ]
    },
    {
        "id": "a0e47f0b6400dad9",
        "type": "http response",
        "z": "e8bbdc11f1fc0dd8",
        "name": "error: missing parameters",
        "statusCode": "",
        "headers": {},
        "x": 338.99993896484375,
        "y": 176.00001525878906,
        "wires": []
    },
    {
        "id": "e631d8a20dc635cf",
        "type": "switch",
        "z": "507161adae3ca528",
        "name": "yes/no",
        "property": "email_is_valid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 294.01033782958984,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "247289e623912f75",
        "type": "function",
        "z": "507161adae3ca528",
        "name": "is email valid?",
        "func": "\nvar res = global.get(\"validateemail\")(msg.origpayload.email);\n\nmsg.email_is_valid = (res != null);\nmsg.email_validation_result = res;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 297,
        "y": 289.6699523925781,
        "wires": [
            [
                "e631d8a20dc635cf"
            ]
        ]
    },
    {
        "id": "8116a126d363a248",
        "type": "function",
        "z": "1f6116ea2b105a8b",
        "name": "create dont spam me link",
        "func": "// only create a dont-spam-me link if the email is only\n// going to one user. Else the CC-user could use\n// the link to block the TO-user\nif ( !(\"cc_email\" in msg.email) ) {\n\n  var encData = global.get(\"encrypt\")(JSON.stringify({\n    em: msg.email.to_email,\n    ts: Date.now()\n  }));\n \n  msg.email.data.dont = {\n    spamMeLink: env.get(\"HOSTNAME_FRONTEND\") + \"/dont-spam-me?d=\" + encData\n  };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 403,
        "y": 309,
        "wires": [
            []
        ]
    },
    {
        "id": "9e25c9e744539b6d",
        "type": "http response",
        "z": "d1100a08134ce3c4",
        "name": "error response",
        "statusCode": "",
        "headers": {},
        "x": 763,
        "y": 303,
        "wires": []
    },
    {
        "id": "8204a34bb3014caf",
        "type": "function",
        "z": "d1100a08134ce3c4",
        "name": "send error",
        "func": "msg.payload = {\n    status: \"error\",\n    msg: \"failed to understand the depth of possibilies\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 601.4443969726562,
        "y": 361.1876525878906,
        "wires": [
            [
                "9e25c9e744539b6d"
            ]
        ]
    },
    {
        "id": "af19d6f229c4f394",
        "type": "catch",
        "z": "d1100a08134ce3c4",
        "name": "",
        "scope": [
            "f485ad532947a7b1"
        ],
        "uncaught": false,
        "x": 474.44451904296875,
        "y": 422.18719482421875,
        "wires": [
            [
                "8204a34bb3014caf"
            ]
        ]
    },
    {
        "id": "f485ad532947a7b1",
        "type": "function",
        "z": "d1100a08134ce3c4",
        "name": "decode data",
        "func": "msg.datapayload = JSON.parse( global.get(\"decrypt\")(msg.payload.data) );\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 408.9896697998047,
        "y": 475.5381317138672,
        "wires": [
            []
        ]
    },
    {
        "id": "37aae75712631d64",
        "type": "function",
        "z": "d1d7d446235ef659",
        "name": "openai request",
        "func": "const { Configuration, OpenAIApi } = global.get(\"openai\");\n\nconst configuration = new Configuration({\n    apiKey: env.get(\"OPEN_AI_APIKEY\"),\n});\nconst openai = new OpenAIApi(configuration);\n\n\nconst response = await openai.createCompletion({\n  model: \"text-davinci-003\",\n  prompt: msg.openai_prompt,\n  temperature: 0,\n  max_tokens: 200,\n  top_p: 1,\n  frequency_penalty: 0.0,\n  presence_penalty: 0.0,\n  stop: [\"\\n\"],\n});\n\nmsg.openaipayload = response.data.choices[0];\n\n//msg.payload = response;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 309,
        "y": 174,
        "wires": [
            [
                "e9507faf13b09943"
            ]
        ]
    },
    {
        "id": "414aee716460928d",
        "type": "template",
        "z": "d1d7d446235ef659",
        "name": "openai request formulation",
        "field": "openai_prompt",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are a content moderator for an auction-style bidding platform. Imagine the terms and services allow the \nselling and buying of anything including adult content and animals. Provide a reason and a rating from 1 to 10 for \nappropriateness. Result in form of { \"appropriateness\": xx, \"reason\": xx }. Rate the following content:\n\n{{#payload}}{{ text }}{{/payload}}\n\nA:\n",
        "output": "str",
        "x": 307.0000305175781,
        "y": 101.0000057220459,
        "wires": [
            [
                "37aae75712631d64"
            ]
        ]
    },
    {
        "id": "e9507faf13b09943",
        "type": "function",
        "z": "d1d7d446235ef659",
        "name": "parse json",
        "func": "msg.openaipayload = JSON.parse(msg.openaipayload.text);\nmsg.openaipayload_as_string = JSON.stringify(msg.openaipayload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 335.5,
        "y": 253,
        "wires": [
            []
        ]
    },
    {
        "id": "94148945702ebbcd",
        "type": "catch",
        "z": "d1d7d446235ef659",
        "name": "",
        "scope": [
            "e9507faf13b09943",
            "37aae75712631d64"
        ],
        "uncaught": false,
        "x": 553.4999866485596,
        "y": 184.00000405311584,
        "wires": [
            [
                "842729340c97b573"
            ]
        ]
    },
    {
        "id": "842729340c97b573",
        "type": "function",
        "z": "d1d7d446235ef659",
        "name": "function 9",
        "func": "msg.openaipayload = {\n    appropriateness: -1,\n    reason: \"error occured \" + JSON.stringify(msg.error)\n}\nmsg.openaipayload_as_string = JSON.stringify(msg.openaipayload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 632.5000019073486,
        "y": 167.00000548362732,
        "wires": [
            []
        ]
    },
    {
        "id": "be65f5c96b3c4754",
        "type": "inject",
        "z": "6f63687f08193049",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 111.89584350585938,
        "y": 81.6467056274414,
        "wires": [
            [
                "0f132a65e6f1aa30"
            ]
        ]
    },
    {
        "id": "19fcb37cbaa8bd16",
        "type": "function",
        "z": "6f63687f08193049",
        "name": "check env setup",
        "func": "var reqenvvars = [\n    \"PGSSLMODE\",\n    \"FASTMAIL_API\",\n    \"SECRET_KEY\",\n    \"SECRET_IV\",\n    \"HOSTNAME_FRONTEND\",\n    \"API_TOKEN\",\n    \"OPEN_AI_APIKEY\",\n    \"ADMIN_FRONTEND\",\n    \"PGHOST\",\n    \"PGDBNAME\",\n    \"PGPASSWORD\",\n    \"PGUSERNAME\",\n    \"SNDML_FROM_EMAIL\"\n];\n\nreqenvvars.forEach( ( envname ) => {\n    if ( env.get(envname) == undefined ) {\n        throw \"Env not correctly set, missing \" + envname;\n    }\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 458.4515686035156,
        "y": 261.15455627441406,
        "wires": [
            [
                "ae572e75cea7fc9f"
            ]
        ]
    },
    {
        "id": "3b386318b3ceeb14",
        "type": "function",
        "z": "6f63687f08193049",
        "name": "encrypt",
        "func": "const crypto = global.get('cryptoModule');\n\nglobal.set( \"crypto_key\", Buffer.from(env.get(\"SECRET_KEY\")).slice(0,32));\nglobal.set( \"crypto_iv\", Buffer.from(env.get(\"SECRET_IV\")).slice(0, 16));\n\nconst enc = function(text) {\n    const iv = crypto.randomBytes(16);\n    var cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(global.get(\"crypto_key\")), iv);\n    var encrypted = cipher.update(text);\n    encrypted = Buffer.concat([encrypted, cipher.final()]);\n\n    var jsData = JSON.stringify({ \n        iv: iv.toString('hex'), \n        da: encrypted.toString('hex') \n    });\n\n    cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(global.get(\"crypto_key\")), Buffer.from(global.get(\"crypto_iv\")));\n    encrypted = cipher.update(jsData);\n    encrypted = Buffer.concat([encrypted, cipher.final()]);\n    \n    return encrypted.toString('hex');\n}\n\nconst dec = function(text) {\n    var decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(global.get(\"crypto_key\")), Buffer.from(global.get(\"crypto_iv\")) );\n    var decrypted = decipher.update(Buffer.from(text,'hex'));\n\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n\n    text = JSON.parse( decrypted.toString());\n\n    let iv = Buffer.from(text.iv, 'hex');\n    let encryptedText = Buffer.from(text.da, 'hex');\n    decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(global.get(\"crypto_key\")), iv);\n    decrypted = decipher.update(encryptedText);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n\n    return decrypted.toString();\n}\n\nglobal.set( \"encrypt\", enc );\nglobal.set( \"decrypt\", dec);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 438.4515686035156,
        "y": 191.15455627441406,
        "wires": [
            [
                "6e94673ed2ab2896"
            ]
        ]
    },
    {
        "id": "6e94673ed2ab2896",
        "type": "function",
        "z": "6f63687f08193049",
        "name": "test encrpt",
        "func": "\nvar encrypted = global.get(\"encrypt\")(\"hello world\");\n\nmsg.payload = {\n    enctd: encrypted,\n    decrc: global.get(\"decrypt\")(encrypted)   \n} ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 796.447998046875,
        "y": 192.15455627441406,
        "wires": [
            [
                "9862c1efc277cc88"
            ]
        ]
    },
    {
        "id": "c7f053140f1df223",
        "type": "function",
        "z": "6f63687f08193049",
        "name": "define validate email function",
        "func": "const validateEmail = (email) => {\n    return String(email)\n        .toLowerCase()\n        .match(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n        );\n};\n\nglobal.set(\"validateemail\", validateEmail);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 498.4515686035156,
        "y": 107.6467056274414,
        "wires": [
            [
                "2a6025e24b5c6102"
            ]
        ]
    },
    {
        "id": "2a6025e24b5c6102",
        "type": "function",
        "z": "6f63687f08193049",
        "name": "test email validation",
        "func": "var emails = [\n    \"invalid\",\n    \"is@ok.de\",\n    \"@broken.de\",\n    \"does@this.also.work.de\",\n    \"helo.world.fubar@this.is.valid\",\n    \"ddd@ddd@dd.dd\",\n    \"broken@broken\",\n    \"1231.1212@121.12.12\",\n    \"1231.1212@121.12.12.com\",\n]\nvar fun = global.get(\"validateemail\");\n\nvar result = {};\n\nemails.forEach((e) => {\n   result[e] = fun(e)\n});\n\nmsg.payload = {\n    emails: emails,\n    result: result\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 776.447998046875,
        "y": 107.6467056274414,
        "wires": [
            [
                "9862c1efc277cc88"
            ]
        ]
    },
    {
        "id": "b0fb096cc8025200",
        "type": "link out",
        "z": "6f63687f08193049",
        "name": "link out 40",
        "mode": "link",
        "links": [
            "d95a5b760301b68a"
        ],
        "x": 832.451416015625,
        "y": 311.3611145019531,
        "wires": []
    },
    {
        "id": "35c67f4f4e478f85",
        "type": "catch",
        "z": "6f63687f08193049",
        "name": "",
        "scope": [
            "19fcb37cbaa8bd16",
            "3b386318b3ceeb14",
            "6e94673ed2ab2896",
            "c7f053140f1df223",
            "2a6025e24b5c6102"
        ],
        "uncaught": false,
        "x": 186.44791412353516,
        "y": 418.5278072357178,
        "wires": [
            [
                "ee30a861d46a6f18",
                "146ca749b78bd5b2"
            ]
        ]
    },
    {
        "id": "ee30a861d46a6f18",
        "type": "change",
        "z": "6f63687f08193049",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origerror",
                "pt": "msg",
                "to": "error",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 425.43756103515625,
        "y": 350.70843505859375,
        "wires": [
            [
                "ae572e75cea7fc9f"
            ]
        ]
    },
    {
        "id": "ae572e75cea7fc9f",
        "type": "switch",
        "z": "6f63687f08193049",
        "name": "Send Init Email?",
        "property": "INITEMAIL",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "yes",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 2,
        "x": 679.5,
        "y": 351,
        "wires": [
            [
                "b0fb096cc8025200"
            ],
            [
                "93180fe394b8d05a"
            ]
        ]
    },
    {
        "id": "9862c1efc277cc88",
        "type": "subflow:1d3e4db6ecdf8e95",
        "z": "6f63687f08193049",
        "name": "TODO these could generate exceptions",
        "x": 992.5,
        "y": 148,
        "wires": []
    },
    {
        "id": "0f132a65e6f1aa30",
        "type": "link call",
        "z": "6f63687f08193049",
        "name": "",
        "links": [
            "9a527b8f0dce6d08"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 155,
        "y": 190,
        "wires": [
            [
                "3b386318b3ceeb14",
                "c7f053140f1df223",
                "19fcb37cbaa8bd16"
            ]
        ]
    },
    {
        "id": "93180fe394b8d05a",
        "type": "debug",
        "z": "6f63687f08193049",
        "name": "INIT DETAILS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 895.5,
        "y": 400,
        "wires": []
    },
    {
        "id": "146ca749b78bd5b2",
        "type": "debug",
        "z": "6f63687f08193049",
        "name": "INIT ERRORS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 412,
        "y": 459,
        "wires": []
    },
    {
        "id": "42175c8109b17081",
        "type": "http in",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "url": "/api/:path1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 85,
        "y": 978.000205039978,
        "wires": [
            [
                "7529a56b38cde0b4"
            ]
        ]
    },
    {
        "id": "415daddfa2f09e43",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "POST handler",
        "property": "req.params.path1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "proposals",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "users",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "proposal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "bid",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "user",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 1003.9999923706055,
        "y": 996.000566482544,
        "wires": [
            [
                "c49f0fc343b113fc"
            ],
            [
                "c49f0fc343b113fc"
            ],
            [
                "8a9740647d8b9de6"
            ],
            [
                "fbb2dcb72c55fd05"
            ],
            [
                "1e760614817dad6e"
            ],
            [
                "c49f0fc343b113fc"
            ]
        ]
    },
    {
        "id": "a6f30d5708e1a412",
        "type": "http response",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1176.000244140625,
        "y": 1314.0001220703125,
        "wires": []
    },
    {
        "id": "650565a2d8f644a7",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "cdfe0a2804636784"
        ],
        "x": 1794.500605583191,
        "y": 420.00020122528076,
        "wires": []
    },
    {
        "id": "fba142a7b0634259",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "33d7ea129f06d293"
        ],
        "x": 1522.500244140625,
        "y": 277.0001525878906,
        "wires": []
    },
    {
        "id": "168b0844f9b22469",
        "type": "http in",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "url": "/api/:path1/:path2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 105,
        "y": 925.0002021789551,
        "wires": [
            [
                "7529a56b38cde0b4"
            ]
        ]
    },
    {
        "id": "f41d7d3566d08f7e",
        "type": "http in",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "url": "/api/:path1/:path2/:path3",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 125,
        "y": 872.0001411437988,
        "wires": [
            [
                "7529a56b38cde0b4"
            ]
        ]
    },
    {
        "id": "d6a91b22db931dbd",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "proposals handler",
        "property": "req.params.path2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "all",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1295.89599609375,
        "y": 284.0001664161682,
        "wires": [
            [
                "fba142a7b0634259"
            ],
            [
                "575c4dd631dbe29d"
            ]
        ]
    },
    {
        "id": "ac85faa6b8f463ac",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "proposal handler",
        "property": "req.params.path2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-z0-9-]{36}$",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1295.89599609375,
        "y": 429.0001516342163,
        "wires": [
            [
                "dda684b3e27cb284"
            ],
            [
                "575c4dd631dbe29d"
            ]
        ]
    },
    {
        "id": "dda684b3e27cb284",
        "type": "function",
        "z": "40ea5f2aea6592ae",
        "name": "set uuid parameter",
        "func": "msg.req.params[\"uuid\"] = msg.req.params.path2;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1644.5001335144043,
        "y": 420.0000858306885,
        "wires": [
            [
                "650565a2d8f644a7"
            ]
        ]
    },
    {
        "id": "5f9969817f9c403d",
        "type": "function",
        "z": "40ea5f2aea6592ae",
        "g": "487c8f7449f90598",
        "name": "not found",
        "func": "msg.statusCode = 404;\nmsg.payload = {\n    status: \"not_found\",\n    msg: \"page not found\",\n    path: msg.req.originalUrl\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 981.500244140625,
        "y": 1230.4265775680542,
        "wires": [
            [
                "a6f30d5708e1a412",
                "9c719970bff6c344"
            ]
        ]
    },
    {
        "id": "7ba18c461581ae70",
        "type": "http in",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "url": "/api",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 65,
        "y": 1021.0002145767212,
        "wires": [
            [
                "a2a7b683c264dd2a"
            ]
        ]
    },
    {
        "id": "b03c04d3dbd79e1a",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "users handler",
        "property": "req.params.path2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "all",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^[a-z0-9-]{36}$",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 1305.89599609375,
        "y": 361.0001554489136,
        "wires": [
            [
                "7ade38efb2383248"
            ],
            [
                "89b2b92c371d90c8"
            ],
            [
                "575c4dd631dbe29d"
            ]
        ]
    },
    {
        "id": "7ade38efb2383248",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "48669bbc4153ba14"
        ],
        "x": 1523.500244140625,
        "y": 348.0001525878906,
        "wires": []
    },
    {
        "id": "341c2535113bf35e",
        "type": "function",
        "z": "40ea5f2aea6592ae",
        "name": "not implemented",
        "func": "var pa = msg.req.params;\n\nmsg.statusCode = 501;\nmsg.payload = JSON.stringify({\n    status: \"not_implemented\",\n    msg: \"TODO functionality\",\n    path: msg.req.originalUrl\n})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2377.0001831054688,
        "y": 779.0002365112305,
        "wires": [
            [
                "667c3a588eff6983"
            ]
        ]
    },
    {
        "id": "fc4121d2cc388885",
        "type": "http in",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "url": "/api/:path1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 85,
        "y": 647.0000400543213,
        "wires": [
            [
                "7529a56b38cde0b4"
            ]
        ]
    },
    {
        "id": "f0bc9afd9f2fc65d",
        "type": "http in",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "url": "/api/:path1/:path2",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 105,
        "y": 586.0000438690186,
        "wires": [
            [
                "7529a56b38cde0b4"
            ]
        ]
    },
    {
        "id": "7d5b1e56a31f7c94",
        "type": "http in",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "url": "/api/:path1/:path2/:path3",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 125,
        "y": 535.0000457763672,
        "wires": [
            [
                "7529a56b38cde0b4"
            ]
        ]
    },
    {
        "id": "b0778c06d93a9be6",
        "type": "http in",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "url": "/api",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 65,
        "y": 690.0000982284546,
        "wires": [
            [
                "a2a7b683c264dd2a"
            ]
        ]
    },
    {
        "id": "45a940ec09abc397",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "method",
        "property": "req.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 756.8960189819336,
        "y": 995.8895378112793,
        "wires": [
            [
                "b3fcaa365e5bcbe8"
            ],
            [
                "415daddfa2f09e43"
            ],
            [
                "5f9969817f9c403d"
            ]
        ]
    },
    {
        "id": "823739615b1244a2",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "post new offer",
        "mode": "link",
        "links": [
            "25e513171ea468df"
        ],
        "x": 1531.5002098083496,
        "y": 733.424204826355,
        "wires": []
    },
    {
        "id": "b3fcaa365e5bcbe8",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "GET handler",
        "property": "req.params.path1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "proposals",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "users",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "proposal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "bid",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 1010.8958320617676,
        "y": 473.88905239105225,
        "wires": [
            [
                "d6a91b22db931dbd"
            ],
            [
                "b03c04d3dbd79e1a"
            ],
            [
                "ac85faa6b8f463ac"
            ],
            [
                "0cd28b47ca230b20"
            ],
            [
                "54b96e96d686e24a"
            ]
        ]
    },
    {
        "id": "8a9740647d8b9de6",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "proposal handler",
        "property": "req.params.path2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "new",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "make_decision",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^[a-z0-9-]{36}$",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 1304.8959503173828,
        "y": 776.8891887664795,
        "wires": [
            [
                "823739615b1244a2"
            ],
            [
                "714f7b2a4a8ba90a"
            ],
            [
                "341c2535113bf35e"
            ],
            [
                "d80f6bfeaec940de"
            ]
        ]
    },
    {
        "id": "a2a7b683c264dd2a",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "g": "487c8f7449f90598",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "cc0d78a673304144"
        ],
        "x": 71.4445104598999,
        "y": 1230.4265775680542,
        "wires": []
    },
    {
        "id": "cc0d78a673304144",
        "type": "link in",
        "z": "40ea5f2aea6592ae",
        "g": "487c8f7449f90598",
        "name": "API NOT FOUND",
        "links": [
            "a2a7b683c264dd2a",
            "575c4dd631dbe29d",
            "d80f6bfeaec940de",
            "abc3f4590b0a78c6",
            "cfe518eea648cfe3",
            "16ce1ec17155ded0",
            "9298d66291096b56",
            "c49f0fc343b113fc",
            "54b96e96d686e24a"
        ],
        "x": 655.4376831054688,
        "y": 1230.4265775680542,
        "wires": [
            [
                "5f9969817f9c403d"
            ]
        ]
    },
    {
        "id": "575c4dd631dbe29d",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "g": "2ba8206c046d35e7",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "cc0d78a673304144"
        ],
        "x": 1483.500244140625,
        "y": 618.444580078125,
        "wires": []
    },
    {
        "id": "d80f6bfeaec940de",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "g": "487c8f7449f90598",
        "name": "NOT FOUND",
        "mode": "link",
        "links": [
            "cc0d78a673304144"
        ],
        "x": 1481.4453125,
        "y": 1230.4265775680542,
        "wires": []
    },
    {
        "id": "9c719970bff6c344",
        "type": "debug",
        "z": "40ea5f2aea6592ae",
        "name": "NOT FOUND",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1174.437744140625,
        "y": 1363.1737060546875,
        "wires": []
    },
    {
        "id": "fbb2dcb72c55fd05",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "bid handler",
        "property": "req.params.path2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "new",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1324.8959503173828,
        "y": 883.8891220092773,
        "wires": [
            [
                "bc211ee1f76e75a0"
            ],
            [
                "d80f6bfeaec940de"
            ]
        ]
    },
    {
        "id": "bc211ee1f76e75a0",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "post new bid",
        "mode": "link",
        "links": [
            "a1071b9d620c40d4"
        ],
        "x": 1531.5002098083496,
        "y": 877.4239501953125,
        "wires": []
    },
    {
        "id": "1e760614817dad6e",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "user handler",
        "property": "req.params.path2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "send",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "register",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "verify",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "dontspamme",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 1324.8959503173828,
        "y": 962.8890571594238,
        "wires": [
            [
                "ade7b5712da4f502"
            ],
            [
                "627985f8a52639b4"
            ],
            [
                "349c67fcf6513cf3"
            ],
            [
                "46453dd4dcc215e7"
            ],
            [
                "353d91dbcc25531f"
            ],
            [
                "d80f6bfeaec940de"
            ]
        ]
    },
    {
        "id": "627985f8a52639b4",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "142126c28ee25935"
        ],
        "x": 1531.5002098083496,
        "y": 942.4171142578125,
        "wires": []
    },
    {
        "id": "68ec96b6342d3dbd",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "ea533ff22bb9c6f9"
        ],
        "x": 2077.4378719329834,
        "y": 883.4136018753052,
        "wires": []
    },
    {
        "id": "e651fa2e6bc6cf29",
        "type": "http in",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "url": "/api/:path1/:path2/:path3/:path4",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 155,
        "y": 486.88887214660645,
        "wires": [
            [
                "7529a56b38cde0b4"
            ]
        ]
    },
    {
        "id": "ade7b5712da4f502",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "/user/send handler",
        "property": "req.params.path3",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "verify",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1851.896240234375,
        "y": 839.88916015625,
        "wires": [
            [
                "0a29338b52b13f31"
            ],
            [
                "cfe518eea648cfe3"
            ]
        ]
    },
    {
        "id": "0a29338b52b13f31",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "/user/send/verify handler",
        "property": "req.params.path4",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "email",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 2350.8964233398438,
        "y": 830.889102935791,
        "wires": [
            [
                "fb24616382b60b38"
            ],
            [
                "abc3f4590b0a78c6"
            ]
        ]
    },
    {
        "id": "fb24616382b60b38",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "30f35c3706f7e73a"
        ],
        "x": 2633.895751953125,
        "y": 827.4169311523438,
        "wires": []
    },
    {
        "id": "303afc037a9b5e76",
        "type": "http in",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "url": "/api/:path1/:path2/:path3/:path4",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 146,
        "y": 823.88916015625,
        "wires": [
            [
                "7529a56b38cde0b4"
            ]
        ]
    },
    {
        "id": "46453dd4dcc215e7",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "/user/login handler",
        "property": "req.params.path3",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "email",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "loginlink",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 1853.896728515625,
        "y": 1001.889536857605,
        "wires": [
            [
                "5b5c966a1a395882"
            ],
            [
                "0b3e9d820c4adae1"
            ],
            [
                "cfe518eea648cfe3"
            ]
        ]
    },
    {
        "id": "b1d61f03a3a9d567",
        "type": "comment",
        "z": "40ea5f2aea6592ae",
        "name": ":path1 Handlers",
        "info": "",
        "x": 970.4445419311523,
        "y": 159.7535104751587,
        "wires": []
    },
    {
        "id": "3943db41248186a2",
        "type": "comment",
        "z": "40ea5f2aea6592ae",
        "name": ":path2 Handlers",
        "info": "",
        "x": 1320.895751953125,
        "y": 159.7535104751587,
        "wires": []
    },
    {
        "id": "ec8a692c8b207a1a",
        "type": "comment",
        "z": "40ea5f2aea6592ae",
        "name": ":path3 Handlers",
        "info": "",
        "x": 1860.896011352539,
        "y": 159.7535104751587,
        "wires": []
    },
    {
        "id": "066665534de25933",
        "type": "comment",
        "z": "40ea5f2aea6592ae",
        "name": ":path4 Handlers",
        "info": "",
        "x": 2360.895980834961,
        "y": 159.7535104751587,
        "wires": []
    },
    {
        "id": "5b5c966a1a395882",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "/user/login/email handler",
        "property": "req.params.path4",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "eq",
                "v": "send",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "verify",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 2356.89599609375,
        "y": 985.8892211914062,
        "wires": [
            [
                "acbc887acc9963d3"
            ],
            [
                "9cccce993a7d460f"
            ],
            [
                "b482c43545f18102"
            ],
            [
                "abc3f4590b0a78c6"
            ]
        ]
    },
    {
        "id": "acbc887acc9963d3",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "8fb5538bb33154af"
        ],
        "x": 2633.895751953125,
        "y": 926.4204511642456,
        "wires": []
    },
    {
        "id": "9cccce993a7d460f",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "654a727d5e73414e"
        ],
        "x": 2633.895751953125,
        "y": 981.8891143798828,
        "wires": []
    },
    {
        "id": "b482c43545f18102",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "317a9744536713d7"
        ],
        "x": 2633.895751953125,
        "y": 1028.8891620635986,
        "wires": []
    },
    {
        "id": "abc3f4590b0a78c6",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "g": "487c8f7449f90598",
        "name": "NOT FOUND",
        "mode": "link",
        "links": [
            "cc0d78a673304144"
        ],
        "x": 2570.896240234375,
        "y": 1230.4265775680542,
        "wires": []
    },
    {
        "id": "cfe518eea648cfe3",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "g": "487c8f7449f90598",
        "name": "NOT FOUND",
        "mode": "link",
        "links": [
            "cc0d78a673304144"
        ],
        "x": 2025.8958740234375,
        "y": 1230.4265775680542,
        "wires": []
    },
    {
        "id": "0cd28b47ca230b20",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "bid handler",
        "property": "req.params.path2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-z0-9-]{36}$",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1315.89599609375,
        "y": 487.88922119140625,
        "wires": [
            [
                "4b7ea8384bd26f06"
            ],
            [
                "575c4dd631dbe29d"
            ]
        ]
    },
    {
        "id": "4b7ea8384bd26f06",
        "type": "function",
        "z": "40ea5f2aea6592ae",
        "name": "set uuid parameter",
        "func": "msg.req.params[\"uuid\"] = msg.req.params.path2;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1639.34033203125,
        "y": 478.8890075683594,
        "wires": [
            [
                "8b28734e016e428f"
            ]
        ]
    },
    {
        "id": "8b28734e016e428f",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "5454979b74efae5c"
        ],
        "x": 1792.8960590362549,
        "y": 479.42031955718994,
        "wires": []
    },
    {
        "id": "0b3e9d820c4adae1",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 30",
        "mode": "link",
        "links": [
            "3723b83281660ef9"
        ],
        "x": 2076.437826156616,
        "y": 1002.8682661056519,
        "wires": []
    },
    {
        "id": "349c67fcf6513cf3",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "/user/verify handler",
        "property": "req.params.path3",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "eq",
                "v": "resend",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "linkdata",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 1851.5625534057617,
        "y": 915.4445123672485,
        "wires": [
            [
                "68ec96b6342d3dbd"
            ],
            [
                "341c2535113bf35e"
            ],
            [
                "3ee6997d3ccde613"
            ],
            [
                "cfe518eea648cfe3"
            ]
        ]
    },
    {
        "id": "3ee6997d3ccde613",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 31",
        "mode": "link",
        "links": [
            "87bcec7ef2a78fca"
        ],
        "x": 2076.437826156616,
        "y": 924.9758729934692,
        "wires": []
    },
    {
        "id": "667c3a588eff6983",
        "type": "http response",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2565.0072479248047,
        "y": 779.7777948379517,
        "wires": []
    },
    {
        "id": "7529a56b38cde0b4",
        "type": "function",
        "z": "40ea5f2aea6592ae",
        "name": "check auth",
        "func": "\nif (msg.req.get(\"X-Auth\") == env.get(\"API_TOKEN\")) {\n    msg.status = \"ok\"\n} else {\n    msg.status = \"auth token mismatch\";\n    msg.req_token = msg.req.get(\"X-Auth\");\n    msg.our_token = env.get(\"API_TOKEN\");\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 559.4446411132812,
        "y": 818.7995796203613,
        "wires": [
            [
                "910a405581c51b0e",
                "970b6dc7d2146875"
            ]
        ]
    },
    {
        "id": "910a405581c51b0e",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 352.0078125,
        "y": 1004.1563110351562,
        "wires": [
            [
                "b845467f255b0c8d"
            ],
            [
                "5f9969817f9c403d"
            ]
        ]
    },
    {
        "id": "970b6dc7d2146875",
        "type": "debug",
        "z": "40ea5f2aea6592ae",
        "d": true,
        "name": "AUTH DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 758.4479522705078,
        "y": 713.2743,
        "wires": []
    },
    {
        "id": "714f7b2a4a8ba90a",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 33",
        "mode": "link",
        "links": [
            "2349281462e6046f"
        ],
        "x": 1531.5002098083496,
        "y": 772.524411201477,
        "wires": []
    },
    {
        "id": "b845467f255b0c8d",
        "type": "change",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origpayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 556,
        "y": 997,
        "wires": [
            [
                "45a940ec09abc397"
            ]
        ]
    },
    {
        "id": "353d91dbcc25531f",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 38",
        "mode": "link",
        "links": [
            "ab0aaf85f16dbce9"
        ],
        "x": 1531.5002098083496,
        "y": 983,
        "wires": []
    },
    {
        "id": "8f147e1970be0c60",
        "type": "http in",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "url": "/:path1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 75,
        "y": 745.0001029968262,
        "wires": [
            [
                "a2a7b683c264dd2a"
            ]
        ]
    },
    {
        "id": "4c5494a48c4005b7",
        "type": "http in",
        "z": "40ea5f2aea6592ae",
        "name": "",
        "url": "/:path1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 75,
        "y": 1065.000244140625,
        "wires": [
            [
                "a2a7b683c264dd2a"
            ]
        ]
    },
    {
        "id": "42c7c23e6ce4e3a4",
        "type": "switch",
        "z": "40ea5f2aea6592ae",
        "name": "/users/:uuid/ handler",
        "property": "req.params.path3",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "eq",
                "v": "proposals",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 1863.0000114440918,
        "y": 365.00005531311035,
        "wires": [
            [
                "6e2aa87058c9ca31"
            ],
            [
                "7763efbb9695e7e8"
            ],
            [
                "9298d66291096b56"
            ]
        ]
    },
    {
        "id": "9298d66291096b56",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "g": "2ba8206c046d35e7",
        "name": "link out 41",
        "mode": "link",
        "links": [
            "cc0d78a673304144"
        ],
        "x": 2025.5,
        "y": 618.444580078125,
        "wires": []
    },
    {
        "id": "89b2b92c371d90c8",
        "type": "function",
        "z": "40ea5f2aea6592ae",
        "name": "set uuid parameter",
        "func": "msg.req.params[\"uuid\"] = msg.req.params.path2;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1646.0000114440918,
        "y": 364.00005531311035,
        "wires": [
            [
                "42c7c23e6ce4e3a4"
            ]
        ]
    },
    {
        "id": "7763efbb9695e7e8",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 42",
        "mode": "link",
        "links": [
            "66e4187b8646b82e"
        ],
        "x": 2129.500011444092,
        "y": 388.00005531311035,
        "wires": []
    },
    {
        "id": "6e2aa87058c9ca31",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "name": "link out 43",
        "mode": "link",
        "links": [
            "09089e06e0208be6"
        ],
        "x": 2129.500011444092,
        "y": 351.00005531311035,
        "wires": []
    },
    {
        "id": "c49f0fc343b113fc",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "g": "487c8f7449f90598",
        "name": "NOT FOUND",
        "mode": "link",
        "links": [
            "cc0d78a673304144"
        ],
        "x": 1168,
        "y": 1230.4265775680542,
        "wires": []
    },
    {
        "id": "54b96e96d686e24a",
        "type": "link out",
        "z": "40ea5f2aea6592ae",
        "g": "2ba8206c046d35e7",
        "name": "link out 44",
        "mode": "link",
        "links": [
            "cc0d78a673304144"
        ],
        "x": 1164,
        "y": 618.444580078125,
        "wires": []
    },
    {
        "id": "82fcf7aa4a35258c",
        "type": "http request",
        "z": "bc45159fffe25729",
        "g": "72a7341ed740203a",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.fastmail.com/.well-known/jmap",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 539.0001907348633,
        "y": 236.36800575256348,
        "wires": [
            [
                "3f184f24108a4adf"
            ]
        ]
    },
    {
        "id": "48e950121b3eb4bd",
        "type": "function",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "send email",
        "func": "\nvar createUUID = function() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n};\n\nvar to_email = msg.email.to_email;\nvar cc_email = msg.email.cc_email;\nvar from_email = env.get(\"SNDML_FROM_EMAIL\");\nvar bcc_email = env.get(\"SNDML_BCC_EMAIL\");\n\nif ( !from_email ) {\n    throw \"Missing from email when sending email\";\n}\n\nvar draft_id = \"draft_\" + createUUID().substring(0,8);\n\nvar draft = {\n    \"from\": [{ \"email\": from_email }],\n    \"to\": [{ \"email\": to_email }],\n    \"subject\": msg.email.subject,\n    \"keywords\": { \"$draft\": true },\n    \"mailboxIds\": {  },\n    \"bodyValues\": {\n        \"body\": { \"value\": msg.email.text, \"charset\": \"utf-8\" },\n        \"bodyHTML\": { \"value\": msg.email.html, \"charset\": \"utf-8\" }\n    },\n    \"textBody\": [{ \"partId\": \"body\", \"type\": \"text/plain\" }],\n    \"htmlBody\": [{ \"partId\": \"bodyHTML\", \"type\": \"text/html\" }],\n};\n\nvar rcptTo = [\n    {\n        \"email\": to_email,\n        \"parameters\": null\n    }\n];\n\nif ( bcc_email ) {\n    draft[\"bcc\"] = [{ \"email\": bcc_email }];\n    rcptTo.push({\n        \"email\": bcc_email,\n            \"parameters\": \"bcc\"\n\n    });\n}\n\nif ( cc_email ) {\n    draft[\"cc\"] = [{ \"email\": cc_email }];\n    rcptTo.push({\n        \"email\": cc_email,\n        \"parameters\": \"cc\"\n\n    });\n}\n\ndraft[\"mailboxIds\"][global.get(\"fastmail_draft_mailbox_id\")] = true;\n\nvar drafty = {};\ndrafty[draft_id] = draft;\n\nvar cmds = {\n    \"using\": [\n        \"urn:ietf:params:jmap:core\",\n        \"urn:ietf:params:jmap:mail\",\n        \"urn:ietf:params:jmap:submission\",\n    ],\n    \"methodCalls\": [\n        [\n            \"Email/set\",\n            {\n                \"accountId\": global.get(\"fastmail_account_id\"),\n                \"create\": drafty\n            },\n            \"a\"\n        ],\n        [\n            \"EmailSubmission/set\",\n            {\n                \"accountId\": global.get(\"fastmail_account_id\"),\n                \"onSuccessDestroyEmail\": [\"#sendIt\"],\n                \"create\": {\n                    \"sendIt\": {\n                        \"identityId\": global.get(\"fastmail_emails_to_ids\")[from_email],\n                        \"emailId\": \"#\" + draft_id,\n                        \"envelope\": {\n                            \"mailFrom\": {\n                                \"email\": from_email,\n                                \"parameters\": null\n                            },\n                            \"rcptTo\": rcptTo\n                        },\n                    }\n                },\n            },\n            \"b\",\n        ],\n    ],\n}\n\nreturn {\n    payload: cmds\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 953.9999389648438,
        "wires": [
            [
                "dbe49e4b98b2bb35"
            ]
        ]
    },
    {
        "id": "3f184f24108a4adf",
        "type": "function",
        "z": "bc45159fffe25729",
        "g": "72a7341ed740203a",
        "name": "get account_id",
        "func": "global.set(\"fastmail_account_id\", Object.keys(msg.payload.accounts)[0])\n\n\nmsg.payload = {\n        \"using\": [\"urn:ietf:params:jmap:core\",\n            \"urn:ietf:params:jmap:mail\"],\n        \"methodCalls\": [\n            [\n                \"Mailbox/query\",\n                {\n                    \"accountId\": global.get(\"fastmail_account_id\"),\n                    \"filter\": { \"name\": \"Drafts\" }\n                },\n                \"a\",\n            ]\n        ],\n    };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 526.0002212524414,
        "y": 311.3680305480957,
        "wires": [
            [
                "4001998a87a4a8c6"
            ]
        ]
    },
    {
        "id": "4001998a87a4a8c6",
        "type": "http request",
        "z": "bc45159fffe25729",
        "g": "72a7341ed740203a",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.fastmail.com/jmap/api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 730.000244140625,
        "y": 310.3680114746094,
        "wires": [
            [
                "72bcfcf692fdc3fb"
            ]
        ]
    },
    {
        "id": "72bcfcf692fdc3fb",
        "type": "function",
        "z": "bc45159fffe25729",
        "g": "72a7341ed740203a",
        "name": "get draft mailbox id",
        "func": "global.set(\"fastmail_draft_mailbox_id\", msg.payload[\"methodResponses\"][0][1][\"ids\"][0]);\n\nvar cmds = {\n    \"using\": [\n        \"urn:ietf:params:jmap:core\",\n        \"urn:ietf:params:jmap:mail\",\n        \"urn:ietf:params:jmap:submission\",\n    ],\n    \"methodCalls\": [\n        [\n            \"Identity/get\",\n            {\n                \"accountId\": global.get(\"fastmail_account_id\"),\n            },\n            \"pluckaduck\"\n        ]\n    ]\n};\n\nmsg.payload = cmds;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 743.0002212524414,
        "y": 381.3680000305176,
        "wires": [
            [
                "70dfedaf202734d4"
            ]
        ]
    },
    {
        "id": "70dfedaf202734d4",
        "type": "http request",
        "z": "bc45159fffe25729",
        "g": "72a7341ed740203a",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.fastmail.com/jmap/api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 970.0002212524414,
        "y": 381.3680305480957,
        "wires": [
            [
                "83550cc85136576e"
            ]
        ]
    },
    {
        "id": "83550cc85136576e",
        "type": "function",
        "z": "bc45159fffe25729",
        "g": "72a7341ed740203a",
        "name": "store fastmail_emails_to_ids",
        "func": "var emailToId = {};\nvar lst = msg.payload[\"methodResponses\"][0][1]['list'];\n\nfor ( var idx = 0 ; idx < lst.length ; idx++ ) {\n    var dt = lst[idx];\n    emailToId[dt.email] = dt.id;\n}\nglobal.set(\"fastmail_emails_to_ids\", emailToId);\n\nmsg.payload = \"initialized fastmail\";\n\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1009.0003433227539,
        "y": 453.3680610656738,
        "wires": [
            [
                "b3267cfa214160b5"
            ]
        ]
    },
    {
        "id": "dbe49e4b98b2bb35",
        "type": "http request",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.fastmail.com/jmap/api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1080.0000610351562,
        "y": 997,
        "wires": [
            []
        ]
    },
    {
        "id": "067d54bff27de4bf",
        "type": "function",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "REPLACE TO EMAIL",
        "func": "msg.email.to_email = \"testing@upo.sh\";\nmsg.email.cc_email = \"testing@bidnbuy.club\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760.0000877380371,
        "y": 740.0000896453857,
        "wires": [
            [
                "48e950121b3eb4bd"
            ]
        ]
    },
    {
        "id": "dcd3c6b256468cfc",
        "type": "link in",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "sendemail",
        "links": [
            "320628d38d4140a5",
            "ed8df2e00cda6978",
            "27ffc2af8e3a9423",
            "77b4f65dadfc66f0",
            "a79613d98eda0689",
            "d0750b6fb3d03215",
            "40429d0998b73836",
            "03872ef342ab80c0"
        ],
        "x": 113.00006103515625,
        "y": 1062.0001220703125,
        "wires": [
            [
                "573d13673a440460"
            ]
        ]
    },
    {
        "id": "ced6c64dd360309b",
        "type": "comment",
        "z": "bc45159fffe25729",
        "g": "72a7341ed740203a",
        "name": "Initialise Fastmail",
        "info": "",
        "x": 182.43768310546875,
        "y": 82.99999237060547,
        "wires": []
    },
    {
        "id": "9a527b8f0dce6d08",
        "type": "link in",
        "z": "bc45159fffe25729",
        "g": "72a7341ed740203a",
        "name": "[init] Fastmail",
        "links": [
            "f447d34421b8a80f"
        ],
        "x": 140.663330078125,
        "y": 180.36453247070312,
        "wires": [
            [
                "319dfb9d1a50c45e"
            ]
        ]
    },
    {
        "id": "e98e5a1856ca8f64",
        "type": "comment",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "Fastmail Email Sender",
        "info": "Need to pass:\n\n```\nmsg.email = {\n    to_email: \"...\",\n    html: \"...\",\n    text: \"...\",\n    subject: \"...\"\n}\n```\n\n",
        "x": 243.6701774597168,
        "y": 583.6319103240967,
        "wires": []
    },
    {
        "id": "682dcf75ec1a62eb",
        "type": "inject",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "test email send",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 241.65986251831055,
        "y": 798.9514904022217,
        "wires": [
            [
                "4b570cba143531a3"
            ]
        ]
    },
    {
        "id": "482bb747982874ee",
        "type": "postgresql",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "is either CC or TO emails in dont send me emails table",
        "query": "SELECT * \nFROM dont_send_me_emails\nwhere email = lower('{{ msg.email.to_email }}')\nor email = lower('{{ msg.email.cc_email }}')\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 669.5,
        "y": 903.999755859375,
        "wires": [
            [
                "40a94383e56f3119"
            ]
        ]
    },
    {
        "id": "40a94383e56f3119",
        "type": "switch",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 960.999755859375,
        "wires": [
            [
                "48e950121b3eb4bd"
            ],
            [
                "532e0608b417f23f"
            ]
        ]
    },
    {
        "id": "532e0608b417f23f",
        "type": "subflow:454f61a0a8b759f9",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "",
        "x": 919.5,
        "y": 1009.999755859375,
        "wires": []
    },
    {
        "id": "2e0d4f109ee28da2",
        "type": "change",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "query",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 329.5,
        "y": 904.999755859375,
        "wires": [
            [
                "482bb747982874ee"
            ]
        ]
    },
    {
        "id": "4b570cba143531a3",
        "type": "function",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "test email content",
        "func": "msg.email = { \n    \"to_email\": \"me@upo.sh\", \n    \"subject\": \"subhect test\", \n    \"text\": \"emoty email for test\", \n    \"html\": \"emooasd enauk for test\" \n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 512.4479179382324,
        "y": 797.8471927642822,
        "wires": [
            [
                "067d54bff27de4bf"
            ]
        ]
    },
    {
        "id": "e85c81747978ba2d",
        "type": "function",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "initialise email content",
        "func": "var txt = \"Intialised Email <BR><CODE>\" + JSON.stringify(msg) + \"<CODE>\" ;\n\nmsg.email = { \n    \"to_email\": \"me@upo.sh\", \n    \"subject\": \"[BNBC] [ADMIN] init email\", \n    \"text\": txt, \n    \"html\": txt\n    };\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 523.8958168029785,
        "y": 666.8887434005737,
        "wires": [
            [
                "067d54bff27de4bf"
            ]
        ]
    },
    {
        "id": "01de625c24a4f737",
        "type": "postgresql",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "count users",
        "query": "select count(*) as cnt\nfrom users\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 287.89587020874023,
        "y": 686.8887586593628,
        "wires": [
            [
                "e85c81747978ba2d"
            ]
        ]
    },
    {
        "id": "a601defbf5afa765",
        "type": "catch",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "",
        "scope": [
            "01de625c24a4f737"
        ],
        "uncaught": false,
        "x": 334.440975189209,
        "y": 663.5311613082886,
        "wires": [
            [
                "e85c81747978ba2d"
            ]
        ]
    },
    {
        "id": "d95a5b760301b68a",
        "type": "link in",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "[email] init email",
        "links": [
            "b0fb096cc8025200"
        ],
        "x": 149.44799613952637,
        "y": 686.9443712234497,
        "wires": [
            [
                "01de625c24a4f737"
            ]
        ]
    },
    {
        "id": "b3267cfa214160b5",
        "type": "link out",
        "z": "bc45159fffe25729",
        "g": "72a7341ed740203a",
        "name": "link out 45",
        "mode": "return",
        "links": [],
        "x": 1256.5,
        "y": 177.36795043945312,
        "wires": []
    },
    {
        "id": "c2828789472cd43a",
        "type": "catch",
        "z": "bc45159fffe25729",
        "g": "72a7341ed740203a",
        "name": "",
        "scope": [
            "82fcf7aa4a35258c",
            "3f184f24108a4adf",
            "4001998a87a4a8c6",
            "72bcfcf692fdc3fb",
            "70dfedaf202734d4",
            "83550cc85136576e"
        ],
        "uncaught": false,
        "x": 779,
        "y": 149.3679428100586,
        "wires": [
            [
                "ace443d83f9872cc",
                "b3267cfa214160b5"
            ]
        ]
    },
    {
        "id": "ace443d83f9872cc",
        "type": "debug",
        "z": "bc45159fffe25729",
        "g": "72a7341ed740203a",
        "name": "EMAIL NOT INITIALISED",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 948,
        "y": 102.3679428100586,
        "wires": []
    },
    {
        "id": "3568559f05e72b94",
        "type": "catch",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "",
        "scope": [
            "48e950121b3eb4bd"
        ],
        "uncaught": false,
        "x": 1071.0000038146973,
        "y": 915.9999523162842,
        "wires": [
            [
                "f96c3e497dc4995f"
            ]
        ]
    },
    {
        "id": "f96c3e497dc4995f",
        "type": "debug",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "EMAIL NOT SENT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1309,
        "y": 1057.000244140625,
        "wires": []
    },
    {
        "id": "319dfb9d1a50c45e",
        "type": "switch",
        "z": "bc45159fffe25729",
        "g": "72a7341ed740203a",
        "name": "FASTMAIL_API defined?",
        "property": "FASTMAIL_API",
        "propertyType": "env",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 312.5,
        "y": 180.36795043945312,
        "wires": [
            [
                "ace443d83f9872cc",
                "b3267cfa214160b5"
            ],
            [
                "ace443d83f9872cc",
                "b3267cfa214160b5"
            ],
            [
                "82fcf7aa4a35258c"
            ]
        ]
    },
    {
        "id": "573d13673a440460",
        "type": "switch",
        "z": "bc45159fffe25729",
        "g": "1c270262103d7377",
        "name": "FASTMAIL_API defined?",
        "property": "FASTMAIL_API",
        "propertyType": "env",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 302,
        "y": 1062,
        "wires": [
            [
                "f96c3e497dc4995f"
            ],
            [
                "f96c3e497dc4995f"
            ],
            [
                "2e0d4f109ee28da2"
            ]
        ]
    },
    {
        "id": "96bc62610c19d5c5",
        "type": "websocket out",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "",
        "server": "b3804011d211bca3",
        "client": "",
        "x": 1262.0001831054688,
        "y": 151.00003051757812,
        "wires": []
    },
    {
        "id": "79659e62872be448",
        "type": "websocket in",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "",
        "server": "b3804011d211bca3",
        "client": "",
        "x": 127.99993896484375,
        "y": 157.00009155273438,
        "wires": [
            [
                "907a47cec7119c6f"
            ]
        ]
    },
    {
        "id": "907a47cec7119c6f",
        "type": "json",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 211.99993896484375,
        "y": 206.00009155273438,
        "wires": [
            [
                "b75e1b093e3b03c4"
            ]
        ]
    },
    {
        "id": "e7a5e15f7c24c35b",
        "type": "function",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "send new_auction message",
        "func": "var proposal = msg.payload[0];\n\nreturn { payload: {\n    data: {\n        text: proposal.text,\n        uuid: proposal.uuid,\n        seller_uuid: proposal.seller_uuid\n    },\n    type: \"new_auction\"    \n}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 972,
        "y": 100.00006103515625,
        "wires": [
            [
                "96bc62610c19d5c5"
            ]
        ]
    },
    {
        "id": "b75e1b093e3b03c4",
        "type": "switch",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "which action?",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_creator_for_proposal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_highest_bid",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 309.99993896484375,
        "y": 158.00006103515625,
        "wires": [
            [
                "b112d19d7b81f894"
            ],
            [
                "93ca8c3e8be2ad7c"
            ]
        ]
    },
    {
        "id": "b112d19d7b81f894",
        "type": "postgresql",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "get_creator_for_auction",
        "query": "select \n   u.firstname as firstname, \n   upper(substring(u.surname,1,1)) as surname, \n   a.uuid as proposal_uuid\nfrom \n  users u, \n  auctions a\nwhere \n  a.uuid = '{{ msg.payload.proposal_uuid }}'\n  and u.id = a.id_users\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 641.0000610351562,
        "y": 153.00006103515625,
        "wires": [
            [
                "55af9b5c284afea3"
            ]
        ]
    },
    {
        "id": "55af9b5c284afea3",
        "type": "function",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "send auction creator",
        "func": "\nreturn {\n    payload: {\n        type: \"auction_creator\",\n        data: {\n            name: msg.payload[0].firstname + \" \" + msg.payload[0].surname[0].toUpperCase() + \".\",\n            uuid: msg.payload[0].proposal_uuid\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 992,
        "y": 151.00009155273438,
        "wires": [
            [
                "96bc62610c19d5c5"
            ]
        ]
    },
    {
        "id": "355f6a70f79f5e69",
        "type": "postgresql",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "get_highest_bid_for_auction by auction id",
        "query": "select \n   b.amount                        as amount, \n   b.was_declined                  as declined,\n   a.uuid                          as proposal_uuid , \n   u.firstname                     as bidder_firstname, \n   upper(substring(u.surname,1,1)) as bidder_surname,\n   u.uuid                          as bidder_uuid,\n   b.updated_at                    as updated_at,\n   b.uuid                          as bid_uuid\nfrom \n  bids      b, \n  users     u, \n  auctions  a\nwhere \n  id_auctions = {{ msg.payload.auction_id }}\n  and b.id_users = u.id\n  and a.id       = b.id_auctions\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 591.0000610351562,
        "y": 268.0000915527344,
        "wires": [
            [
                "517eb212d3604acf"
            ]
        ]
    },
    {
        "id": "517eb212d3604acf",
        "type": "function",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "send_highest_bid_for_auction",
        "func": "\nreturn {\n    payload: {\n        type: \"highest_bid\",\n        data: msg.payload[0]\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 962,
        "y": 214.0001220703125,
        "wires": [
            [
                "96bc62610c19d5c5"
            ]
        ]
    },
    {
        "id": "93ca8c3e8be2ad7c",
        "type": "postgresql",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "get_highest_bid_for_auction_by_uuid",
        "query": "select \n   b.amount                        as amount, \n   b.was_declined                  as declined,\n   a.uuid                          as proposal_uuid , \n   u.firstname                     as bidder_firstname, \n   upper(substring(u.surname,1,1)) as bidder_surname,\n   u.uuid                          as bidder_uuid,\n   b.updated_at                    as updated_at,\n   b.uuid                          as bid_uuid\nfrom \n  bids      b, \n  users     u, \n  auctions  a\nwhere \n  id_auctions    = (select id from auctions where uuid = '{{ msg.payload.proposal_uuid }}')\n  and b.id_users = u.id\n  and a.id       = b.id_auctions\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 601.0000610351562,
        "y": 216.0001220703125,
        "wires": [
            [
                "517eb212d3604acf"
            ]
        ]
    },
    {
        "id": "0004973f4c036fc5",
        "type": "postgresql",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "retrieve auction",
        "query": "select \n  d.*, \n  u.uuid as seller_uuid \nfrom auctions d\nleft join users u on u.id = d.seller_id\nwhere d.uuid = '{{ msg.data.proposal_uuid }}'\n\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 698.0000610351562,
        "y": 100.00010681152344,
        "wires": [
            [
                "e7a5e15f7c24c35b"
            ]
        ]
    },
    {
        "id": "1e2388d383864efe",
        "type": "link in",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "link in 5",
        "links": [
            "f0b0c60746bee751",
            "f0774bef9d00f5f8",
            "72139a0b66411c7d"
        ],
        "x": 271.99993896484375,
        "y": 99.66677856445312,
        "wires": [
            [
                "0004973f4c036fc5"
            ]
        ]
    },
    {
        "id": "e3bfdcb18e30095a",
        "type": "link in",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "[ws] postout",
        "links": [
            "8aa234e82095cc91",
            "9f835318ae1e84d9"
        ],
        "x": 1077,
        "y": 272.78106689453125,
        "wires": [
            [
                "96bc62610c19d5c5"
            ]
        ]
    },
    {
        "id": "27fafa85c903c954",
        "type": "link in",
        "z": "68148861ba0868a8",
        "g": "b65a624658cc9a3d",
        "name": "[ws] get highest bid",
        "links": [
            "1b472985ac13d3c3"
        ],
        "x": 244.99993896484375,
        "y": 267.99981689453125,
        "wires": [
            [
                "355f6a70f79f5e69"
            ]
        ]
    },
    {
        "id": "16abd41a2971f496",
        "type": "postgresql",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "QueryEngine",
        "query": "",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600.8958587646484,
        "y": 273.8888912200928,
        "wires": [
            [
                "42aced8f862ec770"
            ]
        ]
    },
    {
        "id": "641d780dcc883352",
        "type": "template",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "All users",
        "field": "query",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "plain",
        "template": "select \n  * \nfrom \n  users\nwhere \n  is_deleted = false \n  and is_banned = false\n;\n",
        "output": "str",
        "x": 363.39591217041016,
        "y": 273.88882064819336,
        "wires": [
            [
                "16abd41a2971f496"
            ]
        ]
    },
    {
        "id": "86de2b3f6ee785b6",
        "type": "template",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "All auctions",
        "field": "query",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "select \n  d.is_accepted,\n  d.accepted_at,\n  d.uuid,\n  d.text,\n  d.created_at,\n  seller.uuid as seller_uuid\nfrom auctions d\n  left join users seller on seller.id = d.seller_id\nwhere d.is_banned = false\n  and d.is_approved = true\n{{#payload.not_accepted}}\n  and d.is_accepted = false\n{{/payload.not_accepted}}\n;",
        "output": "str",
        "x": 373.39591217041016,
        "y": 314.8887996673584,
        "wires": [
            [
                "16abd41a2971f496"
            ]
        ]
    },
    {
        "id": "b2dc5be0e463e3b2",
        "type": "postgresql",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "get auction details",
        "query": "SELECT \no.text,\no.uuid,\no.is_accepted,\no.created_at                            as proposal_created_at,\nb.updated_at                            as last_bid_at,\nb.amount,\nb.was_declined                          as declined,\nb.uuid                                  as bid_uuid,\nseller.firstname                        as seller_firstname,\nupper(substring(seller.surname,1,1))    as seller_surname,\nseller.uuid                             as seller_uuid,\nseller.was_created_by_auction           as seller_created_by_proposal,\nseller.email                            as seller_email,\ncreator.firstname                       as creator_firstname,\nupper(substring(creator.surname,1,1))   as creator_surname,\ncreator.uuid                            as creator_uuid,\nbidder.firstname                        as bidder_firstname,\nupper(substring(bidder.surname,1,1))    as bidder_surname,\nbidder.uuid                             as bidder_uuid\nFROM auctions as o\n  join users creator on o.id_users = creator.id and not creator.is_banned\n  left join users seller on o.seller_id = seller.id\n  join bids b on b.id_auctions = o.id\n  join users bidder on bidder.id = b.id_users\nwhere \n  o.uuid = '{{ msg.req.params.uuid }}'\n  and o.is_approved\n  and not o.is_banned\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 393.39591217041016,
        "y": 177.88921070098877,
        "wires": [
            [
                "1ad7baa8c8602cdf"
            ]
        ]
    },
    {
        "id": "cdfe0a2804636784",
        "type": "link in",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "[get] /api/proposal/:uuid",
        "links": [
            "650565a2d8f644a7"
        ],
        "x": 194.3958740234375,
        "y": 176.889084815979,
        "wires": [
            [
                "b2dc5be0e463e3b2"
            ]
        ]
    },
    {
        "id": "33d7ea129f06d293",
        "type": "link in",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "[get] /api/proposals/all",
        "links": [
            "fba142a7b0634259"
        ],
        "x": 194.3958740234375,
        "y": 314.8888301849365,
        "wires": [
            [
                "86de2b3f6ee785b6"
            ]
        ]
    },
    {
        "id": "48669bbc4153ba14",
        "type": "link in",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "[get] /api/users/all",
        "links": [
            "7ade38efb2383248"
        ],
        "x": 194.3958740234375,
        "y": 272.8888301849365,
        "wires": [
            [
                "641d780dcc883352"
            ]
        ]
    },
    {
        "id": "5454979b74efae5c",
        "type": "link in",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "[get] /api/bid/:uuid",
        "links": [
            "8b28734e016e428f"
        ],
        "x": 195.3958740234375,
        "y": 226.43804931640625,
        "wires": [
            [
                "5d4c6a8b5e91228a"
            ]
        ]
    },
    {
        "id": "5d4c6a8b5e91228a",
        "type": "postgresql",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "get bid details (limited to last 10)",
        "query": "select \n  bids.uuid                                     as bid_uuid,\n  bids.amount                                   as current_amount,\n  bids.was_declined                             as declined,\n  pd.was_declined                               as previously_declined,\n  pd.amount                                     as previous_amount,\n  highest_bidder.firstname                      as hb_firstname,\n  upper(substring(highest_bidder.surname,1,1))  as hb_surname,\n  highest_bidder.uuid                           as hb_uuid,\n  previous_bidder.uuid                          as pb_uuid,\n  previous_bidder.firstname                     as pb_firstname,\n  upper(substring(previous_bidder.surname,1,1)) as pb_surname,\n  bids.created_at                               as bid_created_at,\n  bids.updated_at                               as last_bid_at,\n  pd.created_at                                 as pb_created_at\nfrom bids\n  left join previous_bids pd on pd.id_auctions = bids.id_auctions\n  left join users highest_bidder on highest_bidder.id = bids.id_users\n  left join users previous_bidder on previous_bidder.id = pd.id_users\nwhere bids.uuid = '{{ msg.req.params.uuid }}'\norder by pd.created_at desc\nlimit 10\n;\n",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 434.3959045410156,
        "y": 226.3337860107422,
        "wires": [
            [
                "42aced8f862ec770"
            ]
        ]
    },
    {
        "id": "42aced8f862ec770",
        "type": "function",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "add status",
        "func": "\nmsg.payload = {\n    status: \"ok\",\n    data: msg.payload,\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 816.7916717529297,
        "y": 226.33344078063965,
        "wires": [
            [
                "64c4ff52e2e32083"
            ]
        ]
    },
    {
        "id": "64c4ff52e2e32083",
        "type": "http response",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1187.8956298828125,
        "y": 226.88864135742188,
        "wires": []
    },
    {
        "id": "1ad7baa8c8602cdf",
        "type": "switch",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 613.8956756591797,
        "y": 177.88864707946777,
        "wires": [
            [
                "16d574c6cd60c5b3"
            ],
            [
                "42aced8f862ec770"
            ]
        ]
    },
    {
        "id": "16d574c6cd60c5b3",
        "type": "function",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "banned or not approved or non-existent",
        "func": "\nmsg.payload = {\n    status: \"failed\",\n    msg: \"Proposal has not yet been approved.\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 911.3956756591797,
        "y": 171.88864707946777,
        "wires": [
            [
                "64c4ff52e2e32083"
            ]
        ]
    },
    {
        "id": "3a5c4fbec689569a",
        "type": "catch",
        "z": "c9628ef74314c30f",
        "g": "1bbd8954ec9b6e2b",
        "name": "",
        "scope": [
            "16abd41a2971f496",
            "b2dc5be0e463e3b2",
            "5d4c6a8b5e91228a",
            "1a40662de1dc7735",
            "174f4f234e5de4a0",
            "ccfe73f7ed559dd9",
            "c4497493b65e3f40",
            "b97f417981e54cc6",
            "1ec89738862ad0ff"
        ],
        "uncaught": false,
        "x": 1595.8958740234375,
        "y": 142.88888549804688,
        "wires": [
            [
                "bb39f3e0a8759fc9"
            ]
        ]
    },
    {
        "id": "06ebd3a5555202e6",
        "type": "comment",
        "z": "c9628ef74314c30f",
        "g": "1bbd8954ec9b6e2b",
        "name": "Catch all queries that are in an req-resp flow/loop",
        "info": "",
        "x": 1619.3953857421875,
        "y": 81.88803100585938,
        "wires": []
    },
    {
        "id": "bb39f3e0a8759fc9",
        "type": "subflow:d03c4820970ac189",
        "z": "c9628ef74314c30f",
        "g": "1bbd8954ec9b6e2b",
        "name": "",
        "x": 1603.3953857421875,
        "y": 203.88803100585938,
        "wires": []
    },
    {
        "id": "66e4187b8646b82e",
        "type": "link in",
        "z": "c9628ef74314c30f",
        "g": "8094cd6c49361de0",
        "name": "[get] my proposals",
        "links": [
            "7763efbb9695e7e8"
        ],
        "x": 193.5,
        "y": 657,
        "wires": [
            [
                "e9474cffdf393f84"
            ]
        ]
    },
    {
        "id": "1a40662de1dc7735",
        "type": "postgresql",
        "z": "c9628ef74314c30f",
        "g": "8094cd6c49361de0",
        "name": "get all offers. user is creator and seller",
        "query": "{{{ msg.query_top_half  }}}\nand creator.uuid = '{{ msg.req.params.uuid }}'\nand seller.uuid = '{{ msg.req.params.uuid }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 959.1666870117188,
        "y": 614,
        "wires": [
            [
                "44a2f310d47bb9a8"
            ]
        ]
    },
    {
        "id": "44a2f310d47bb9a8",
        "type": "function",
        "z": "c9628ef74314c30f",
        "g": "8094cd6c49361de0",
        "name": "add status",
        "func": "\nmsg.payload = {\n    status: \"ok\",\n    data: msg.payload,\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1517,
        "y": 611,
        "wires": [
            [
                "f411daa453a1dc69"
            ]
        ]
    },
    {
        "id": "f411daa453a1dc69",
        "type": "http response",
        "z": "c9628ef74314c30f",
        "g": "8094cd6c49361de0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1706,
        "y": 890,
        "wires": []
    },
    {
        "id": "de0583bc21f4f09f",
        "type": "switch",
        "z": "c9628ef74314c30f",
        "g": "8094cd6c49361de0",
        "name": "which kind?",
        "property": "req.query.kind",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "eq",
                "v": "offers",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "highest-bidder",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "bidding",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "desires",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "proposals",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 534.5,
        "y": 657,
        "wires": [
            [
                "1a40662de1dc7735"
            ],
            [
                "1a40662de1dc7735"
            ],
            [
                "174f4f234e5de4a0"
            ],
            [
                "ccfe73f7ed559dd9"
            ],
            [
                "1ec89738862ad0ff"
            ],
            [
                "c4497493b65e3f40"
            ],
            [
                "33cd46374884c461"
            ]
        ]
    },
    {
        "id": "174f4f234e5de4a0",
        "type": "postgresql",
        "z": "c9628ef74314c30f",
        "g": "8094cd6c49361de0",
        "name": "get all auctions where user is highest bidder",
        "query": "{{{ msg.query_top_half }}}\nand bidder.uuid = '{{ msg.req.params.uuid }}'\nand creator.uuid != '{{ msg.req.params.uuid }}'\nand seller.uuid != '{{ msg.req.params.uuid }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 979.1666870117188,
        "y": 657.25,
        "wires": [
            [
                "44a2f310d47bb9a8"
            ]
        ]
    },
    {
        "id": "33cd46374884c461",
        "type": "function",
        "z": "c9628ef74314c30f",
        "g": "8094cd6c49361de0",
        "name": "ok but empty",
        "func": "\nmsg.payload = {\n    status: \"ok\",\n    data: [],\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 735,
        "y": 888,
        "wires": [
            [
                "f411daa453a1dc69"
            ]
        ]
    },
    {
        "id": "ccfe73f7ed559dd9",
        "type": "postgresql",
        "z": "c9628ef74314c30f",
        "g": "8094cd6c49361de0",
        "name": "get all auctions where user has bidded on",
        "query": "{{{ msg.query_top_half }}}\nand o.id in (select id_auctions from previous_bids where id_users = (select id from users where uuid = '{{ msg.req.params.uuid }}'))\nand bidder.uuid != '{{ msg.req.params.uuid }}'\nand seller.uuid != '{{ msg.req.params.uuid }}'\nand creator.uuid != '{{ msg.req.params.uuid }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 969.1666870117188,
        "y": 700.5,
        "wires": [
            [
                "44a2f310d47bb9a8"
            ]
        ]
    },
    {
        "id": "c4497493b65e3f40",
        "type": "postgresql",
        "z": "c9628ef74314c30f",
        "g": "8094cd6c49361de0",
        "name": "get all proposals, i.e. user is seller not creator",
        "query": "{{{ msg.query_top_half }}}\nand creator.uuid != '{{ msg.req.params.uuid }}'\nand seller.uuid = '{{ msg.req.params.uuid }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 979.1666870117188,
        "y": 787,
        "wires": [
            [
                "44a2f310d47bb9a8"
            ]
        ]
    },
    {
        "id": "b97f417981e54cc6",
        "type": "postgresql",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "get user by uuid",
        "query": "SELECT \n  email,\n  firstname,\n  surname,\n  uuid\nFROM \n  users\nwhere \n  uuid = '{{ msg.req.params.uuid }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 404,
        "y": 448.5,
        "wires": [
            [
                "27acebb953ca655d"
            ]
        ]
    },
    {
        "id": "09089e06e0208be6",
        "type": "link in",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "[get] user by uuid",
        "links": [
            "6e2aa87058c9ca31"
        ],
        "x": 189.5,
        "y": 448.5,
        "wires": [
            [
                "b97f417981e54cc6"
            ]
        ]
    },
    {
        "id": "27acebb953ca655d",
        "type": "function",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "add status",
        "func": "\nmsg.payload = {\n    status: \"ok\",\n    data: msg.payload[0],\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 689,
        "y": 448.5,
        "wires": [
            [
                "429b717667dbab9d"
            ]
        ]
    },
    {
        "id": "429b717667dbab9d",
        "type": "http response",
        "z": "c9628ef74314c30f",
        "g": "3505240ca76844cd",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 947.5,
        "y": 448.5,
        "wires": []
    },
    {
        "id": "1ec89738862ad0ff",
        "type": "postgresql",
        "z": "c9628ef74314c30f",
        "g": "8094cd6c49361de0",
        "name": "get all desires, i.e. user is creator not seller",
        "query": "{{{ msg.query_top_half }}}\nand creator.uuid = '{{ msg.req.params.uuid }}'\nand ( seller.uuid != '{{ msg.req.params.uuid }}' or seller is null)\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 979.1666870117188,
        "y": 743.75,
        "wires": [
            [
                "44a2f310d47bb9a8"
            ]
        ]
    },
    {
        "id": "e9474cffdf393f84",
        "type": "template",
        "z": "c9628ef74314c30f",
        "g": "8094cd6c49361de0",
        "name": "Top Half of query",
        "field": "query_top_half",
        "fieldType": "msg",
        "format": "text",
        "syntax": "mustache",
        "template": "SELECT\no.text,\no.uuid,\no.is_accepted,\no.created_at                            as proposal_created_at,\nb.updated_at                            as last_bid_at,\nb.amount,\nb.was_declined                          as declined,\nb.uuid                                  as bid_uuid,\nseller.firstname                        as seller_firstname,\nupper(substring(seller.surname,1,1))    as seller_surname,\nseller.uuid                             as seller_uuid,\nseller.was_created_by_auction           as seller_created_by_proposal,\nseller.email                            as seller_email,\ncreator.firstname                       as creator_firstname,\nupper(substring(creator.surname,1,1))   as creator_surname,\ncreator.uuid                            as creator_uuid,\nbidder.firstname                        as bidder_firstname,\nupper(substring(bidder.surname,1,1))    as bidder_surname,\nbidder.uuid                             as bidder_uuid\nFROM\n  auctions as o\n  join users creator     on o.id_users    = creator.id and not creator.is_banned\n  left join users seller on o.seller_id   = seller.id\n  join bids b            on b.id_auctions = o.id\n  join users bidder      on bidder.id     = b.id_users\nwhere\n  o.is_approved\n  and not o.is_banned\n",
        "output": "str",
        "x": 335,
        "y": 657,
        "wires": [
            [
                "de0583bc21f4f09f"
            ]
        ]
    },
    {
        "id": "2454f11161812905",
        "type": "http response",
        "z": "e79b7563e1176dfd",
        "g": "0355d8f8a1687a73",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1560.0006484985352,
        "y": 253.00053310394287,
        "wires": []
    },
    {
        "id": "ca338fb064bc3507",
        "type": "postgresql",
        "z": "e79b7563e1176dfd",
        "g": "0355d8f8a1687a73",
        "name": "create bid - potential seller can't bid on proposal",
        "query": "update bids \nset amount = {{ msg.payload.amount }},\n    id_users = (select id from users where uuid = '{{ msg.payload.user_uuid }}')\nwhere \n   id_auctions = (select id \n                 from auctions \n                 where uuid = '{{ msg.payload.proposal_uuid }}'\n                 and is_banned = false\n                 and is_accepted = false\n                 and ( seller_id is null \n                       or seller_id != (select id \n                                        from users where uuid = '{{ msg.payload.user_uuid }}'))\n                )\nreturning \n   id_auctions as proposal_id, \n   id_users   as user_id, \n   amount     as amount\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 886.0003509521484,
        "y": 260.0005702972412,
        "wires": [
            [
                "1866f7d5bf4b0977"
            ]
        ]
    },
    {
        "id": "1b3a5dc22396e54e",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "0355d8f8a1687a73",
        "name": "trigger websocket bid update",
        "func": "return {\n        payload: {\n            auction_id: msg.payload[0].proposal_id\n      }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1387.0000457763672,
        "y": 184.0006923675537,
        "wires": [
            [
                "1b472985ac13d3c3"
            ]
        ]
    },
    {
        "id": "cb2ad0e6e312eb6f",
        "type": "catch",
        "z": "e79b7563e1176dfd",
        "g": "71032b34a625c818",
        "name": "",
        "scope": [
            "ca338fb064bc3507",
            "aa53ec32657a6d98",
            "a9d68204b563f4d6",
            "e446e0ee0a6eebbf",
            "ca58a70e3f27740b",
            "fd9e4f65b0bd4785",
            "e6e6187e2bb42de3"
        ],
        "uncaught": false,
        "x": 2078.00048828125,
        "y": 131.0008544921875,
        "wires": [
            [
                "707e1daf8d8873f6"
            ]
        ]
    },
    {
        "id": "c25f2cefaa8c6128",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "send ok status",
        "func": "return {\n    payload:{\n        \"status\": \"ok\",\n        data: {\n            uuid: msg.payload[0].uuid,\n            iamseller: msg.origpayload.buyer_iamseller\n        }\n    },\n    res: msg.res\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2718.557231903076,
        "y": 1551.0008506774902,
        "wires": [
            [
                "7f4def9059086d5e"
            ]
        ]
    },
    {
        "id": "635efe3e813cb9cb",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "0355d8f8a1687a73",
        "name": "status ok",
        "func": "msg.payload = {\n    status: \"ok\",\n    data: {\n        proposal_uuid: msg.origpayload.proposal_uuid,\n        user_uuid: msg.origpayload.user_uuid,\n        amount: msg.origpayload.amount\n    }\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1332.0000381469727,
        "y": 254.00089931488037,
        "wires": [
            [
                "2454f11161812905"
            ]
        ]
    },
    {
        "id": "2acb43c5309ac0fd",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "0355d8f8a1687a73",
        "name": "check for parameters",
        "func": "var payload = msg.payload;\n\nmsg[\"status\"] = \"ok\";\n\nif ( payload.user_uuid && payload.proposal_uuid && payload.amount ) {\n    msg.status = \"db_check\";\n} else {\n    msg.status = \"missing_data\";\n    msg.payload = JSON.stringify({\n            status: \"error\",\n            msg: \"something missing\"\n        });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 466.0004119873047,
        "y": 152.00050926208496,
        "wires": [
            [
                "71299118ade1aa96"
            ]
        ]
    },
    {
        "id": "25e513171ea468df",
        "type": "link in",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "[post] /api/proposal/new",
        "links": [
            "823739615b1244a2"
        ],
        "x": 237.50030136108398,
        "y": 1574.0085411071777,
        "wires": [
            [
                "5f2ea7c8b71bd8c4"
            ]
        ]
    },
    {
        "id": "a1071b9d620c40d4",
        "type": "link in",
        "z": "e79b7563e1176dfd",
        "g": "0355d8f8a1687a73",
        "name": "[post] /api/bid/new",
        "links": [
            "bc211ee1f76e75a0"
        ],
        "x": 236.500244140625,
        "y": 152.2192440032959,
        "wires": [
            [
                "2acb43c5309ac0fd"
            ]
        ]
    },
    {
        "id": "5f2ea7c8b71bd8c4",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "check parameters",
        "func": "var payload = msg.payload;\n\nif ( payload.description && payload.buyer_uuid && payload.amount && (\"buyer_iamseller\" in payload) ) {\n    msg.status = \"db_check\";\n} else {\n    msg.status = \"missing_data\";\n    msg.payload = JSON.stringify({\n            status: \"error\",\n            msg: \"something missing\"\n        });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 476.4519157409668,
        "y": 1572.8901329040527,
        "wires": [
            [
                "793e52c874112957"
            ]
        ]
    },
    {
        "id": "aa53ec32657a6d98",
        "type": "postgresql",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "Known Seller?",
        "query": "select *\nfrom users\nwhere email = lower( '{{ msg.payload.seller_email }}' )\n-- and is_verified = true\n-- what about deleted or banned users? there is a rabbit hole\n-- here since these users would end up in the unknown emails\n-- table ... \n;\n",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1296.451732635498,
        "y": 1672.8903694152832,
        "wires": [
            [
                "416dae6b8bc2b6bc",
                "bae3f2f9179c77ae"
            ]
        ]
    },
    {
        "id": "416dae6b8bc2b6bc",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1462.451992034912,
        "y": 1672.8898878097534,
        "wires": [
            [
                "940aa6d426b32a11"
            ],
            [
                "15be66d6d6c64fe5"
            ]
        ]
    },
    {
        "id": "2696168e5d22f048",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "seller email available?",
        "property": "payload.seller_email",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 1112.9938125610352,
        "y": 1412.1050872802734,
        "wires": [
            [
                "3e5d267d6dad2c71"
            ],
            [
                "3e5d267d6dad2c71"
            ],
            [
                "3e5d267d6dad2c71"
            ],
            [
                "6f6530251eaf202a"
            ]
        ]
    },
    {
        "id": "b2973dd545e6883a",
        "type": "postgresql",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "store seller email",
        "query": "insert into unknown_sellers(email) \nvalues ( lower( '{{ msg.origpayload.seller_email }}'))\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1763.007625579834,
        "y": 1519.056414604187,
        "wires": [
            [
                "3e5d267d6dad2c71"
            ]
        ]
    },
    {
        "id": "76e4f45ee883daf2",
        "type": "catch",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "scope": [
            "b2973dd545e6883a"
        ],
        "uncaught": false,
        "x": 1643.0078964233398,
        "y": 1495.591962337494,
        "wires": [
            [
                "3e5d267d6dad2c71"
            ]
        ]
    },
    {
        "id": "8bbfbd51c8e73f1f",
        "type": "template",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "auction with seller",
        "field": "query",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO auctions(\n  text,\n  seller_id,\n  id_users\n) values (\n  '{{ origpayload.description }}',\n  {{#payload}}{{ id }}{{/payload}},\n  (select id from users where uuid = '{{ origpayload.buyer_uuid }}')\n) RETURNING id, uuid, id_users, text;",
        "output": "str",
        "x": 2006.9975891113281,
        "y": 1537.841152191162,
        "wires": [
            [
                "a9d68204b563f4d6"
            ]
        ]
    },
    {
        "id": "a9d68204b563f4d6",
        "type": "postgresql",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "store proposal",
        "query": "",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2049.997772216797,
        "y": 1421.1638660430908,
        "wires": [
            [
                "6a7d0c7bc9a38934"
            ]
        ]
    },
    {
        "id": "6a7d0c7bc9a38934",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 2230.4524002075195,
        "y": 1422.0003824234009,
        "wires": [
            [
                "6a0fd1f3384b341c"
            ],
            [
                "c25f2cefaa8c6128",
                "1c855c30e7624b87",
                "fb6b28611a90e621"
            ]
        ]
    },
    {
        "id": "6a0fd1f3384b341c",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "status error",
        "func": "\nreturn {\n    payload: JSON.stringify({\n        status: \"error\",\n        msg: \"auction not created\"\n    }),\n    res: msg.res\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2448.4527320861816,
        "y": 1363.7787055969238,
        "wires": [
            [
                "f6974aa6d8d57fba"
            ]
        ]
    },
    {
        "id": "3e5d267d6dad2c71",
        "type": "template",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "auction without seller",
        "field": "query",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO auctions(\n  text,\n  id_users\n) values (\n  '{{ origpayload.description }}',\n  (select id from users where uuid = '{{ origpayload.buyer_uuid }}')\n) RETURNING id, uuid, id_users, text;",
        "output": "str",
        "x": 1818.4523086547852,
        "y": 1420.7779941558838,
        "wires": [
            [
                "a9d68204b563f4d6"
            ]
        ]
    },
    {
        "id": "0d5776f282e79ff8",
        "type": "postgresql",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "store initial bid",
        "query": "INSERT INTO bids(\n  id_auctions,\n  amount,\n  id_users\n) values (\n  {{#msg.payload}}{{ id }}{{/msg.payload}},\n  {{ msg.origpayload.amount }},\n  {{#msg.payload}}{{ id_users }}{{/msg.payload}}\n);",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2966.3420028686523,
        "y": 1436.1112251281738,
        "wires": [
            []
        ]
    },
    {
        "id": "5dcc5de4b9a95767",
        "type": "catch",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "scope": [
            "0d5776f282e79ff8"
        ],
        "uncaught": false,
        "x": 3028.897216796875,
        "y": 1408.1116943359375,
        "wires": [
            [
                "60978791072617f4",
                "234c504065ac64b8"
            ]
        ]
    },
    {
        "id": "1c855c30e7624b87",
        "type": "change",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "query",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2734.8899879455566,
        "y": 1436.6463813781738,
        "wires": [
            [
                "0d5776f282e79ff8"
            ]
        ]
    },
    {
        "id": "f0b0c60746bee751",
        "type": "link out",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "1e2388d383864efe"
        ],
        "x": 3500.116069793701,
        "y": 1703.0847129821777,
        "wires": []
    },
    {
        "id": "15be66d6d6c64fe5",
        "type": "change",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "seller_email",
                "pt": "msg",
                "to": "origpayload.seller_email",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2003.1186561584473,
        "y": 1676.9904203414917,
        "wires": [
            [
                "8bbfbd51c8e73f1f"
            ]
        ]
    },
    {
        "id": "7a622d1fe40adef1",
        "type": "change",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "set email, delete query",
        "rules": [
            {
                "t": "set",
                "p": "email",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "delete",
                "p": "query",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3587.11572265625,
        "y": 1552.9864501953125,
        "wires": [
            [
                "389cba1538299e97"
            ]
        ]
    },
    {
        "id": "8853193f2ea9e146",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "does seller email exist?",
        "property": "seller_email",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 3577.785747528076,
        "y": 1612.6666221618652,
        "wires": [
            [
                "7a622d1fe40adef1"
            ],
            [
                "bec33379748bc1ff"
            ]
        ]
    },
    {
        "id": "ca094f0bb98c6877",
        "type": "link out",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "link out 28",
        "mode": "link",
        "links": [
            "f2430851bbcdd7ed"
        ],
        "x": 4041.1121711730957,
        "y": 1614.8578834533691,
        "wires": []
    },
    {
        "id": "389cba1538299e97",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "set proposals url",
        "func": "msg.email.data = {\n    proposal_url: env.get(\"HOSTNAME_FRONTEND\") + \"/auction/\" + msg.payload[0].uuid,\n    proposal_uuid: msg.payload[0].uuid,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3594.2158203125,
        "y": 1495.2427978515625,
        "wires": [
            [
                "a8bdbbf74525ab09"
            ]
        ]
    },
    {
        "id": "f9cea51e2e779e12",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "check for parameters",
        "func": "var payload = msg.payload;\n\nmsg[\"status\"] = \"ok\";\n\nif ( payload.user_uuid && payload.proposal_uuid && payload.amount && payload.decision ) {\n    msg.status = \"db_check\";\n} else {\n    msg.status = \"missing_data\";\n    msg.payload = JSON.stringify({\n            status: \"error\",\n            msg: \"something missing\"\n        });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 414.89609146118164,
        "y": 1150.1113414764404,
        "wires": [
            [
                "7dd5bf86b99ba76e"
            ]
        ]
    },
    {
        "id": "2349281462e6046f",
        "type": "link in",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "[post] proposal make_decision",
        "links": [
            "714f7b2a4a8ba90a"
        ],
        "x": 235.50045013427734,
        "y": 1150.6703281402588,
        "wires": [
            [
                "f9cea51e2e779e12"
            ]
        ]
    },
    {
        "id": "a3e42389b82a3a51",
        "type": "http response",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1803.8962287902832,
        "y": 1046.444631576538,
        "wires": []
    },
    {
        "id": "e446e0ee0a6eebbf",
        "type": "postgresql",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "accept auction at bid",
        "query": "update \n  auctions d\nset \n  is_accepted = true,\n  accepted_at = NOW()\nfrom auctions d2\n   join bids         on bids.id_auctions = d2.id \n                     and bids.amount = {{ msg.payload.amount }} \n                     and bids.was_declined = false\n                     and bids.id_users != (select id from users where uuid = '{{ msg.payload.user_uuid }}')\n   join users seller on seller.id = d2.seller_id\n   join users buyer  on buyer.id = bids.id_users\nwhere\n  d.seller_id = (select id from users where uuid = '{{ msg.payload.user_uuid }}')\n  and d.uuid = '{{ msg.payload.proposal_uuid }}'\n  and d.id = d2.id\nRETURNING \n  d.text           as description,\n  buyer.firstname  as buyer_firstnam,\n  buyer.surname    as buyer_surname,\n  buyer.email      as buyer_email,\n  seller.firstname as seller_firstname,\n  seller.surname   as seller_surname,\n  seller.email     as seller_email,\n  bids.amount      as bid_amount,\n  d.uuid           as proposal_uuid\n  ;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 748.896110534668,
        "y": 900.8891162872314,
        "wires": [
            [
                "a53e9c2d5ac016cf"
            ]
        ]
    },
    {
        "id": "ef1b0a4a352fce6a",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "accept or decline?",
        "property": "payload.decision",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "accept",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 515.4482460021973,
        "y": 979.1078605651855,
        "wires": [
            [
                "e446e0ee0a6eebbf"
            ],
            [
                "ca58a70e3f27740b"
            ]
        ]
    },
    {
        "id": "ca58a70e3f27740b",
        "type": "postgresql",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "decline bid",
        "query": "update bids set \n  was_declined = true\nwhere \n  bids.amount = {{ msg.payload.amount }}\n  and bids.id_users != (select id from users where uuid = '{{ msg.payload.user_uuid }}')\n  and bids.id_auctions = (select \n                            id \n                          from \n                            auctions \n                          where \n                            seller_id = (select id from users where uuid = '{{ msg.payload.user_uuid }}')\n                            and uuid = '{{ msg.payload.proposal_uuid }}'\n                          )\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 730.8960609436035,
        "y": 1033.888988494873,
        "wires": [
            [
                "11759177a0935bf1"
            ]
        ]
    },
    {
        "id": "11759177a0935bf1",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 959.8961982727051,
        "y": 1034.8890647888184,
        "wires": [
            [
                "dcae012119e5e79d",
                "fcb92a57aae26dd5"
            ],
            [
                "5509bd67bb44ff89"
            ]
        ]
    },
    {
        "id": "5509bd67bb44ff89",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "bid not found",
        "func": "\nreturn {\n    payload: JSON.stringify({\n        status: \"error\",\n        msg: \"bid not found\",\n        data: {\n            amount: msg.origpayload.amount,\n            proposal_uuid: msg.origpayload.proposal_uuid,\n            user_uuid: msg.origpayload.user_uuid\n        }\n    }),\n    res: msg.res\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1295.8962631225586,
        "y": 1043.8891162872314,
        "wires": [
            [
                "a3e42389b82a3a51"
            ]
        ]
    },
    {
        "id": "dcae012119e5e79d",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "trigger ws",
        "func": "msg.payload = {\n    type: \"bid_declined\",\n    data: {\n        amount: msg.origpayload.amount,\n        proposal_uuid: msg.origpayload.proposal_uuid,\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1285.2189865112305,
        "y": 951.465311050415,
        "wires": [
            [
                "8aa234e82095cc91"
            ]
        ]
    },
    {
        "id": "fcb92a57aae26dd5",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "ok response",
        "func": "msg.payload = {\n    status: \"ok\",\n    data: {\n        type: \"bid_declined\",\n        proposal_uuid: msg.origpayload.proposal_uuid,\n        amount: msg.origpayload.amount\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1296.6738739013672,
        "y": 996.000036239624,
        "wires": [
            [
                "a3e42389b82a3a51"
            ]
        ]
    },
    {
        "id": "8aa234e82095cc91",
        "type": "link out",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "link out 32",
        "mode": "link",
        "links": [
            "303296a7abcb2e19",
            "e3bfdcb18e30095a"
        ],
        "x": 1396.2155799865723,
        "y": 951.1980094909668,
        "wires": []
    },
    {
        "id": "a53e9c2d5ac016cf",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 952.6738586425781,
        "y": 900.666675567627,
        "wires": [
            [
                "b1633fc8b1acc01a",
                "818211dfc79ff4aa",
                "634bce907b5ad314"
            ],
            [
                "591b51d4a9748432"
            ]
        ]
    },
    {
        "id": "591b51d4a9748432",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "bid not found",
        "func": "\nreturn {\n    payload: JSON.stringify({\n        status: \"error\",\n        msg: \"bid not found\",\n        data: {\n            amount: msg.origpayload.amount,\n            proposal_uuid: msg.origpayload.proposal_uuid,\n            user_uuid: msg.origpayload.user_uuid\n        }\n    }),\n    res: msg.res\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1288.674030303955,
        "y": 903.6665706634521,
        "wires": [
            [
                "a3e42389b82a3a51"
            ]
        ]
    },
    {
        "id": "b1633fc8b1acc01a",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "ok response",
        "func": "msg.payload = {\n    status: \"ok\",\n    data: {\n        type: \"bid_accepted\",\n        proposal_uuid: msg.origpayload.proposal_uuid,\n        amount: msg.origpayload.amount\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1289.673900604248,
        "y": 865.666919708252,
        "wires": [
            [
                "a3e42389b82a3a51"
            ]
        ]
    },
    {
        "id": "818211dfc79ff4aa",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "trigger ws",
        "func": "msg.payload = {\n    type: \"bid_accepted\",\n    data: {\n        amount: msg.origpayload.amount,\n        proposal_uuid: msg.origpayload.proposal_uuid,\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1281.6738471984863,
        "y": 829.666919708252,
        "wires": [
            [
                "9f835318ae1e84d9"
            ]
        ]
    },
    {
        "id": "1866f7d5bf4b0977",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "0355d8f8a1687a73",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1155.784553527832,
        "y": 260.66672801971436,
        "wires": [
            [
                "1b3a5dc22396e54e",
                "635efe3e813cb9cb"
            ],
            [
                "35627cb32541e827"
            ]
        ]
    },
    {
        "id": "35627cb32541e827",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "0355d8f8a1687a73",
        "name": "failed if no bid created",
        "func": "msg.pyload = {\n    status: \"failed\",\n    msg: \"bid rejected\"\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370.7847137451172,
        "y": 326.6667232513428,
        "wires": [
            [
                "2454f11161812905"
            ]
        ]
    },
    {
        "id": "6f6530251eaf202a",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "is email valid?",
        "func": "\nvar res = global.get(\"validateemail\")(msg.origpayload.seller_email);\n\nmsg.email_is_valid = (res != null);\nmsg.email_validation_result = res;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1145.3267288208008,
        "y": 1480.674020767212,
        "wires": [
            [
                "781068f858cdd177"
            ]
        ]
    },
    {
        "id": "781068f858cdd177",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "property": "email_is_valid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1188.3371353149414,
        "y": 1527.8929080963135,
        "wires": [
            [
                "b2973dd545e6883a"
            ],
            [
                "aa53ec32657a6d98"
            ]
        ]
    },
    {
        "id": "940aa6d426b32a11",
        "type": "postgresql",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "create new user for email",
        "query": "INSERT into users(\n    firstname, \n    surname,\n    email,\n    was_created_by_auction\n    ) values (\n        'UNKNOWN',\n        'UNKNOWN',\n        '{{ msg.origpayload.seller_email }}',\n        true\n    ) RETURNING id\n    ;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1723.3406791687012,
        "y": 1627.0488243103027,
        "wires": [
            [
                "15be66d6d6c64fe5"
            ]
        ]
    },
    {
        "id": "46dde88b75490227",
        "type": "catch",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "scope": [
            "940aa6d426b32a11"
        ],
        "uncaught": false,
        "x": 1580.3368949890137,
        "y": 1608.4692344665527,
        "wires": [
            [
                "b2973dd545e6883a"
            ]
        ]
    },
    {
        "id": "a8bdbbf74525ab09",
        "type": "postgresql",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "get buyer email",
        "query": "select email\nfrom users\nwhere uuid = '{{ msg.origpayload.buyer_uuid }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 3810.67138671875,
        "y": 1495.7222900390625,
        "wires": [
            [
                "01445804f6f81d47"
            ]
        ]
    },
    {
        "id": "01445804f6f81d47",
        "type": "change",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "Set TO and CC emails",
        "rules": [
            {
                "t": "set",
                "p": "email.cc_email",
                "pt": "msg",
                "to": "payload[0].email",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "email.to_email",
                "pt": "msg",
                "to": "seller_email",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3846.11865234375,
        "y": 1549.22265625,
        "wires": [
            [
                "4d608a7d2f78fe1c"
            ]
        ]
    },
    {
        "id": "634bce907b5ad314",
        "type": "change",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "email",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1302.5627632141113,
        "y": 791.0002756118774,
        "wires": [
            [
                "cd4a4efafde74243"
            ]
        ]
    },
    {
        "id": "f8a904cf7451650c",
        "type": "change",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "set CC and TO emails",
        "rules": [
            {
                "t": "set",
                "p": "email.to_email",
                "pt": "msg",
                "to": "email.data.buyer_email",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "email.cc_email",
                "pt": "msg",
                "to": "email.data.seller_email",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1658.5628662109375,
        "y": 901.5702514648438,
        "wires": [
            [
                "e012fb09e9897dda"
            ]
        ]
    },
    {
        "id": "d1a5fb34f978f34e",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "set proposals url",
        "func": "msg.email.data[\"proposal_url\"] = env.get(\"HOSTNAME_FRONTEND\") + \"/auction/\" + msg.email.data.proposal_uuid;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1624.5628662109375,
        "y": 846.2565307617188,
        "wires": [
            [
                "f8a904cf7451650c"
            ]
        ]
    },
    {
        "id": "cd4a4efafde74243",
        "type": "change",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "email.data",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1615.5628700256348,
        "y": 792.0002555847168,
        "wires": [
            [
                "d1a5fb34f978f34e"
            ]
        ]
    },
    {
        "id": "e012fb09e9897dda",
        "type": "link out",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "link out 34",
        "mode": "link",
        "links": [
            "5ed9028000aeb909"
        ],
        "x": 1808.114990234375,
        "y": 832.5211181640625,
        "wires": []
    },
    {
        "id": "776532ef5bbd634c",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "is creator the seller?",
        "property": "payload.buyer_iamseller",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 730.8821220397949,
        "y": 1417.6743125915527,
        "wires": [
            [
                "2696168e5d22f048"
            ],
            [
                "fd9e4f65b0bd4785"
            ]
        ]
    },
    {
        "id": "fd9e4f65b0bd4785",
        "type": "postgresql",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "get creator email",
        "query": "SELECT email \nFROM users\nwhere uuid = '{{ msg.payload.buyer_uuid }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 873.8959770202637,
        "y": 1508.3862266540527,
        "wires": [
            [
                "56caa8884a54032f"
            ]
        ]
    },
    {
        "id": "56caa8884a54032f",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "set seller_email",
        "func": "var seller_email = msg.payload[0].email;\n\nmsg.origpayload.seller_email = seller_email;\n\nmsg.payload = msg.origpayload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 906.7814750671387,
        "y": 1574.2436485290527,
        "wires": [
            [
                "2696168e5d22f048"
            ]
        ]
    },
    {
        "id": "1b472985ac13d3c3",
        "type": "link out",
        "z": "e79b7563e1176dfd",
        "g": "0355d8f8a1687a73",
        "name": "link out 35",
        "mode": "link",
        "links": [
            "aaa7a47054fe5755",
            "27fafa85c903c954"
        ],
        "x": 1559.5000457763672,
        "y": 183.99999141693115,
        "wires": []
    },
    {
        "id": "4d608a7d2f78fe1c",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "cc & to emails match?",
        "property": "email.cc_email",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "email.to_email",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 3853.5,
        "y": 1598,
        "wires": [
            [
                "6aa7b41aca9c6024"
            ],
            [
                "ca094f0bb98c6877"
            ]
        ]
    },
    {
        "id": "6f917b0db380531d",
        "type": "link out",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "link out 36",
        "mode": "link",
        "links": [
            "931368786f4e0469"
        ],
        "x": 4326.500843048096,
        "y": 1570.999939918518,
        "wires": []
    },
    {
        "id": "6aa7b41aca9c6024",
        "type": "change",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "email.cc_email",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 4144.000110626221,
        "y": 1570.9999732971191,
        "wires": [
            [
                "6f917b0db380531d"
            ]
        ]
    },
    {
        "id": "f6974aa6d8d57fba",
        "type": "http response",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "error: auction not created",
        "statusCode": "",
        "headers": {},
        "x": 2669.0000953674316,
        "y": 1363.0000190734863,
        "wires": []
    },
    {
        "id": "7f4def9059086d5e",
        "type": "http response",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "respond success",
        "statusCode": "",
        "headers": {},
        "x": 2940.000102996826,
        "y": 1551.9999961853027,
        "wires": []
    },
    {
        "id": "9f835318ae1e84d9",
        "type": "link out",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "link out 37",
        "mode": "link",
        "links": [
            "303296a7abcb2e19",
            "e3bfdcb18e30095a"
        ],
        "x": 1393.0002479553223,
        "y": 830.0002555847168,
        "wires": []
    },
    {
        "id": "22f84e59eb56ef79",
        "type": "comment",
        "z": "e79b7563e1176dfd",
        "g": "71032b34a625c818",
        "name": "Catch all queries that are in an req-resp flow/loop",
        "info": "",
        "x": 2101.5,
        "y": 70,
        "wires": []
    },
    {
        "id": "bec33379748bc1ff",
        "type": "subflow:454f61a0a8b759f9",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "x": 3785.500102996826,
        "y": 1649.9999961853027,
        "wires": []
    },
    {
        "id": "60978791072617f4",
        "type": "subflow:454f61a0a8b759f9",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "x": 3193.5,
        "y": 1407,
        "wires": []
    },
    {
        "id": "707e1daf8d8873f6",
        "type": "subflow:d03c4820970ac189",
        "z": "e79b7563e1176dfd",
        "g": "71032b34a625c818",
        "name": "",
        "x": 2085.5,
        "y": 192,
        "wires": []
    },
    {
        "id": "7dd5bf86b99ba76e",
        "type": "subflow:e8bbdc11f1fc0dd8",
        "z": "e79b7563e1176dfd",
        "g": "df87ef0d81220bc2",
        "name": "",
        "x": 463.5002555847168,
        "y": 1051.000295639038,
        "wires": [
            [
                "ef1b0a4a352fce6a"
            ]
        ]
    },
    {
        "id": "71299118ade1aa96",
        "type": "subflow:e8bbdc11f1fc0dd8",
        "z": "e79b7563e1176dfd",
        "g": "0355d8f8a1687a73",
        "name": "",
        "x": 642.5000457763672,
        "y": 212.00002098083496,
        "wires": [
            [
                "ca338fb064bc3507"
            ]
        ]
    },
    {
        "id": "793e52c874112957",
        "type": "subflow:e8bbdc11f1fc0dd8",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "x": 561.5001029968262,
        "y": 1494.9999961853027,
        "wires": [
            [
                "776532ef5bbd634c"
            ]
        ]
    },
    {
        "id": "234c504065ac64b8",
        "type": "subflow:1d3e4db6ecdf8e95",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "TODO ignoring the failure of storing the initial bid is a bit wierd",
        "x": 3194.5,
        "y": 1314,
        "wires": []
    },
    {
        "id": "bae3f2f9179c77ae",
        "type": "subflow:1d3e4db6ecdf8e95",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "TODO: what about banned users?",
        "x": 1546.5001029968262,
        "y": 1720.9999961853027,
        "wires": []
    },
    {
        "id": "ab0aaf85f16dbce9",
        "type": "link in",
        "z": "e79b7563e1176dfd",
        "g": "fd5efc60ade316ce",
        "name": "[post] dont-spam-me",
        "links": [
            "353d91dbcc25531f"
        ],
        "x": 235.50022888183594,
        "y": 487.0000991821289,
        "wires": [
            [
                "54058489707eb9ec"
            ]
        ]
    },
    {
        "id": "54058489707eb9ec",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "fd5efc60ade316ce",
        "name": "check parameters",
        "func": "var payload = msg.payload;\n\nif ( payload.data && payload.confirm_email ) {\n    msg.status = \"db_check\";\n} else {\n    msg.status = \"missing_data\";\n    msg.payload = JSON.stringify({\n            status: \"error\",\n            msg: \"something missing\"\n        });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 403.0000305175781,
        "y": 487.0000991821289,
        "wires": [
            [
                "1ea236a6749e2879"
            ]
        ]
    },
    {
        "id": "1ea236a6749e2879",
        "type": "subflow:e8bbdc11f1fc0dd8",
        "z": "e79b7563e1176dfd",
        "g": "fd5efc60ade316ce",
        "name": "",
        "x": 565.0000305175781,
        "y": 544.0000991821289,
        "wires": [
            [
                "9344a9eaf1766474"
            ]
        ]
    },
    {
        "id": "9344a9eaf1766474",
        "type": "subflow:d1100a08134ce3c4",
        "z": "e79b7563e1176dfd",
        "g": "fd5efc60ade316ce",
        "name": "",
        "x": 676.5000305175781,
        "y": 606.0000991821289,
        "wires": [
            [
                "c530b3cb814b9dd5"
            ]
        ]
    },
    {
        "id": "c530b3cb814b9dd5",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "fd5efc60ade316ce",
        "name": "emails match?",
        "property": "datapayload.em",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "origpayload.confirm_email",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 854.5000305175781,
        "y": 608.0000991821289,
        "wires": [
            [
                "e6e6187e2bb42de3"
            ],
            [
                "f17995d3769f86f8"
            ]
        ]
    },
    {
        "id": "f17995d3769f86f8",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "fd5efc60ade316ce",
        "name": "failed: no match",
        "func": "msg.payload = {\n    status: \"failed\",\n    msg: \"Emails did not match\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1084.5000305175781,
        "y": 643.0000991821289,
        "wires": [
            [
                "19de425071d31e50"
            ]
        ]
    },
    {
        "id": "19de425071d31e50",
        "type": "http response",
        "z": "e79b7563e1176dfd",
        "g": "fd5efc60ade316ce",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1294.0000305175781,
        "y": 643.0000991821289,
        "wires": []
    },
    {
        "id": "e6e6187e2bb42de3",
        "type": "postgresql",
        "z": "e79b7563e1176dfd",
        "g": "fd5efc60ade316ce",
        "name": "insert email into dont_spam_me",
        "query": "insert into dont_send_me_emails(\n    email\n) values (\n   lower('{{ msg.origpayload.confirm_email }}')\n) on conflict (email) DO update set updated_at = NOW()\n;\n",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1123.5000305175781,
        "y": 563.0000991821289,
        "wires": [
            [
                "f0c94bbfd4d0861c"
            ]
        ]
    },
    {
        "id": "f0c94bbfd4d0861c",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "fd5efc60ade316ce",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1339.0000305175781,
        "y": 561.0000991821289,
        "wires": [
            [
                "030780abf98798c4"
            ],
            [
                "5a092213730a8ff6"
            ]
        ]
    },
    {
        "id": "5a092213730a8ff6",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "fd5efc60ade316ce",
        "name": "failed: no match",
        "func": "msg.payload = {\n    status: \"failed_to_insert\",\n    msg: \"failed to store email, please contact support.\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1522.0000305175781,
        "y": 605.0000991821289,
        "wires": [
            [
                "b650d8b3e462b228"
            ]
        ]
    },
    {
        "id": "030780abf98798c4",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "fd5efc60ade316ce",
        "name": "ok response",
        "func": "msg.payload = {\n    status: \"ok\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1509.0000305175781,
        "y": 540.0000991821289,
        "wires": [
            [
                "b650d8b3e462b228"
            ]
        ]
    },
    {
        "id": "b650d8b3e462b228",
        "type": "http response",
        "z": "e79b7563e1176dfd",
        "g": "fd5efc60ade316ce",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1702.0000305175781,
        "y": 570.0000991821289,
        "wires": []
    },
    {
        "id": "fb6b28611a90e621",
        "type": "subflow:d1d7d446235ef659",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "x": 2386.500102996826,
        "y": 1584.9999961853027,
        "wires": [
            [
                "e586b04807d8f2f2",
                "cb34683ed1d94018"
            ]
        ]
    },
    {
        "id": "12ee951c3007e2e8",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "property": "openaipayload.appropriateness",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2446.500102996826,
        "y": 1680.9999961853027,
        "wires": [
            [
                "df24ca080b02dc63"
            ],
            [
                "273c923afe707aab"
            ]
        ]
    },
    {
        "id": "66218e053020522e",
        "type": "postgresql",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "execute update",
        "query": "",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2882.5,
        "y": 1709,
        "wires": [
            [
                "7fa15f66ab0c9353"
            ]
        ]
    },
    {
        "id": "e586b04807d8f2f2",
        "type": "change",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "query",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2402.500102996826,
        "y": 1636.9999961853027,
        "wires": [
            [
                "12ee951c3007e2e8"
            ]
        ]
    },
    {
        "id": "df24ca080b02dc63",
        "type": "sqlbuilder",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "approvied_query",
        "field": "query",
        "fieldType": "msg",
        "sqldialect": "postgresql",
        "sqlquery": "query(\"auctions\")\n.where( 'id', msg.payload[0].id)\n.update({\n    approved_at: \"NOW()\",\n    is_approved: true,\n    approved_by: 'openai',\n    openai_rating: JSON.stringify(msg.openaipayload)\n\n})\n.returning([\"is_approved\", \"uuid\"])",
        "x": 2668.499897003174,
        "y": 1645.0000038146973,
        "wires": [
            [
                "66218e053020522e"
            ]
        ]
    },
    {
        "id": "273c923afe707aab",
        "type": "sqlbuilder",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "declined",
        "field": "query",
        "fieldType": "msg",
        "sqldialect": "postgresql",
        "sqlquery": "query(\"auctions\")\n.where( 'id', msg.payload[0].id)\n.update({\n    openai_rating: JSON.stringify(msg.openaipayload)\n})\n.returning(['is_approved','uuid','text','openai_rating'])\n",
        "x": 2640.999897003174,
        "y": 1710.0000038146973,
        "wires": [
            [
                "66218e053020522e"
            ]
        ]
    },
    {
        "id": "4f5fec0b8067ae42",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "trigger websocket",
        "func": "return {\n    data: {\n        proposal_uuid: msg.payload[0].uuid\n    },\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3367.000102996826,
        "y": 1702.9999961853027,
        "wires": [
            [
                "f0b0c60746bee751"
            ]
        ]
    },
    {
        "id": "1cb000a4f60fccd8",
        "type": "change",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "email",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3341.000102996826,
        "y": 1759.9999961853027,
        "wires": [
            [
                "6a7b9fd4d2a1b40f"
            ]
        ]
    },
    {
        "id": "37428448ac962675",
        "type": "change",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "email.to_email",
                "pt": "msg",
                "to": "moderator@admin.bidnbuy.club",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3763.4482421875,
        "y": 1770.570068359375,
        "wires": [
            [
                "25546edb290898bc"
            ]
        ]
    },
    {
        "id": "6a7b9fd4d2a1b40f",
        "type": "function",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "[ADMIN] set proposals url and rating",
        "func": "msg.email.data = {\n    proposal_url: env.get(\"ADMIN_FRONTEND\") + \"/#!/2?pu=\" + msg.payload[0].uuid,\n    proposal_uuid: msg.payload[0].uuid,\n    openai_rating: msg.payload[0].openai_rating,\n    text: msg.payload[0].text,\n    buyer_url: env.get(\"ADMIN_FRONTEND\") + \"/#!/3?uu=\" + msg.origpayload.buyer_uuid,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3471.100200653076,
        "y": 1810.2563438415527,
        "wires": [
            [
                "37428448ac962675",
                "4a58a16acadf72be"
            ]
        ]
    },
    {
        "id": "25546edb290898bc",
        "type": "link out",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "link out 39",
        "mode": "link",
        "links": [
            "9d6d928cef3e0e38"
        ],
        "x": 3939.5,
        "y": 1767,
        "wires": []
    },
    {
        "id": "b4c3805f8997097b",
        "type": "comment",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "If CC==TO then seller is buyer, this is an offer.",
        "info": "",
        "x": 4066.5001373291016,
        "y": 1635.0000267028809,
        "wires": []
    },
    {
        "id": "7fa15f66ab0c9353",
        "type": "switch",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "is_approved",
        "property": "payload[0].is_approved",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3112.500102996826,
        "y": 1706.9999961853027,
        "wires": [
            [
                "8853193f2ea9e146",
                "4f5fec0b8067ae42"
            ],
            [
                "1cb000a4f60fccd8"
            ]
        ]
    },
    {
        "id": "cb34683ed1d94018",
        "type": "subflow:1d3e4db6ecdf8e95",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "TODO could consider not doing openai approval for offers, i.e. user is creator and seller.",
        "x": 2820.5,
        "y": 1808,
        "wires": []
    },
    {
        "id": "a40c0e3201bf7a62",
        "type": "ui_toast",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "",
        "x": 4115,
        "y": 1814,
        "wires": []
    },
    {
        "id": "7a6e59e69b59700b",
        "type": "change",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Auctions",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3912,
        "y": 1820,
        "wires": [
            [
                "a40c0e3201bf7a62"
            ]
        ]
    },
    {
        "id": "4a58a16acadf72be",
        "type": "template",
        "z": "e79b7563e1176dfd",
        "g": "4aa7d38b97ffdcc9",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<a target=\"_blank\" href='{{email.data.proposal_url}}'>Auction</a> was declined.",
        "output": "str",
        "x": 3733,
        "y": 1823,
        "wires": [
            [
                "7a6e59e69b59700b"
            ]
        ]
    },
    {
        "id": "27641a5c0e96e506",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "check parameters",
        "func": "var payload = msg.payload;\n\nif ( payload.email && payload.firstname && payload.surname ) {\n    msg.status = \"db_check\";\n} else {\n    msg.status = \"missing_data\";\n    msg.payload = JSON.stringify({\n            status: \"error\",\n            msg: \"something missing\"\n        });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 335.000244140625,
        "y": 213.0002899169922,
        "wires": [
            [
                "20afa49cd7f1333a"
            ]
        ]
    },
    {
        "id": "5290664568a9580c",
        "type": "http response",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1114.000244140625,
        "y": 371.00013160705566,
        "wires": []
    },
    {
        "id": "73be955f54e0a1cf",
        "type": "postgresql",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "get user by email",
        "query": "SELECT * \nFROM users\nwhere email = lower('{{ msg.payload.email }}')\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 646.0000762939453,
        "y": 204.00007820129395,
        "wires": [
            [
                "4e54b4db81e68bd3"
            ]
        ]
    },
    {
        "id": "4e54b4db81e68bd3",
        "type": "switch",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 818.0000610351562,
        "y": 204.00007820129395,
        "wires": [
            [
                "49fb459db0e20d88"
            ],
            [
                "e3a1b932a40da68d"
            ]
        ]
    },
    {
        "id": "4d2e561241bfeb4a",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "email already exists",
        "func": "  msg.payload = {\n    status: \"email_exists\",\n    msg: \"Email \" + msg.origpayload.email + \" already exists\"\n };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 884.0001831054688,
        "y": 343.0000915527344,
        "wires": [
            [
                "5290664568a9580c"
            ]
        ]
    },
    {
        "id": "49fb459db0e20d88",
        "type": "postgresql",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "insert user",
        "query": "INSERT into users(\n    firstname, \n    surname,\n    email\n    ) values (\n        '{{ msg.origpayload.firstname }}',\n        '{{ msg.origpayload.surname }}',\n        '{{ msg.origpayload.email }}'\n    ) RETURNING uuid,email,firstname,surname\n    ;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 989.0000610351562,
        "y": 197.00007820129395,
        "wires": [
            [
                "4d4fc85a4cbc3fa0"
            ]
        ]
    },
    {
        "id": "4d4fc85a4cbc3fa0",
        "type": "postgresql",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "create verification code",
        "query": "INSERT into user_verification(\n    user_uuid \n) values (\n   '{{#msg.payload}}{{ uuid }}{{/msg.payload}}'\n) \non conflict(user_uuid) do update set created_at = NOW()\nRETURNING user_uuid,code as verification_code\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1246,
        "y": 197.00009155273438,
        "wires": [
            [
                "d2bb170811c7e3ce",
                "940608463c098d67"
            ]
        ]
    },
    {
        "id": "d2bb170811c7e3ce",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "combine original and new payload",
        "func": "msg.payload = {...msg.payload[0], ...msg.origpayload};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1365,
        "y": 261.0000915527344,
        "wires": [
            [
                "2ac9bcdd246dcd1b"
            ]
        ]
    },
    {
        "id": "e372772cfbb59b9c",
        "type": "postgresql",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "update user_verification set email_sent_at",
        "query": "UPDATE user_verification\nset email_sent_at = NOW()\nwhere user_uuid = '{{ msg.payload.user_uuid }}'\nand code = '{{ msg.payload.verification_code }}'\nreturning user_uuid\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 377.0000991821289,
        "y": 683.0001192092896,
        "wires": [
            [
                "a751fedc12c69357",
                "6354755fd1859629"
            ]
        ]
    },
    {
        "id": "7e1fdd1358625e6b",
        "type": "catch",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "",
        "scope": [
            "e372772cfbb59b9c"
        ],
        "uncaught": false,
        "x": 520.0000076293945,
        "y": 707.0001192092896,
        "wires": [
            [
                "bcb8cc00ad1fddd5"
            ]
        ]
    },
    {
        "id": "bcb8cc00ad1fddd5",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "send too emails to single email address",
        "func": "msg.payload = {\n    status: \"failed\",\n    msg: \"too many emails\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 973,
        "y": 706.0001220703125,
        "wires": [
            [
                "efed77b7b393022f"
            ]
        ]
    },
    {
        "id": "728b41cdc2db124f",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "setup response, email data and verify link",
        "func": "msg.user = msg.payload[0];\n\nvar encData = global.get(\"encrypt\")(JSON.stringify({\n    uu: msg.user.uuid,\n    vc: msg.origpayload.verification_code\n}));\n\nmsg.email = {\n    to_email: msg.payload[0].email,\n    data: {\n        verifyLink: env.get(\"HOSTNAME_FRONTEND\") + \"/verify?d=\" + encData\n    }\n};\n\nmsg.payload = {\n    staus: \"ok\",\n    msg: \"email sent\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1155.0001525878906,
        "y": 558.0002946853638,
        "wires": [
            [
                "449601abfe35007d",
                "efed77b7b393022f"
            ]
        ]
    },
    {
        "id": "15cd4fe283a32563",
        "type": "postgresql",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "get user",
        "query": "SELECT * \nFROM users\nwhere uuid = '{{#msg.payload}}{{user_uuid}}{{/msg.payload}}'\n;\n",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 873.0000610351562,
        "y": 558.000244140625,
        "wires": [
            [
                "728b41cdc2db124f"
            ]
        ]
    },
    {
        "id": "9494e69179972d85",
        "type": "catch",
        "z": "7b5adb0ea5051dde",
        "g": "a60640d474ab616f",
        "name": "",
        "scope": [
            "73be955f54e0a1cf",
            "49fb459db0e20d88",
            "4d4fc85a4cbc3fa0",
            "15cd4fe283a32563",
            "f3af6926971316d7",
            "97d3c895498c70d1",
            "0c38cd63aaf94470",
            "bb59b8e5d9788aaa"
        ],
        "uncaught": false,
        "x": 1927.0002670288086,
        "y": 145.0000982284546,
        "wires": [
            [
                "93a788a5367bdd71"
            ]
        ]
    },
    {
        "id": "de58e9f8df2901de",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "check parameters",
        "func": "var payload = msg.payload;\n\nif ( payload.email && payload.verification_code ) {\n    msg.status = \"db_check\";\n} else {\n    msg.status = \"missing_data\";\n    msg.payload = JSON.stringify({\n            status: \"error\",\n            msg: \"something missing\"\n        });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 351.99997329711914,
        "y": 1028.0001249313354,
        "wires": [
            [
                "df38a61a9e01339b"
            ]
        ]
    },
    {
        "id": "0c38cd63aaf94470",
        "type": "postgresql",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "check ver code expiration",
        "query": "DELETE from user_verification\nwhere email_sent_at > ( NOW() - '55 minutes'::interval)\nand user_uuid = (select uuid from users where email = lower('{{ msg.payload.email }}'))\nand code = '{{ msg.payload.verification_code }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 890.0000305175781,
        "y": 963.0001220703125,
        "wires": [
            [
                "729d4b21a33c5b7a"
            ]
        ]
    },
    {
        "id": "729d4b21a33c5b7a",
        "type": "switch",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1100.0000305175781,
        "y": 963.0001220703125,
        "wires": [
            [
                "bb59b8e5d9788aaa",
                "47622d5e4883fe3e"
            ],
            [
                "9ea9ac8218495dff"
            ]
        ]
    },
    {
        "id": "9ea9ac8218495dff",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "verification code expired",
        "func": "msg.payload = JSON.stringify({\n    status: \"failed\",\n    msg: \"verification code expired\"\n})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1354,
        "y": 1027.0001220703125,
        "wires": [
            [
                "4a58cc9304e1827a",
                "f794e2163604a3e6"
            ]
        ]
    },
    {
        "id": "4a58cc9304e1827a",
        "type": "postgresql",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "remove user_verificaiton",
        "query": "DELETE from user_verification\nwhere user_uuid = (select uuid from users where email = lower('{{ msg.origpayload.email }}'))\nand code = '{{ msg.origpayload.verification_code }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1614,
        "y": 1085.0001220703125,
        "wires": [
            [
                "18ac95e19d551495"
            ]
        ]
    },
    {
        "id": "bb59b8e5d9788aaa",
        "type": "postgresql",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "update users table",
        "query": "update users\nset \n  is_verified = true,\n  verified_at = NOW()\nwhere email = lower('{{ msg.origpayload.email }}')\nRETURNING firstname, surname, uuid\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1334.0000534057617,
        "y": 956.000147819519,
        "wires": [
            [
                "3aca23ea96ecc134"
            ]
        ]
    },
    {
        "id": "3aca23ea96ecc134",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "construct user data",
        "func": "var usr = msg.payload[0];\n\nmsg.payload = JSON.stringify({\n    user: {\n        firstname: usr.firstname,\n        uuid:      usr.uuid,\n        surname:   usr.surname\n    },\n    status: \"ok\"\n})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1577.9999923706055,
        "y": 955.000147819519,
        "wires": [
            [
                "f794e2163604a3e6"
            ]
        ]
    },
    {
        "id": "a751fedc12c69357",
        "type": "switch",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 660.0000610351562,
        "y": 570.0001220703125,
        "wires": [
            [
                "15cd4fe283a32563"
            ],
            [
                "808ccf3ff61f71fb"
            ],
            [
                "bcb8cc00ad1fddd5"
            ]
        ]
    },
    {
        "id": "808ccf3ff61f71fb",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "invalid verification code",
        "func": "msg.payload = {\n    status: \"failed\",\n    msg: \"invalid verification code\"\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 924.0000610351562,
        "y": 633.000244140625,
        "wires": [
            [
                "efed77b7b393022f"
            ]
        ]
    },
    {
        "id": "f794e2163604a3e6",
        "type": "http response",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1779,
        "y": 1027.0001220703125,
        "wires": []
    },
    {
        "id": "142126c28ee25935",
        "type": "link in",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "[api] post user register",
        "links": [
            "627985f8a52639b4"
        ],
        "x": 181.437744140625,
        "y": 213.22242736816406,
        "wires": [
            [
                "27641a5c0e96e506"
            ]
        ]
    },
    {
        "id": "ea533ff22bb9c6f9",
        "type": "link in",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "[api] user verify",
        "links": [
            "68ec96b6342d3dbd"
        ],
        "x": 178.8958282470703,
        "y": 1027.8857421875,
        "wires": [
            [
                "de58e9f8df2901de"
            ]
        ]
    },
    {
        "id": "30f35c3706f7e73a",
        "type": "link in",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "[api] send verify email",
        "links": [
            "fb24616382b60b38"
        ],
        "x": 185.4410171508789,
        "y": 569.8856782913208,
        "wires": [
            [
                "eae85c0e14c8e75a"
            ]
        ]
    },
    {
        "id": "ae50b5ea5a0e7f11",
        "type": "change",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origpayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 351.8958435058594,
        "y": 1097.33349609375,
        "wires": [
            [
                "de58e9f8df2901de"
            ]
        ]
    },
    {
        "id": "449601abfe35007d",
        "type": "link out",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "link out 27",
        "mode": "link",
        "links": [
            "06c98db054f5e440"
        ],
        "x": 1427.2258529663086,
        "y": 558.4201889038086,
        "wires": []
    },
    {
        "id": "87bcec7ef2a78fca",
        "type": "link in",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "[post] user verify verifylink",
        "links": [
            "3ee6997d3ccde613"
        ],
        "x": 178.8958282470703,
        "y": 1390.3333740234375,
        "wires": [
            [
                "f7517921a3f48250"
            ]
        ]
    },
    {
        "id": "f7517921a3f48250",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "check parameters",
        "func": "var payload = msg.payload;\n\nif ( payload.data ) {\n    msg.status = \"db_check\";\n} else {\n    msg.status = \"missing_data\";\n    msg.payload = JSON.stringify({\n            status: \"error\",\n            msg: \"something missing\"\n        });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 349.35422825813293,
        "y": 1391.2219161987305,
        "wires": [
            [
                "94de5778d72cfbb3"
            ]
        ]
    },
    {
        "id": "97d3c895498c70d1",
        "type": "postgresql",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "obtain email",
        "query": "select email\nfrom users\nwhere uuid = '{{ msg.datapayload.uu }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 348.3541374206543,
        "y": 1227.2219257354736,
        "wires": [
            [
                "4c6bc4a627e7c602"
            ]
        ]
    },
    {
        "id": "4c6bc4a627e7c602",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "setup payload",
        "func": "\nmsg.payload = {\n    email: msg.payload[0].email,\n    verification_code: msg.datapayload.vc,\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 347.35420989990234,
        "y": 1164.2220306396484,
        "wires": [
            [
                "ae50b5ea5a0e7f11"
            ]
        ]
    },
    {
        "id": "e3a1b932a40da68d",
        "type": "switch",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "was created by a auction?",
        "property": "payload[0].was_created_by_auction",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750.44091796875,
        "y": 275.2187614440918,
        "wires": [
            [
                "f3af6926971316d7"
            ],
            [
                "4d2e561241bfeb4a"
            ]
        ]
    },
    {
        "id": "f3af6926971316d7",
        "type": "postgresql",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "update user",
        "query": "UPDATE users\nset\n    firstname = '{{ msg.origpayload.firstname }}',\n    surname = '{{ msg.origpayload.surname }}',\n    was_created_by_auction = false\n\nwhere\n  email = '{{ msg.origpayload.email }}'\n\nRETURNING uuid,email,firstname,surname\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 997.4445190429688,
        "y": 269.39238929748535,
        "wires": [
            [
                "4d4fc85a4cbc3fa0"
            ]
        ]
    },
    {
        "id": "e7a4a7ce3a918afd",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "email invalid",
        "func": "  msg.payload = {\n    status: \"email_invalid\",\n    msg: \"Email \" + msg.origpayload.email + \" is invalid\"\n };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700.8958129882812,
        "y": 369.8889102935791,
        "wires": [
            [
                "5290664568a9580c"
            ]
        ]
    },
    {
        "id": "eae85c0e14c8e75a",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "check parameters",
        "func": "var payload = msg.payload;\n\nif ( payload.verification_code && payload.user_uuid ) {\n    msg.status = \"db_check\";\n} else {\n    msg.status = \"missing_data\";\n    msg.payload = {\n            status: \"error\",\n            msg: \"something missing\"\n        };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 336.00000762939453,
        "y": 568.999997138977,
        "wires": [
            [
                "ea31119eb7bd67a6"
            ]
        ]
    },
    {
        "id": "c0106cae5a0430d4",
        "type": "comment",
        "z": "7b5adb0ea5051dde",
        "g": "d960896a3598041e",
        "name": "Catch all queries that are in an req-resp flow/loop",
        "info": "",
        "x": 1956,
        "y": 72,
        "wires": []
    },
    {
        "id": "2ac9bcdd246dcd1b",
        "type": "http response",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1624,
        "y": 261.0000915527344,
        "wires": []
    },
    {
        "id": "efed77b7b393022f",
        "type": "http response",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1419,
        "y": 630,
        "wires": []
    },
    {
        "id": "93a788a5367bdd71",
        "type": "subflow:d03c4820970ac189",
        "z": "7b5adb0ea5051dde",
        "g": "a60640d474ab616f",
        "name": "",
        "x": 1973.5001220703125,
        "y": 224.0000457763672,
        "wires": []
    },
    {
        "id": "20afa49cd7f1333a",
        "type": "subflow:e8bbdc11f1fc0dd8",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "",
        "x": 387.5,
        "y": 290.0000305175781,
        "wires": [
            [
                "c67aedbb0e32c2ef"
            ]
        ]
    },
    {
        "id": "ea31119eb7bd67a6",
        "type": "subflow:e8bbdc11f1fc0dd8",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "",
        "x": 352.5,
        "y": 626,
        "wires": [
            [
                "e372772cfbb59b9c"
            ]
        ]
    },
    {
        "id": "df38a61a9e01339b",
        "type": "subflow:e8bbdc11f1fc0dd8",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "",
        "x": 347.5,
        "y": 970,
        "wires": [
            [
                "383ec80e38217175"
            ]
        ]
    },
    {
        "id": "94de5778d72cfbb3",
        "type": "subflow:e8bbdc11f1fc0dd8",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "",
        "x": 349.5,
        "y": 1340,
        "wires": [
            [
                "239276b527435a34"
            ]
        ]
    },
    {
        "id": "c67aedbb0e32c2ef",
        "type": "subflow:507161adae3ca528",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "x": 471.8906555175781,
        "y": 362.3350372314453,
        "wires": [
            [
                "73be955f54e0a1cf"
            ],
            [
                "e7a4a7ce3a918afd"
            ]
        ]
    },
    {
        "id": "383ec80e38217175",
        "type": "subflow:507161adae3ca528",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "x": 587,
        "y": 970,
        "wires": [
            [
                "0c38cd63aaf94470"
            ],
            [
                "6dce5331c96fe21c"
            ]
        ]
    },
    {
        "id": "6dce5331c96fe21c",
        "type": "function",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "email invalid",
        "func": "  msg.payload = {\n    status: \"email_invalid\",\n    msg: \"Email \" + msg.origpayload.email + \" is invalid\"\n };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 853,
        "y": 1072,
        "wires": [
            [
                "77de6fa83f179b30"
            ]
        ]
    },
    {
        "id": "77de6fa83f179b30",
        "type": "http response",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030.1044311523438,
        "y": 1072.1112060546875,
        "wires": []
    },
    {
        "id": "239276b527435a34",
        "type": "subflow:d1100a08134ce3c4",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "",
        "x": 340.5,
        "y": 1289,
        "wires": [
            [
                "97d3c895498c70d1"
            ]
        ]
    },
    {
        "id": "47622d5e4883fe3e",
        "type": "link out",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "link out 51",
        "mode": "link",
        "links": [
            "0a8b1a95c8e544b9"
        ],
        "x": 1260.5,
        "y": 892,
        "wires": []
    },
    {
        "id": "18ac95e19d551495",
        "type": "link out",
        "z": "7b5adb0ea5051dde",
        "g": "949c51bcc148dfb3",
        "name": "link out 52",
        "mode": "link",
        "links": [
            "0a8b1a95c8e544b9"
        ],
        "x": 1783,
        "y": 1085,
        "wires": []
    },
    {
        "id": "940608463c098d67",
        "type": "link out",
        "z": "7b5adb0ea5051dde",
        "g": "86328b858d237cc0",
        "name": "link out 53",
        "mode": "link",
        "links": [
            "0a8b1a95c8e544b9"
        ],
        "x": 1460,
        "y": 197,
        "wires": []
    },
    {
        "id": "6354755fd1859629",
        "type": "link out",
        "z": "7b5adb0ea5051dde",
        "g": "9969b30d869201d8",
        "name": "link out 54",
        "mode": "link",
        "links": [
            "0a8b1a95c8e544b9"
        ],
        "x": 615,
        "y": 683,
        "wires": []
    },
    {
        "id": "6afa8272796e7f43",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "check parameters",
        "func": "var payload = msg.payload;\n\nif ( payload.email && payload.verification_code ) {\n    msg.status = \"db_check\";\n} else {\n    msg.status = \"missing_data\";\n    msg.payload = JSON.stringify({\n            status: \"error\",\n            msg: \"something missing\"\n        });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 497.2500534057617,
        "y": 1188.000060081482,
        "wires": [
            [
                "446f360dc77b95c2"
            ]
        ]
    },
    {
        "id": "02349d4bc9b984be",
        "type": "http response",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2225.000244140625,
        "y": 345.0000305175781,
        "wires": []
    },
    {
        "id": "efd1edaafeccb15c",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "d4a8f3b2beda251e",
        "name": "check parameters",
        "func": "var payload = msg.payload;\n\nif (  payload.verification_code && payload.user_uuid ) {\n    msg.status = \"db_check\";\n} else {\n    msg.status = \"missing_data\";\n    msg.payload = JSON.stringify({\n            status: \"error\",\n            msg: \"something missing\"\n        });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 479.00013732910156,
        "y": 879.9999732971191,
        "wires": [
            [
                "9548a851e7bf9eb7"
            ]
        ]
    },
    {
        "id": "3497def59ce798a4",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "check parameters",
        "func": "var payload = msg.payload;\n\nif ( payload.email ) {\n    msg.status = \"db_check\";\n} else {\n    msg.status = \"missing_data\";\n    msg.payload = JSON.stringify({\n            status: \"error\",\n            msg: \"something missing\"\n        });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 403.0000915527344,
        "y": 405.00006103515625,
        "wires": [
            [
                "cc3dd8309af44d50"
            ]
        ]
    },
    {
        "id": "93958fc79e684d6d",
        "type": "postgresql",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "get user by email",
        "query": "SELECT * \nFROM users\nwhere email = lower('{{ msg.payload.email }}')\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 727.0000610351562,
        "y": 440,
        "wires": [
            [
                "b8d05169bfb0dddc"
            ]
        ]
    },
    {
        "id": "b8d05169bfb0dddc",
        "type": "switch",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 916.0000610351562,
        "y": 438.9999694824219,
        "wires": [
            [
                "ebf9051ea2762a3d"
            ],
            [
                "5d51b35ef4122398"
            ],
            [
                "1225ded49b840f79"
            ]
        ]
    },
    {
        "id": "1225ded49b840f79",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "email invalid",
        "func": "msg.payload = {\n    status: \"email_invalid\",\n    msg: \"email '\" + msg.origpayload.email + \"' is invalid\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1107,
        "y": 529,
        "wires": [
            [
                "03a21109f37626dd"
            ]
        ]
    },
    {
        "id": "ebf9051ea2762a3d",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "is email banned or deleted",
        "func": "var usr = msg.payload[0];\n\nif ( !usr.is_banned && usr.is_verified && !usr.is_deleted ) {\n    msg[\"status\"] = \"email_is_good\";\n    msg[\"userdata\"] = usr;\n} else {\n    var payload = {\n        status: \"email_banned\",\n        msg: \"email is no longer valid\",\n        email: usr.email\n    };\n\n    if (!usr.is_banned && !usr.is_verified && !usr.is_deleted) {\n        payload[\"status\"] = \"email_not_verified\";\n        payload[\"msg\"] = \"email not yet verified\";\n    };\n\n    msg = {\n        res: msg.res,\n        status: \"failed\",\n        payload: JSON.stringify(payload)\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1128.0000305175781,
        "y": 357.99993896484375,
        "wires": [
            [
                "1e6dc7c39a068dbd"
            ]
        ]
    },
    {
        "id": "1e6dc7c39a068dbd",
        "type": "switch",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "email_is_good",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "email_is_good",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1340.0000381469727,
        "y": 358.99993896484375,
        "wires": [
            [
                "ede0859338d0d387"
            ],
            [
                "03a21109f37626dd"
            ]
        ]
    },
    {
        "id": "ede0859338d0d387",
        "type": "postgresql",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "create login code",
        "query": "INSERT into user_login_codes(\n    user_uuid \n) values (\n   '{{#msg.payload}}{{ uuid }}{{/msg.payload}}'\n) \non conflict(user_uuid) do update set created_at = NOW()\nRETURNING user_uuid,code as verification_code\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1531.0001220703125,
        "y": 353,
        "wires": [
            [
                "90ac085396fb2c18",
                "44228ada72ceb79d"
            ]
        ]
    },
    {
        "id": "203ce94f2a893358",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "combine old and new payload",
        "func": "msg.payload = {\n    ...msg.payload[0], \n    ...msg.origpayload, \n    status: \"ok\",\n    firstname: msg.userdata.firstname,\n    lastname: msg.userdata.surname\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1966.0003662109375,
        "y": 347,
        "wires": [
            [
                "02349d4bc9b984be"
            ]
        ]
    },
    {
        "id": "a03bee39b0756632",
        "type": "catch",
        "z": "2516bfc49bf9ae93",
        "g": "60a1c4da6e59e3ec",
        "name": "",
        "scope": [
            "93958fc79e684d6d",
            "ede0859338d0d387",
            "0821c3a843f871b5",
            "be4d2a6f12c6513f",
            "9074f8ebc25080f5",
            "aba9c515a0325ee1",
            "c34c8e7915bd95b6"
        ],
        "uncaught": false,
        "x": 1790.0001220703125,
        "y": 145.99993705749512,
        "wires": [
            [
                "5833f6397db688a7"
            ]
        ]
    },
    {
        "id": "90ac085396fb2c18",
        "type": "switch",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1737.000244140625,
        "y": 353.0000305175781,
        "wires": [
            [
                "203ce94f2a893358"
            ],
            [
                "477b373107469586"
            ]
        ]
    },
    {
        "id": "5d51b35ef4122398",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "email does not exist",
        "func": "msg.payload = JSON.stringify({\n    status: \"does_not_exist\",\n    msg: \"email does not exist in database\"\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1125,
        "y": 440.00001525878906,
        "wires": [
            [
                "03a21109f37626dd"
            ]
        ]
    },
    {
        "id": "477b373107469586",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "error",
        "func": "msg.payload = {\n    status: \"error\",\n    msg: \"something went wrong\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1964.0001220703125,
        "y": 398.9999694824219,
        "wires": [
            [
                "02349d4bc9b984be"
            ]
        ]
    },
    {
        "id": "1bfdc0da48227ef4",
        "type": "http response",
        "z": "2516bfc49bf9ae93",
        "g": "d4a8f3b2beda251e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1507.0002746582031,
        "y": 778.9999828338623,
        "wires": []
    },
    {
        "id": "0821c3a843f871b5",
        "type": "postgresql",
        "z": "2516bfc49bf9ae93",
        "g": "d4a8f3b2beda251e",
        "name": "login code match?",
        "query": "UPDATE user_login_codes\nset email_sent_at = NOW()\nwhere user_uuid = '{{ msg.payload.user_uuid }}'\nand code = '{{ msg.payload.verification_code }}'\nreturning user_uuid\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 518.0001831054688,
        "y": 719.0000610351562,
        "wires": [
            [
                "bc6f311db20a63c7"
            ]
        ]
    },
    {
        "id": "bc6f311db20a63c7",
        "type": "switch",
        "z": "2516bfc49bf9ae93",
        "g": "d4a8f3b2beda251e",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 729.0001525878906,
        "y": 719.0000123977661,
        "wires": [
            [
                "be4d2a6f12c6513f"
            ],
            [
                "d0226d45d36d55bc"
            ],
            [
                "d0226d45d36d55bc"
            ]
        ]
    },
    {
        "id": "d0226d45d36d55bc",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "d4a8f3b2beda251e",
        "name": "invalid verification code",
        "func": "msg.payload = {\n    status: \"failed\",\n    msg: \"invalid verification code\"\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 975.0001831054688,
        "y": 776,
        "wires": [
            [
                "1bfdc0da48227ef4"
            ]
        ]
    },
    {
        "id": "be4d2a6f12c6513f",
        "type": "postgresql",
        "z": "2516bfc49bf9ae93",
        "g": "d4a8f3b2beda251e",
        "name": "obtain user data",
        "query": "SELECT * \nFROM users\nwhere uuid = '{{#msg.payload}}{{user_uuid}}{{/msg.payload}}'\n;\n",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 929.0001525878906,
        "y": 705.9999828338623,
        "wires": [
            [
                "439667fe99131c12"
            ]
        ]
    },
    {
        "id": "9074f8ebc25080f5",
        "type": "postgresql",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "delete user login code",
        "query": "DELETE from user_login_codes\nwhere email_sent_at > ( NOW() - '24 hours'::interval)\nand user_uuid = (select uuid from users where email = lower('{{ msg.payload.email }}'))\nand code = '{{ msg.payload.verification_code }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 785.0000610351562,
        "y": 1070.0001220703125,
        "wires": [
            [
                "b98ae8d5afee1880"
            ]
        ]
    },
    {
        "id": "83f103a7d31ccb62",
        "type": "http response",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1729.0002670288086,
        "y": 1109.000135421753,
        "wires": []
    },
    {
        "id": "b98ae8d5afee1880",
        "type": "switch",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "rowCount",
        "property": "pgsql.rowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 1014.0000610351562,
        "y": 1070.0001220703125,
        "wires": [
            [
                "aba9c515a0325ee1",
                "1544dae8d63aca25"
            ],
            [
                "f1b3bd72969b5002"
            ],
            [
                "f1b3bd72969b5002"
            ]
        ]
    },
    {
        "id": "f1b3bd72969b5002",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "verification code expired",
        "func": "msg.payload = {\n    status: \"failed\",\n    msg: \"login code expired\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1267.0001220703125,
        "y": 1110.0001831054688,
        "wires": [
            [
                "9cb207f48ed9960e",
                "83f103a7d31ccb62"
            ]
        ]
    },
    {
        "id": "9cb207f48ed9960e",
        "type": "postgresql",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "remove user login code",
        "query": "DELETE \nfrom user_login_codes\nwhere user_uuid = (select uuid from users where email = lower('{{ msg.origpayload.email }}'))\n  and code = '{{ msg.origpayload.verification_code }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1323.0001220703125,
        "y": 1161.0001220703125,
        "wires": [
            [
                "7318d990172eb62e"
            ]
        ]
    },
    {
        "id": "aba9c515a0325ee1",
        "type": "postgresql",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "update users table",
        "query": "update users\nset lastlogin_at = NOW()\nwhere email = lower('{{ msg.origpayload.email }}')\nRETURNING firstname, surname, uuid\n;\n",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1248.0001220703125,
        "y": 1056.0001239776611,
        "wires": [
            [
                "0c6574428120de57"
            ]
        ]
    },
    {
        "id": "0c6574428120de57",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "construct user data",
        "func": "var usr = msg.payload[0];\n\nmsg.payload = {\n    user: {\n        firstname: usr.firstname,\n        uuid:      usr.uuid,\n        surname:   usr.surname\n    },\n    status: \"ok\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1509.0001220703125,
        "y": 1057.0001220703125,
        "wires": [
            [
                "83f103a7d31ccb62"
            ]
        ]
    },
    {
        "id": "8fb5538bb33154af",
        "type": "link in",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "[api] login with email",
        "links": [
            "acbc887acc9963d3"
        ],
        "x": 229.43759155273438,
        "y": 405.8924865722656,
        "wires": [
            [
                "3497def59ce798a4"
            ]
        ]
    },
    {
        "id": "654a727d5e73414e",
        "type": "link in",
        "z": "2516bfc49bf9ae93",
        "g": "d4a8f3b2beda251e",
        "name": "[api] login with email send email",
        "links": [
            "9cccce993a7d460f"
        ],
        "x": 231.43759155273438,
        "y": 880.7778196334839,
        "wires": [
            [
                "efd1edaafeccb15c"
            ]
        ]
    },
    {
        "id": "317a9744536713d7",
        "type": "link in",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "[api] login verify login code",
        "links": [
            "b482c43545f18102"
        ],
        "x": 234.43759155273438,
        "y": 1186.77783203125,
        "wires": [
            [
                "6afa8272796e7f43"
            ]
        ]
    },
    {
        "id": "3d0187df697e8f6e",
        "type": "change",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origpayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 497.2500534057617,
        "y": 1255.888916015625,
        "wires": [
            [
                "6afa8272796e7f43"
            ]
        ]
    },
    {
        "id": "439667fe99131c12",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "d4a8f3b2beda251e",
        "name": "setup response, email data and login link",
        "func": "msg.user = msg.payload[0];\n\nvar encData = global.get(\"encrypt\")(JSON.stringify({\n    uu: msg.user.uuid,\n    vc: msg.origpayload.verification_code\n}));\n\nmsg.email = {\n    to_email: msg.payload[0].email,\n    data: {\n        loginLink: env.get(\"HOSTNAME_FRONTEND\") + \"/login?d=\" + encData\n    }\n};\n\nmsg.payload = JSON.stringify({\n    staus: \"ok\",\n    msg: \"email sent\"\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1204.32666015625,
        "y": 705.9903564453125,
        "wires": [
            [
                "1bfdc0da48227ef4",
                "204262a2d05ca231",
                "e265d3d510ea49aa"
            ]
        ]
    },
    {
        "id": "204262a2d05ca231",
        "type": "link out",
        "z": "2516bfc49bf9ae93",
        "g": "d4a8f3b2beda251e",
        "name": "link out 25",
        "mode": "link",
        "links": [
            "8629ac24837d3d2e"
        ],
        "x": 1480.0071964263916,
        "y": 706.4135413169861,
        "wires": []
    },
    {
        "id": "3723b83281660ef9",
        "type": "link in",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "[post] user login loginlink",
        "links": [
            "0b3e9d820c4adae1"
        ],
        "x": 234.43759155273438,
        "y": 1546.2225728034973,
        "wires": [
            [
                "cfe602b3d10df742"
            ]
        ]
    },
    {
        "id": "cfe602b3d10df742",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "check parameters",
        "func": "var payload = msg.payload;\n\nif ( payload.data ) {\n    msg.status = \"db_check\";\n} else {\n    msg.status = \"missing_data\";\n    msg.payload = JSON.stringify({\n            status: \"error\",\n            msg: \"something missing\"\n        });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 497.2500534057617,
        "y": 1545.1111149787903,
        "wires": [
            [
                "a3e54eb22c2d9f49"
            ]
        ]
    },
    {
        "id": "c34c8e7915bd95b6",
        "type": "postgresql",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "obtain email",
        "query": "select email\nfrom users\nwhere uuid = '{{ msg.datapayload.uu }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 497.2500534057617,
        "y": 1378.111183643341,
        "wires": [
            [
                "de153b8f12bc7251"
            ]
        ]
    },
    {
        "id": "de153b8f12bc7251",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "setup payload",
        "func": "\nmsg.payload = {\n    email: msg.payload[0].email,\n    verification_code: msg.datapayload.vc,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 497.2500534057617,
        "y": 1317.1112065315247,
        "wires": [
            [
                "3d0187df697e8f6e"
            ]
        ]
    },
    {
        "id": "5833f6397db688a7",
        "type": "subflow:d03c4820970ac189",
        "z": "2516bfc49bf9ae93",
        "g": "60a1c4da6e59e3ec",
        "name": "",
        "x": 1813.5,
        "y": 198.99999809265137,
        "wires": []
    },
    {
        "id": "70bf2ea93cda19b5",
        "type": "comment",
        "z": "2516bfc49bf9ae93",
        "g": "60a1c4da6e59e3ec",
        "name": "Catch all queries that are in an req-resp flow/loop",
        "info": "",
        "x": 1787,
        "y": 78.99999809265137,
        "wires": []
    },
    {
        "id": "446f360dc77b95c2",
        "type": "subflow:e8bbdc11f1fc0dd8",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "x": 497.2500534057617,
        "y": 1127.5,
        "wires": [
            [
                "376912a40c729007"
            ]
        ]
    },
    {
        "id": "a3e54eb22c2d9f49",
        "type": "subflow:e8bbdc11f1fc0dd8",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "",
        "x": 497.2500534057617,
        "y": 1489,
        "wires": [
            [
                "096adf76a5d36d1d"
            ]
        ]
    },
    {
        "id": "9548a851e7bf9eb7",
        "type": "subflow:e8bbdc11f1fc0dd8",
        "z": "2516bfc49bf9ae93",
        "g": "d4a8f3b2beda251e",
        "name": "",
        "x": 505.50006103515625,
        "y": 808.9999876022339,
        "wires": [
            [
                "0821c3a843f871b5"
            ]
        ]
    },
    {
        "id": "cc3dd8309af44d50",
        "type": "subflow:e8bbdc11f1fc0dd8",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "",
        "x": 468.5,
        "y": 456,
        "wires": [
            [
                "67073c8f9f9f3b50"
            ]
        ]
    },
    {
        "id": "03a21109f37626dd",
        "type": "http response",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1525,
        "y": 531,
        "wires": []
    },
    {
        "id": "67073c8f9f9f3b50",
        "type": "subflow:507161adae3ca528",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "",
        "x": 532.5,
        "y": 521,
        "wires": [
            [
                "93958fc79e684d6d"
            ],
            [
                "1225ded49b840f79"
            ]
        ]
    },
    {
        "id": "376912a40c729007",
        "type": "subflow:507161adae3ca528",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "",
        "x": 497.2500534057617,
        "y": 1078,
        "wires": [
            [
                "9074f8ebc25080f5"
            ],
            [
                "20490c0b9cd5409c"
            ]
        ]
    },
    {
        "id": "20490c0b9cd5409c",
        "type": "function",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "email invalid",
        "func": "msg.payload = {\n    status: \"email_invalid\",\n    msg: \"email '\" + msg.origpayload.email + \"' is invalid\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1132,
        "wires": [
            [
                "cf7c98415790bc48"
            ]
        ]
    },
    {
        "id": "cf7c98415790bc48",
        "type": "http response",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1027,
        "y": 1133,
        "wires": []
    },
    {
        "id": "096adf76a5d36d1d",
        "type": "subflow:d1100a08134ce3c4",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "",
        "x": 497.2500534057617,
        "y": 1436,
        "wires": [
            [
                "c34c8e7915bd95b6"
            ]
        ]
    },
    {
        "id": "7318d990172eb62e",
        "type": "link out",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "link out 48",
        "mode": "link",
        "links": [
            "737b6cbde56f6f01",
            "7e2c24a96b97805b"
        ],
        "x": 1498.5,
        "y": 1162,
        "wires": []
    },
    {
        "id": "1544dae8d63aca25",
        "type": "link out",
        "z": "2516bfc49bf9ae93",
        "g": "504b7dd5f4443187",
        "name": "link out 49",
        "mode": "link",
        "links": [
            "737b6cbde56f6f01",
            "7e2c24a96b97805b"
        ],
        "x": 1172.0000305175781,
        "y": 1019.0000219345093,
        "wires": []
    },
    {
        "id": "44228ada72ceb79d",
        "type": "link out",
        "z": "2516bfc49bf9ae93",
        "g": "d3257d5f7e78d0fd",
        "name": "link out 50",
        "mode": "link",
        "links": [
            "737b6cbde56f6f01",
            "7e2c24a96b97805b"
        ],
        "x": 1694.5,
        "y": 401,
        "wires": []
    },
    {
        "id": "e265d3d510ea49aa",
        "type": "link out",
        "z": "2516bfc49bf9ae93",
        "g": "d4a8f3b2beda251e",
        "name": "link out 55",
        "mode": "link",
        "links": [
            "737b6cbde56f6f01",
            "7e2c24a96b97805b"
        ],
        "x": 1481,
        "y": 670,
        "wires": []
    },
    {
        "id": "e601dab9e5205759",
        "type": "template",
        "z": "459c271a96458c7c",
        "name": "email html",
        "field": "email.html",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html><head>\n    <title>Bid'n'Buy Login Code</title>\n    <style type=\"text/css\">div{font-size:16px}</style>\n</head>\n<body>\n<div>Hi {{ user.firstname }} {{ user.surname }}!\n<p>\n  Enter this login code {{ origpayload.verification_code }}\n\n<p>\n  Or click <a href=\"{{ email.data.loginLink }}\">here</a> to login.\n<p>\n  - Your team @ Bid'n'Buy.club\n\n{{#email.data.dont}}\n<p>\nIf you consider this to be spam, our apologies. Please use our <a href=\"{{ spamMeLink }}\">no more email</a> link.\n{{/email.data.dont}}\n\n</div>\n</body>\n</html>\n",
        "output": "str",
        "x": 748.000244140625,
        "y": 294.1111030578613,
        "wires": [
            [
                "40429d0998b73836"
            ]
        ]
    },
    {
        "id": "7d6e9ff48bc8390a",
        "type": "template",
        "z": "459c271a96458c7c",
        "name": "email text",
        "field": "email.text",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Hi {{ msg.user.firstname }} {{ msg.user.surname }}!\n\nLogin Code {{ msg.origpayload.verification_code }}\n\nOr click on this link {{ msg.email.data.loginLink }}\n\nVery sincerely,\n\n- Your team @ Bid'n'Buy.club\n\n{{#email.data.dont}}\nIf you consider this to be spam, our apologies. Please use our no more email link: {{ spamMeLink }}\n{{/email.data.dont}}",
        "output": "str",
        "x": 758.000244140625,
        "y": 345.1613531112671,
        "wires": [
            [
                "e601dab9e5205759"
            ]
        ]
    },
    {
        "id": "836c73d8634ccb3d",
        "type": "change",
        "z": "459c271a96458c7c",
        "name": "Subject: Login Code",
        "rules": [
            {
                "t": "set",
                "p": "email.subject",
                "pt": "msg",
                "to": "[Bid'n'Buy Club] Login Code",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 718.000244140625,
        "y": 396.21160316467285,
        "wires": [
            [
                "7d6e9ff48bc8390a"
            ]
        ]
    },
    {
        "id": "8629ac24837d3d2e",
        "type": "link in",
        "z": "459c271a96458c7c",
        "name": "[Email] Send Login Code",
        "links": [
            "204262a2d05ca231"
        ],
        "x": 176.00015258789062,
        "y": 397.0036563873291,
        "wires": [
            [
                "93e97f3d36441ebf"
            ]
        ]
    },
    {
        "id": "3f837da97ff0e00b",
        "type": "template",
        "z": "459c271a96458c7c",
        "name": "email text",
        "field": "email.text",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Hi {{ user.firstname }} {{ user.surname }}!\n\nVerification Code {{ origpayload.verification_code }}\n\nAnd your verification link is {{ email.data.verifyLink }}\n\n- Your team @ Bid'n'Buy.club\n\n{{#email.data.dont}}\nIf you consider this to be spam, our apologies. Please use our no more email link: {{ spamMeLink }}\n{{/email.data.dont}}",
        "output": "str",
        "x": 758.000244140625,
        "y": 150.9439435005188,
        "wires": [
            [
                "7214adb078318a32"
            ]
        ]
    },
    {
        "id": "7214adb078318a32",
        "type": "template",
        "z": "459c271a96458c7c",
        "name": "email html",
        "field": "email.html",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html><head>\n    <title>Bid'n'Buy Verification to login</title>\n    <style type=\"text/css\">div{font-size:16px}</style>\n</head>\n<body>\n<div>Hi {{ user.firstname }} {{ user.surname }}!\n<p>\n  Verification Code {{ origpayload.verification_code }}\n\n<p>\n  Or click <a href=\"{{ email.data.verifyLink }}\">here</a> to verify your email.\n<p>\n  - Your team @ Bid'n'Buy.club\n\n{{#email.data.dont}}\n<p>\nIf you consider this to be spam, our apologies. Please use our <a href=\"{{ spamMeLink }}\">no more email</a> link.\n{{/email.data.dont}}\n\n</div>\n</body>\n</html>\n",
        "output": "str",
        "x": 748.000244140625,
        "y": 103.89857387542725,
        "wires": [
            [
                "40429d0998b73836"
            ]
        ]
    },
    {
        "id": "40429d0998b73836",
        "type": "link out",
        "z": "459c271a96458c7c",
        "name": "link out 26",
        "mode": "link",
        "links": [
            "dcd3c6b256468cfc"
        ],
        "x": 1182.903076171875,
        "y": 103.57589435577393,
        "wires": []
    },
    {
        "id": "5351c947bd9e66e8",
        "type": "change",
        "z": "459c271a96458c7c",
        "name": "Subject: Verification Email",
        "rules": [
            {
                "t": "set",
                "p": "email.subject",
                "pt": "msg",
                "to": "[Bid'n'Buy Club] Verify your Email",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 708.000244140625,
        "y": 197.98931312561035,
        "wires": [
            [
                "3f837da97ff0e00b"
            ]
        ]
    },
    {
        "id": "06c98db054f5e440",
        "type": "link in",
        "z": "459c271a96458c7c",
        "name": "[Mail] Verify Email",
        "links": [
            "449601abfe35007d"
        ],
        "x": 176.00015258789062,
        "y": 199.49663734436035,
        "wires": [
            [
                "a94909f63091b9d5"
            ]
        ]
    },
    {
        "id": "a8ef7f5ce412a29b",
        "type": "template",
        "z": "459c271a96458c7c",
        "name": "email text",
        "field": "email.text",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Hi There!\n\nYou have a new proposal waiting for you!\n\nYour email: {{ seller_email }}\n\nView the proposal here: {{ email.data.proposal_url }}\n\nInitial Bid: ${{ origpayload.amount }}\n\nDescription:\n\n{{ origpayload.description }}\n\nInitial Bidder: \n{{ origpayload.buyer_firstname }} {{ origpayload.buyer_surname }}, {{ email.cc_email }}\n\nBest Regards,\n  - Your team @ Bid'n'Buy.club\n\n\n{{#email.data.dont}}\nIf you consider this to be spam, our apologies. Please use our no more email link: {{ spamMeLink }}\n{{/email.data.dont}}",
        "output": "str",
        "x": 758.000244140625,
        "y": 688.1872472763062,
        "wires": [
            [
                "3a217eb3221f6dcb"
            ]
        ]
    },
    {
        "id": "198fef7f5f3cd4f9",
        "type": "change",
        "z": "459c271a96458c7c",
        "name": "Subject: New proposal email to seller",
        "rules": [
            {
                "t": "set",
                "p": "email.subject",
                "pt": "msg",
                "to": "[Bid'n'Buy Club] Someone has a new proposal for  you",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 668.000244140625,
        "y": 737.4758911132812,
        "wires": [
            [
                "a8ef7f5ce412a29b"
            ]
        ]
    },
    {
        "id": "3a217eb3221f6dcb",
        "type": "template",
        "z": "459c271a96458c7c",
        "name": "email html",
        "field": "email.html",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html><head>\n    <title>New Proposal for something you have!</title>\n    <style type=\"text/css\">div{font-size:16px}</style>\n</head>\n<body>\n\nHi There!\n<p>\n\n<h4>You have a new proposal waiting for you!</h4>\n\nYour Email:\n{{ seller_email }}\n\n<p>\n<a href=\"{{ email.data.proposal_url }}\">Click here to go to the proposal</a>.\n\n<p>\nInitial Amount:\n{{ origpayload.amount }}\n\n<p>\nDescription:\n<br><code>\n{{ origpayload.description }}\n</code>\n\n<p>\nInitial Bidder: \n<a href=\"mailto:{{ email.cc_email }}\">{{ origpayload.buyer_firstname }} {{ origpayload.buyer_surname }}</a>\n\n<p>\n  - Your team @ Bid'n'Buy.club\n\n{{#email.data.dont}}\n<p>\nIf you consider this to be spam, our apologies. Please use our <a href=\"{{ spamMeLink }}\">no more email</a> link.\n{{/email.data.dont}}\n\n</div>\n</body>\n</html>\n",
        "output": "str",
        "x": 748.000244140625,
        "y": 638.898603439331,
        "wires": [
            [
                "40429d0998b73836"
            ]
        ]
    },
    {
        "id": "f2430851bbcdd7ed",
        "type": "link in",
        "z": "459c271a96458c7c",
        "name": "[Mail] New Desire",
        "links": [
            "ca094f0bb98c6877"
        ],
        "x": 176.00015258789062,
        "y": 737.5001468658447,
        "wires": [
            [
                "02b343cbe4843018",
                "05feab6914a47d3a"
            ]
        ]
    },
    {
        "id": "f0b27ce10ba5c29d",
        "type": "template",
        "z": "459c271a96458c7c",
        "name": "email text",
        "field": "email.text",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Hi {{ email.data.buyer_firstnam }} {{ email.data.buyer_surname }}!\n\nCongratulations, the proposal has been accepted for your bid of ${{ email.data.bid_amount }}!\n\nProposal details:\n\n{{ email.data.description }}\n\nLink: {{ email.data.proposal_url }}\n\nHas been accepted for ${{ email.data.bid_amount }} by {{ email.data.seller_firstname }} {{ email.data.seller_surname }}\n\nEmail of {{ email.data.seller_firstname }} {{ email.data.seller_surname }} is {{ email.data.seller_email }}\n\n  - Your team @ Bid'n'Buy.club\n\n{{#email.data.dont}}\nIf you consider this to be spam, our apologies. Please use our no more email link: {{ spamMeLink }}\n{{/email.data.dont}}\n",
        "output": "str",
        "x": 758.000244140625,
        "y": 868.6873474121094,
        "wires": [
            [
                "1036243d96d76a08"
            ]
        ]
    },
    {
        "id": "32903e418ff4e6dd",
        "type": "change",
        "z": "459c271a96458c7c",
        "name": "Subject: Seller Accepted your Bid!",
        "rules": [
            {
                "t": "set",
                "p": "email.subject",
                "pt": "msg",
                "to": "[Bid'n'Buy Club] Proposal Fullfilled, Bid Accepted!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 678.000244140625,
        "y": 915.475959777832,
        "wires": [
            [
                "f0b27ce10ba5c29d"
            ]
        ]
    },
    {
        "id": "1036243d96d76a08",
        "type": "template",
        "z": "459c271a96458c7c",
        "name": "email html",
        "field": "email.html",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html><head>\n    <title>New Offer for something you have!</title>\n    <style type=\"text/css\">div{font-size:16px}</style>\n</head>\n<body>\n\nHi {{ email.data.buyer_firstnam }} {{ email.data.buyer_surname }}!\n<p>\n\nCongratulations, the <a href=\"{{ email.data.proposal_url }}\">proposal</a> has been accepted for your bid of <b>${{ email.data.bid_amount }}</b>!\n\n<p>\n\nDescription:\n<p>\n{{ email.data.description }}\n\n<p>\nYour bid  ${{ email.data.bid_amount }} was accepted by {{ email.data.seller_firstname }} {{ email.data.seller_surname }}\n\n<p>\nEmail <a href=\"mailto:{{ email.data.seller_email }}\">{{ email.data.seller_firstname }} {{ email.data.seller_surname }}</a> to arrange payment.\n\n<p>\n  - Your team @ Bid'n'Buy.club\n\n{{#email.data.dont}}\n<p>\nIf you consider this to be spam, our apologies. Please use our <a href=\"{{ spamMeLink }}\">no more email</a> link.\n{{/email.data.dont}}\n\n</div>\n</body>\n</html>\n",
        "output": "str",
        "x": 748.000244140625,
        "y": 821.8987350463867,
        "wires": [
            [
                "40429d0998b73836"
            ]
        ]
    },
    {
        "id": "5ed9028000aeb909",
        "type": "link in",
        "z": "459c271a96458c7c",
        "name": "[Email] Desire Accepted",
        "links": [
            "e012fb09e9897dda"
        ],
        "x": 176.00015258789062,
        "y": 915.5037307739258,
        "wires": [
            [
                "d118a6217f3e4c43"
            ]
        ]
    },
    {
        "id": "bdcc494cb8ebf1ca",
        "type": "template",
        "z": "459c271a96458c7c",
        "name": "email text",
        "field": "email.text",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Hi {{ origpayload.buyer_firstname }} {{ origpayload.buyer_surname }}!\n\nYour offer is online:\n\nView here: {{ email.data.proposal_url }}\n\nInitial Amount: {{ origpayload.amount }}\n\nDescription:\n{{ origpayload.description }}\n\nBest Regards,\n  - Your team @ Bid'n'Buy.club\n\n\n{{#email.data.dont}}\nIf you consider this to be spam, our apologies. Please use our no more email link: {{ spamMeLink }}\n{{/email.data.dont}}",
        "output": "str",
        "x": 758.000244140625,
        "y": 1035.903896331787,
        "wires": [
            [
                "0657b5c3d62ec842"
            ]
        ]
    },
    {
        "id": "0c8781797e5a2527",
        "type": "change",
        "z": "459c271a96458c7c",
        "name": "Subject: New offer email from seller",
        "rules": [
            {
                "t": "set",
                "p": "email.subject",
                "pt": "msg",
                "to": "[Bid'n'Buy Club] Your Offer has been created",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 678.000244140625,
        "y": 1176.5868492126465,
        "wires": [
            [
                "af968f4f7d18fc57"
            ]
        ]
    },
    {
        "id": "0657b5c3d62ec842",
        "type": "template",
        "z": "459c271a96458c7c",
        "name": "email html",
        "field": "email.html",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html><head>\n    <title>Your new offer is online!</title>\n    <style type=\"text/css\">div{font-size:16px}</style>\n</head>\n<body>\n\nHi {{ origpayload.buyer_firstname }} {{ origpayload.buyer_surname }}!\n<p>\n\n<h4>Your Offer has been created!</h4>\n\n<a href=\"{{ email.data.proposal_url }}\">Click here to view your offer</a>\n\n<p>\nInitial Bid: ${{ origpayload.amount }}\n\n<p>\nDescription:\n<br>\n<code>\n{{ origpayload.description }}\n</code>\n\n<p>\n  - Your team @ Bid'n'Buy.club\n\n{{#email.data.dont}}\n<p>\nIf you consider this to be spam, our apologies. Please use our <a href=\"{{ spamMeLink }}\">no more email</a> link.\n{{/email.data.dont}}\n\n</div>\n</body>\n</html>\n",
        "output": "str",
        "x": 748.000244140625,
        "y": 989.009578704834,
        "wires": [
            [
                "40429d0998b73836"
            ]
        ]
    },
    {
        "id": "af968f4f7d18fc57",
        "type": "change",
        "z": "459c271a96458c7c",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "email.cc_email",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 698.000244140625,
        "y": 1129.6925315856934,
        "wires": [
            [
                "243cae3ecf54af9f"
            ]
        ]
    },
    {
        "id": "931368786f4e0469",
        "type": "link in",
        "z": "459c271a96458c7c",
        "name": "[Mail] New Offer",
        "links": [
            "6f917b0db380531d"
        ],
        "x": 176.00015258789062,
        "y": 1176.500057220459,
        "wires": [
            [
                "0c8781797e5a2527"
            ]
        ]
    },
    {
        "id": "02b343cbe4843018",
        "type": "subflow:1f6116ea2b105a8b",
        "z": "459c271a96458c7c",
        "x": 365.0589904785156,
        "y": 737.5001468658447,
        "wires": [
            [
                "198fef7f5f3cd4f9"
            ]
        ]
    },
    {
        "id": "93e97f3d36441ebf",
        "type": "subflow:1f6116ea2b105a8b",
        "z": "459c271a96458c7c",
        "name": "",
        "x": 365.0589904785156,
        "y": 397.0036563873291,
        "wires": [
            [
                "836c73d8634ccb3d"
            ]
        ]
    },
    {
        "id": "a94909f63091b9d5",
        "type": "subflow:1f6116ea2b105a8b",
        "z": "459c271a96458c7c",
        "name": "",
        "x": 365.0589904785156,
        "y": 199.49663734436035,
        "wires": [
            [
                "5351c947bd9e66e8"
            ]
        ]
    },
    {
        "id": "d118a6217f3e4c43",
        "type": "subflow:1f6116ea2b105a8b",
        "z": "459c271a96458c7c",
        "name": "",
        "x": 365.0589904785156,
        "y": 915.5037307739258,
        "wires": [
            [
                "32903e418ff4e6dd"
            ]
        ]
    },
    {
        "id": "243cae3ecf54af9f",
        "type": "subflow:1f6116ea2b105a8b",
        "z": "459c271a96458c7c",
        "name": "",
        "x": 718.000244140625,
        "y": 1082.7982139587402,
        "wires": [
            [
                "bdcc494cb8ebf1ca"
            ]
        ]
    },
    {
        "id": "e9ee732c2a2e4208",
        "type": "template",
        "z": "459c271a96458c7c",
        "name": "email text",
        "field": "email.text",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Dear Moderator!\n\nGPT has denied a desire, please moderate:\n\nView the desire here: {{ email.data.proposal_url }}\n\nDescription:\n\n{{ email.data.text }}\n\nCreator: \n{{ origpayload.buyer_firstname }} {{ origpayload.buyer_surname }}\n{{ origpayload.buyer_uuid }}\n\nOpenAI Rating:\n\nappropriateness: {{email.data.openai_rating.appropriateness }}\nReason: {{email.data.openai_rating.reason }}\n\nBest Regards,\n  - Your team @ Bid'n'Buy.club\n",
        "output": "str",
        "x": 758.000244140625,
        "y": 1394.7985458374023,
        "wires": [
            [
                "59f671ccd91e7137"
            ]
        ]
    },
    {
        "id": "ba5fbf3374f9ea4e",
        "type": "change",
        "z": "459c271a96458c7c",
        "name": "Subject: [admin] proposal moderation",
        "rules": [
            {
                "t": "set",
                "p": "email.subject",
                "pt": "msg",
                "to": "[Bid'n'Buy Club] [admin] proposal moderation",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 668.000244140625,
        "y": 1442.5871410369873,
        "wires": [
            [
                "e9ee732c2a2e4208"
            ]
        ]
    },
    {
        "id": "59f671ccd91e7137",
        "type": "template",
        "z": "459c271a96458c7c",
        "name": "email html",
        "field": "email.html",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html><head>\n    <title>Proposal moderation</title>\n    <style type=\"text/css\">div{font-size:16px}</style>\n</head>\n<body>\n\nDear Moderator!\n<p>\n\nGPT has denied a proposal, please moderate:\n<p>\n\n<a href=\"{{ email.data.proposal_url }}\">View the proposal here</a>\n<p>\nDescription:<br>\n<code>\n{{ email.data.text }}\n</code>\n\n<p>\nCreator: \n<a href=\"{{ email.data.buyer_url }}\">{{ origpayload.buyer_firstname }} {{ origpayload.buyer_surname }}</a>\n\n<p>\nOpenAI Rating:\n<p>\n\nappropriateness: {{email.data.openai_rating.appropriateness }}\n<br>\nReason:<br> \n<code>\n{{email.data.openai_rating.reason }}\n</code>\n\n<p>\nBest Regards,<br>\n  - Your team @ Bid'n'Buy.club\n\n</div>\n</body>\n</html>\n",
        "output": "str",
        "x": 748.000244140625,
        "y": 1347.0099506378174,
        "wires": [
            [
                "40429d0998b73836"
            ]
        ]
    },
    {
        "id": "9d6d928cef3e0e38",
        "type": "link in",
        "z": "459c271a96458c7c",
        "name": "[Mail] [admin] proposal moderation",
        "links": [
            "25546edb290898bc"
        ],
        "x": 176.00015258789062,
        "y": 1444.6114921569824,
        "wires": [
            [
                "ba5fbf3374f9ea4e"
            ]
        ]
    },
    {
        "id": "05feab6914a47d3a",
        "type": "subflow:1d3e4db6ecdf8e95",
        "z": "459c271a96458c7c",
        "name": "TODO add link to signup page with their email",
        "x": 445.0589904785156,
        "y": 590.1112756729126,
        "wires": []
    },
    {
        "id": "8f0dc59eb139a4cf",
        "type": "postgresql",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "",
        "query": "INSERT into USERS(\n    firstname,\n    surname,\n    email\n) values (\n    '{{ msg.payload.firstname }}',\n    '{{ msg.payload.surname }}',\n    '{{ msg.payload.email }}'\n) RETURNING ID\n;\n",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 990,
        "y": 200,
        "wires": [
            [
                "902beb68c01d6246"
            ]
        ]
    },
    {
        "id": "0462f7b72940d0a9",
        "type": "ui_form",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "Create User",
        "label": "",
        "group": "5e8b4fbda54ed064",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Firstname",
                "value": "firstname",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Surname",
                "value": "surname",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Email",
                "value": "email",
                "type": "email",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "firstname": "",
            "surname": "",
            "email": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "data",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 827.9999389648438,
        "y": 133.0000514984131,
        "wires": [
            [
                "8f0dc59eb139a4cf"
            ]
        ]
    },
    {
        "id": "22182d7be0c80c0e",
        "type": "ui_toast",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1570,
        "y": 200,
        "wires": []
    },
    {
        "id": "902beb68c01d6246",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "showSuccessNotification",
        "func": "if (msg.pgsql && msg.pgsql.command == \"DELETE\" && msg.pgsql.rowCount == 1) {\n    return { payload: \"User deleted\" }\n} \n\nif ( msg.pgsql && msg.pgsql.command == \"INSERT\" && msg.pgsql.rowCount == 1 ) {\n    return { payload: \"User created\"}\n} \n\nif (msg.pgsql && msg.pgsql.command == \"UPDATE\" && msg.pgsql.rowCount == 1) {\n    return { payload: \"User updated\" }\n} \nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 200,
        "wires": [
            [
                "22182d7be0c80c0e",
                "bfe609ba4f6a152f",
                "a018172b1fe6f68a"
            ]
        ]
    },
    {
        "id": "81ecd9b5fe5f3892",
        "type": "catch",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "",
        "scope": [
            "8f0dc59eb139a4cf",
            "58648c3b1b52f1cf",
            "c2d436860ee431d0"
        ],
        "uncaught": false,
        "x": 1010,
        "y": 100,
        "wires": [
            [
                "d3d212b6abc4e02b"
            ]
        ]
    },
    {
        "id": "afd96a634618faa8",
        "type": "ui_toast",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "position": "top right",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1380,
        "y": 100,
        "wires": []
    },
    {
        "id": "d3d212b6abc4e02b",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "prepare payload",
        "func": "return { payload: \"Failed to create user: \" + msg.error.message }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1178,
        "y": 100,
        "wires": [
            [
                "afd96a634618faa8"
            ]
        ]
    },
    {
        "id": "35c596a6f158a7e7",
        "type": "ui_list",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "group": "fd345b66c3ade413",
        "name": "listOfUSers",
        "order": 1,
        "width": 6,
        "height": 5,
        "lineType": "two",
        "actionType": "menu",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 568.0000457763672,
        "y": 281.00011253356934,
        "wires": [
            [
                "41255aa77882f033"
            ]
        ]
    },
    {
        "id": "c2d436860ee431d0",
        "type": "postgresql",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "get all users",
        "query": "select * from users;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 369.00018310546875,
        "y": 176.0001678466797,
        "wires": [
            [
                "427c086cd5cc6cb9"
            ]
        ]
    },
    {
        "id": "427c086cd5cc6cb9",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "prepareForUiList",
        "func": "var payload = [];\n\nfor ( var idx = 0; idx < msg.payload.length ; idx ++ ) {\n    payload[idx] = {\n        icon_name: \"fa-user\",\n        title: \"\" + msg.payload[idx].firstname + \" \" + msg.payload[idx].surname,\n        description: msg.payload[idx].email,\n        id: msg.payload[idx].id,\n        menu: [\n            \"delete\",\n            \"edit\",\n            \"authenticate\",\n            \"banned\",\n            \"verified\"\n        ]\n    }\n    if ( msg.payload[idx].is_banned) {\n        payload[idx].icon_name = \"fa-user-secret\";\n        payload[idx].menu = [ \"unban\", \"edit\" ];\n    }\n    if (msg.payload[idx].is_deleted) {\n        payload[idx].icon_name = \"fa-user-times\";\n        payload[idx].menu = [\"edit\"];\n    }\n}\nreturn { payload: payload }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 334.0000534057617,
        "y": 281.00002574920654,
        "wires": [
            [
                "35c596a6f158a7e7"
            ]
        ]
    },
    {
        "id": "41255aa77882f033",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "actionHandler",
        "func": "if (msg.payload.selected == \"delete\" ) {\n  return {\n    query: \"update users set is_deleted = true, deleted_at = now() where id = \" + msg.payload.id \n  }\n}\n\nif (msg.payload.selected == \"banned\") {\n  return {\n    query: \"update users set is_banned = true, banned_at = now() where id = \" + msg.payload.id \n  }\n}\n\nif (msg.payload.selected == \"unban\") {\n  return {\n    query: \"update users set is_banned = false, banned_at = null where id = \" + msg.payload.id\n  }\n}\n\nif (msg.payload.selected == \"verified\") {\n  return {\n    query: \"update users set is_verified = true, verified_at = NOW() where id = \" + msg.payload.id\n  }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 280,
        "wires": [
            [
                "58648c3b1b52f1cf"
            ]
        ]
    },
    {
        "id": "58648c3b1b52f1cf",
        "type": "postgresql",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "",
        "query": "select * from users;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 990,
        "y": 280,
        "wires": [
            [
                "902beb68c01d6246"
            ]
        ]
    },
    {
        "id": "bfe609ba4f6a152f",
        "type": "link out",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "483e8bb1a90f48a1",
            "356d762a62241606"
        ],
        "x": 1495,
        "y": 240,
        "wires": []
    },
    {
        "id": "015ab92693f0a24d",
        "type": "link in",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "link in 3",
        "links": [
            "a018172b1fe6f68a"
        ],
        "x": 205,
        "y": 174,
        "wires": [
            [
                "c2d436860ee431d0"
            ]
        ]
    },
    {
        "id": "a018172b1fe6f68a",
        "type": "link out",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "015ab92693f0a24d"
        ],
        "x": 1495,
        "y": 160,
        "wires": []
    },
    {
        "id": "9982295af1f573f4",
        "type": "ui_form",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "",
        "label": "",
        "group": "9562b271e8019727",
        "order": 5,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Description",
                "value": "desc",
                "type": "multiline",
                "required": true,
                "rows": 3
            },
            {
                "label": "Initial Bid",
                "value": "init_bid",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "desc": "",
            "init_bid": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "formdata",
        "topicType": "str",
        "splitLayout": "",
        "className": "",
        "x": 617,
        "y": 675,
        "wires": [
            [
                "26100e42e72fdc37"
            ]
        ]
    },
    {
        "id": "9d451601e482c221",
        "type": "ui_dropdown",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "Bidder",
        "label": "Bidder",
        "tooltip": "",
        "place": "Select option",
        "group": "9562b271e8019727",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "buyer",
        "topicType": "str",
        "className": "",
        "x": 621.0000076293945,
        "y": 598.999981880188,
        "wires": [
            [
                "26100e42e72fdc37"
            ]
        ]
    },
    {
        "id": "aba5b9d7747dc5eb",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "prepare user list",
        "func": "var rVal = [];\n\nfor ( var idx = 0; idx < msg.payload.length ; idx++) {\n    var userName = msg.payload[idx].firstname + \" \" + msg.payload[idx].surname; \n    rVal[idx] = { };\n    rVal[idx][userName] = msg.payload[idx].id;\n};\nreturn { options: rVal };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 432.99999618530273,
        "y": 598.9999418258667,
        "wires": [
            [
                "9d451601e482c221",
                "940b3f7c9665a187"
            ]
        ]
    },
    {
        "id": "617d23a2a3eef7e6",
        "type": "postgresql",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "get all users",
        "query": "SELECT * \nFROM users\nwhere is_banned = false \nand is_deleted = false;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 382.0000343322754,
        "y": 535.9999380111694,
        "wires": [
            [
                "aba5b9d7747dc5eb"
            ]
        ]
    },
    {
        "id": "356d762a62241606",
        "type": "link in",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "link in 4",
        "links": [
            "bfe609ba4f6a152f"
        ],
        "x": 248.9999942779541,
        "y": 561.999924659729,
        "wires": [
            [
                "617d23a2a3eef7e6"
            ]
        ]
    },
    {
        "id": "26100e42e72fdc37",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "collate form and dropdown data",
        "func": "context.data = context.data || {};\n\nif ( msg.topic == \"seller\" ) { context.data.seller_id = msg.payload };\nif ( msg.topic == \"buyer\") { context.data.buyer_id = msg.payload };\nif ( msg.topic == \"formdata\") { context.data.fd = msg.payload };\n\nif (context.data.fd && (context.data.buyer_id || global.get(\"last_auction_buyer_id\")) && (context.data.seller_id || global.get(\"last_auction_seller_id\")) ) {\n    global.set(\"last_auction_buyer_id\", context.data.buyer_id || global.get(\"last_auction_buyer_id\"));\n    global.set(\"last_auction_seller_id\", context.data.seller_id || global.get(\"last_auction_seller_id\"));\n    var rval = { \n        payload: { \n            buyer_id: global.get(\"last_auction_buyer_id\"),\n            seller_id: global.get(\"last_auction_seller_id\"),\n            ...context.data.fd\n        }\n    };\n    context.data = {};\n    \n    return rval;\n} else return null;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 873,
        "y": 676.0000610351562,
        "wires": [
            [
                "55913cb5e2ed748d"
            ]
        ]
    },
    {
        "id": "8361dbb521dd281c",
        "type": "postgresql",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "",
        "query": "INSERT into auctions(\n   id_users,\n   seller_id,\n   text,\n   is_approved,\n   approved_at\n) values (\n   {{ msg.payload.buyer_id }},\n   {{ msg.payload.seller_id }},\n   '{{ msg.payload.desc }}',\n   TRUE,\n   NOW()\n) returning ID, uuid, id_users, text\n;\n",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 933,
        "y": 574.000244140625,
        "wires": [
            [
                "267d4e8a16500632"
            ]
        ]
    },
    {
        "id": "1eee208459d3e9d7",
        "type": "postgresql",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "store initial bid",
        "query": "INSERT INTO bids(\n  id_auctions,\n  amount,\n  id_users\n) values (\n  {{#msg.payload}}{{ id }}{{/msg.payload}},\n  {{ msg.formdata.init_bid }},\n  {{#msg.payload}}{{ id_users }}{{/msg.payload}}\n);",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 923,
        "y": 467.88897705078125,
        "wires": [
            [
                "14ecd16dd8b338a3"
            ]
        ]
    },
    {
        "id": "d363ec3aafb229ea",
        "type": "comment",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "Create user interface",
        "info": "",
        "x": 240,
        "y": 340,
        "wires": []
    },
    {
        "id": "2076ca3b9ab9c30c",
        "type": "comment",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "Create proposals interface",
        "info": "",
        "x": 250.5555648803711,
        "y": 678.9999494552612,
        "wires": []
    },
    {
        "id": "940b3f7c9665a187",
        "type": "ui_dropdown",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "Seller",
        "label": "Seller",
        "tooltip": "",
        "place": "Select option",
        "group": "9562b271e8019727",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "seller",
        "topicType": "str",
        "className": "",
        "x": 620.5555076599121,
        "y": 532.777756690979,
        "wires": [
            [
                "26100e42e72fdc37"
            ]
        ]
    },
    {
        "id": "1aeccb27b0a5c4aa",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "prepare payload",
        "func": "var obj = msg.payload[0];\n\nmsg.payload = {\n    text: obj.text,\n    amount: parseInt(obj.amount),\n    approp: obj.openai_rating.appropriateness,\n    reason: obj.openai_rating.reason,\n    uuid: obj.auction_uuid\n};\n\nflow.set(msg.socketid,obj.id)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760.4454345703125,
        "y": 903.9625244140625,
        "wires": [
            [
                "7ef5ca61c569f0d5",
                "77655db02d6db197"
            ]
        ]
    },
    {
        "id": "c434bb84aa6f6c93",
        "type": "ui_ui_control",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "",
        "events": "all",
        "x": 207.44129943847656,
        "y": 902.8651123046875,
        "wires": [
            [
                "ee56f7e9bb304954"
            ]
        ]
    },
    {
        "id": "ee56f7e9bb304954",
        "type": "switch",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "Which Tab?",
        "property": "tab",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "UNKNOWN",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 408.4518737792969,
        "y": 953.0489501953125,
        "wires": [
            [
                "e8402726b2b5b523"
            ],
            [
                "996057881aef42e7"
            ]
        ]
    },
    {
        "id": "e8402726b2b5b523",
        "type": "postgresql",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "",
        "query": "SELECT a.*, b.* , a.uuid as auction_uuid\nFROM auctions a\nleft join bids b on b.id_auctions = a.id\nwhere a.uuid = '{{ msg.params.pu }}'\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 575.441162109375,
        "y": 845.1187133789062,
        "wires": [
            [
                "1aeccb27b0a5c4aa"
            ]
        ]
    },
    {
        "id": "62fdb9df2c66d23b",
        "type": "catch",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "",
        "scope": [
            "e8402726b2b5b523"
        ],
        "uncaught": false,
        "x": 634.4444618225098,
        "y": 822.2989660293579,
        "wires": [
            []
        ]
    },
    {
        "id": "996057881aef42e7",
        "type": "subflow:1d3e4db6ecdf8e95",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "TODO do user admin interface",
        "x": 660.4374389648438,
        "y": 1036.88916015625,
        "wires": []
    },
    {
        "id": "22342a073df130e2",
        "type": "ui_toast",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "position": "top right",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1516,
        "y": 1057,
        "wires": []
    },
    {
        "id": "328e0d5e791d6d58",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "prepare message",
        "func": "msg.payload = \"Offer has been declined\";\nmsg.topic = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1465,
        "y": 1003,
        "wires": [
            [
                "22342a073df130e2"
            ]
        ]
    },
    {
        "id": "7ef5ca61c569f0d5",
        "type": "ui_form",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "",
        "label": "Auction Detail",
        "group": "4b03d779e67bc094",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Auction Description",
                "value": "text",
                "type": "multiline",
                "required": true,
                "rows": 3
            },
            {
                "label": "Uuid",
                "value": "uuid",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "OpenAI Approp",
                "value": "approp",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "OpenAI Reason",
                "value": "reason",
                "type": "multiline",
                "required": true,
                "rows": 3
            },
            {
                "label": "Amount",
                "value": "amount",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Reason",
                "value": "operator_reason",
                "type": "multiline",
                "required": true,
                "rows": 3
            }
        ],
        "formValue": {
            "text": "",
            "uuid": "",
            "approp": "",
            "reason": "",
            "amount": "",
            "operator_reason": ""
        },
        "payload": "",
        "submit": "Accept",
        "cancel": "",
        "topic": "payload.uuid",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 1004,
        "y": 903,
        "wires": [
            [
                "bc1bc0423476a106"
            ]
        ]
    },
    {
        "id": "77655db02d6db197",
        "type": "ui_button",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "",
        "group": "4b03d779e67bc094",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Decline",
        "tooltip": "",
        "color": "white",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 989,
        "y": 961,
        "wires": [
            [
                "63207e563560524b"
            ]
        ]
    },
    {
        "id": "26aad223c49537a6",
        "type": "sqlbuilder",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "approved_query",
        "field": "query",
        "fieldType": "msg",
        "sqldialect": "postgresql",
        "sqlquery": "query(\"auctions\")\n.where( 'id', msg.auction_id)\n.update({\n    approved_at: \"NOW()\",\n    is_approved: true,\n    approved_by: 'human',\n    openai_rating: JSON.stringify({reason: msg.payload.operator_reason})\n\n})\n.returning([\"is_approved\", \"uuid\"])",
        "x": 1246,
        "y": 848,
        "wires": [
            [
                "d1a15ec2ccfe0828"
            ]
        ]
    },
    {
        "id": "8b0921d4668667d5",
        "type": "sqlbuilder",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "declined",
        "field": "query",
        "fieldType": "msg",
        "sqldialect": "postgresql",
        "sqlquery": "query(\"auctions\")\n.where( 'id', msg.auction_id)\n.update({\n    is_banned: true,\n    banned_at: \"NOW()\",\n    openai_rating: JSON.stringify({ reason: \"human declied\"})\n})\n.returning(['is_approved','uuid','text','openai_rating'])\n",
        "x": 1216.5,
        "y": 1010,
        "wires": [
            [
                "3face932f6bf1025"
            ]
        ]
    },
    {
        "id": "d1a15ec2ccfe0828",
        "type": "postgresql",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "execute update",
        "query": "",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1298.0001220703125,
        "y": 902,
        "wires": [
            [
                "d39dd363ec9b67c2"
            ]
        ]
    },
    {
        "id": "d39dd363ec9b67c2",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "prepare msg",
        "func": "msg.topic = null;\n\nmsg.data = { proposal_uuid: msg.payload[0].uuid };\n\nmsg.payload = \"Auction has been Accepted\";\n\nmsg.query = undefined;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1474,
        "y": 842,
        "wires": [
            [
                "a981750927566068",
                "f0774bef9d00f5f8"
            ]
        ]
    },
    {
        "id": "a981750927566068",
        "type": "ui_toast",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "position": "top right",
        "displayTime": "3",
        "highlight": "green",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1528,
        "y": 901,
        "wires": []
    },
    {
        "id": "3face932f6bf1025",
        "type": "postgresql",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "execute update",
        "query": "",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1286,
        "y": 1058,
        "wires": [
            [
                "328e0d5e791d6d58"
            ]
        ]
    },
    {
        "id": "bc1bc0423476a106",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "set auction_id",
        "func": "msg.auction_id  = flow.get(msg.socketid);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1005,
        "y": 852,
        "wires": [
            [
                "26aad223c49537a6"
            ]
        ]
    },
    {
        "id": "63207e563560524b",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "set auction_id",
        "func": "msg.auction_id  = flow.get(msg.socketid);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1009,
        "y": 1010,
        "wires": [
            [
                "8b0921d4668667d5"
            ]
        ]
    },
    {
        "id": "f0774bef9d00f5f8",
        "type": "link out",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "link out 46",
        "mode": "link",
        "links": [
            "1e2388d383864efe"
        ],
        "x": 1585,
        "y": 812,
        "wires": []
    },
    {
        "id": "14ecd16dd8b338a3",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "prepare msg",
        "func": "msg.topic = null;\n\nmsg.data = { proposal_uuid: msg.auctiondata.uuid };\n\nmsg.payload = \"Auction has been created\";\n\nmsg.query = undefined;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 468,
        "wires": [
            [
                "60387e3f38f43a7e",
                "72139a0b66411c7d"
            ]
        ]
    },
    {
        "id": "60387e3f38f43a7e",
        "type": "ui_toast",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "position": "top right",
        "displayTime": "3",
        "highlight": "green",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1327,
        "y": 469,
        "wires": []
    },
    {
        "id": "72139a0b66411c7d",
        "type": "link out",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "link out 47",
        "mode": "link",
        "links": [
            "1e2388d383864efe"
        ],
        "x": 1256,
        "y": 545,
        "wires": []
    },
    {
        "id": "267d4e8a16500632",
        "type": "change",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "auctiondata",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 903,
        "y": 522.8888549804688,
        "wires": [
            [
                "1eee208459d3e9d7"
            ]
        ]
    },
    {
        "id": "55913cb5e2ed748d",
        "type": "change",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "formdata",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 913,
        "y": 626.8888549804688,
        "wires": [
            [
                "8361dbb521dd281c"
            ]
        ]
    },
    {
        "id": "e7f3d55d9028d72e",
        "type": "comment",
        "z": "00143787a55e03a5",
        "g": "9a7e3b9084800623",
        "name": "Moderate New Auction",
        "info": "",
        "x": 240,
        "y": 794,
        "wires": []
    },
    {
        "id": "ad95b7c23bc081b2",
        "type": "ui_ui_control",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "",
        "events": "all",
        "x": 205,
        "y": 458,
        "wires": [
            [
                "e7c96a450a0040c4"
            ]
        ]
    },
    {
        "id": "e7c96a450a0040c4",
        "type": "switch",
        "z": "00143787a55e03a5",
        "g": "e46283f84261872b",
        "name": "Which tab?",
        "property": "tab",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 370.0105743408203,
        "y": 458.183837890625,
        "wires": [
            [
                "617d23a2a3eef7e6"
            ]
        ]
    },
    {
        "id": "e7b2f3a5248841af",
        "type": "ui_ui_control",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "",
        "events": "all",
        "x": 199,
        "y": 86,
        "wires": [
            [
                "2b1d3baee3a695de"
            ]
        ]
    },
    {
        "id": "2b1d3baee3a695de",
        "type": "switch",
        "z": "00143787a55e03a5",
        "g": "285456a9074fb49a",
        "name": "Which tab?",
        "property": "tab",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 357.0105895996094,
        "y": 85.183837890625,
        "wires": [
            [
                "c2d436860ee431d0"
            ]
        ]
    },
    {
        "id": "3c825aa2e9cd68ce",
        "type": "postgresql",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "name": "",
        "query": "SELECT \n  u.id,\n  u.email,\n  u.firstname,\n  u.surname,\n  lc.code,\n  lc.created_at,\n  lc.email_sent_at \nFROM \n  user_login_codes lc\n  left join users u on u.uuid = lc.user_uuid\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 374.5,
        "y": 1369.5,
        "wires": [
            [
                "e399b6bc1db99588"
            ]
        ]
    },
    {
        "id": "90cc1a35eeb85685",
        "type": "ui_template",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "group": "e74287b60578698c",
        "name": "Login Code",
        "order": 1,
        "width": 10,
        "height": 4,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 937.5,
        "y": 1373.5,
        "wires": [
            []
        ]
    },
    {
        "id": "ee12a63c7de13f9c",
        "type": "switch",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "name": "Which tab?",
        "property": "tab",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 373,
        "y": 1272,
        "wires": [
            [
                "3c825aa2e9cd68ce",
                "72a457707489e79f"
            ]
        ]
    },
    {
        "id": "35eae47b0d9ee531",
        "type": "ui_ui_control",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "name": "",
        "events": "all",
        "x": 207.9894256591797,
        "y": 1271.816162109375,
        "wires": [
            [
                "ee12a63c7de13f9c"
            ]
        ]
    },
    {
        "id": "e2fbfcf097ae91c0",
        "type": "template",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h2>User Login Codes</h2>\n\n<table border=1>\n    <thead>\n        <tr>\n            <th>Firstname</th>\n            <th>Surname</th>\n            <th>email</th>\n            <th>Login Code</th>\n            <th>Created At</th>\n            <th>Email sent at</th>\n        </tr>\n    </thead>\n    <tbody>\n{{#payload}}\n    <tr>\n        <td>{{ firstname }}</td>\n        <td>{{ surname }}</td>\n        <td>{{ email }}</td>\n        <td>{{ code }}</td>\n        <td>{{ created_at }}</td>\n        <td>{{ email_sent_at }}</td>\n    </tr>\n{{/payload}}\n    </tbody>\n</table>",
        "output": "str",
        "x": 763.5,
        "y": 1373.5,
        "wires": [
            [
                "90cc1a35eeb85685"
            ]
        ]
    },
    {
        "id": "737b6cbde56f6f01",
        "type": "link in",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "name": "[admin] update login code list",
        "links": [
            "7318d990172eb62e",
            "1544dae8d63aca25",
            "44228ada72ceb79d",
            "e265d3d510ea49aa"
        ],
        "x": 219.5,
        "y": 1369.5,
        "wires": [
            [
                "3c825aa2e9cd68ce"
            ]
        ]
    },
    {
        "id": "dde74b3e1105a2ad",
        "type": "ui_template",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "group": "e74287b60578698c",
        "name": "Verification Code",
        "order": 2,
        "width": 10,
        "height": 4,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 957,
        "y": 1438,
        "wires": [
            []
        ]
    },
    {
        "id": "227b6fa7c9229524",
        "type": "template",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h2>Email Verification Codes</h2>\n\n<table border=1>\n    <thead>\n        <tr>\n            <th>Firstname</th>\n            <th>Surname</th>\n            <th>email</th>\n            <th>Verification Code</th>\n            <th>Created At</th>\n            <th>Email sent at</th>\n        </tr>\n    </thead>\n    <tbody>\n{{#payload}}\n    <tr>\n        <td>{{ firstname }}</td>\n        <td>{{ surname }}</td>\n        <td>{{ email }}</td>\n        <td>{{ code }}</td>\n        <td>{{ created_at }}</td>\n        <td>{{ email_sent_at }}</td>\n    </tr>\n{{/payload}}\n    </tbody>\n</table>",
        "output": "str",
        "x": 763,
        "y": 1438,
        "wires": [
            [
                "dde74b3e1105a2ad"
            ]
        ]
    },
    {
        "id": "72a457707489e79f",
        "type": "postgresql",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "name": "",
        "query": "SELECT \n  u.id,\n  u.email,\n  u.firstname,\n  u.surname,\n  lc.code,\n  lc.created_at,\n  lc.email_sent_at \nFROM \n  user_verification lc\n  left join users u on u.uuid = lc.user_uuid\n;",
        "postgreSQLConfig": "85672f28419095b4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 1435,
        "wires": [
            [
                "09037520c8a8c909"
            ]
        ]
    },
    {
        "id": "0a8b1a95c8e544b9",
        "type": "link in",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "name": "[admin] update verification code list",
        "links": [
            "47622d5e4883fe3e",
            "18ac95e19d551495",
            "940608463c098d67",
            "6354755fd1859629"
        ],
        "x": 215.5,
        "y": 1435,
        "wires": [
            [
                "72a457707489e79f"
            ]
        ]
    },
    {
        "id": "e399b6bc1db99588",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "name": "nice date formats",
        "func": "\nfor (var idx = 0; idx < msg.payload.length; idx++) {\n    msg.payload[idx].created_at = moment(msg.payload[idx].created_at).fromNow();\n    if (msg.payload[idx].email_sent_at ) {\n        msg.payload[idx].email_sent_at = moment(msg.payload[idx].email_sent_at).fromNow();\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 575,
        "y": 1373,
        "wires": [
            [
                "e2fbfcf097ae91c0"
            ]
        ]
    },
    {
        "id": "09037520c8a8c909",
        "type": "function",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "name": "nice date formats",
        "func": "\nfor (var idx = 0; idx < msg.payload.length; idx++) {\n    msg.payload[idx].created_at = moment(msg.payload[idx].created_at).fromNow();\n    if (msg.payload[idx].email_sent_at ) {\n        msg.payload[idx].email_sent_at = moment(msg.payload[idx].email_sent_at).fromNow();\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 559,
        "y": 1441,
        "wires": [
            [
                "227b6fa7c9229524"
            ]
        ]
    },
    {
        "id": "7f691fa22c035cf4",
        "type": "comment",
        "z": "00143787a55e03a5",
        "g": "25b02ea4c35f84af",
        "name": "Login and Verification code listing",
        "info": "",
        "x": 272.5,
        "y": 1196,
        "wires": []
    },
    {
        "id": "34a4c11573b3ae02",
        "type": "markdown",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "x": 819.3958129882812,
        "y": 563.3965148925781,
        "wires": [
            [
                "88aa7bc3edaad062"
            ]
        ]
    },
    {
        "id": "88aa7bc3edaad062",
        "type": "ui_template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "group": "c8b8d44246de8478",
        "name": "offer creation",
        "order": 20,
        "width": 6,
        "height": 3,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1014.906229019165,
        "y": 563.3965148925781,
        "wires": [
            []
        ]
    },
    {
        "id": "bb8b0af2d65f1b73",
        "type": "template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "Offer Creation",
        "field": "payload",
        "fieldType": "msg",
        "format": "markdown",
        "syntax": "mustache",
        "template": "----\n\n## Offer Creation\n\n- Create offer for something I am selling\n    - Ensure I can't bid on it\n    - Ensure I can't accept/decline the initial bid - that's my bid\n    - Ensure others can bid on it\n    - Ensure I can decline any bid except the initial bid\n    - Ensure I can accept any bid exceot the initial bid\n        - Ensure that an email is sent to the buyer (i.e. highest bidder) and seller",
        "output": "str",
        "x": 392.89587593078613,
        "y": 563.3965148925781,
        "wires": [
            [
                "34a4c11573b3ae02"
            ]
        ]
    },
    {
        "id": "d8eed51e93bcb28c",
        "type": "inject",
        "z": "3270a3a7e718167b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 103.44790077209473,
        "y": 564.243161201477,
        "wires": [
            [
                "bb8b0af2d65f1b73",
                "10652afca8cd4f06",
                "4420a36dc3475cea",
                "b2544d34b3e18dd6",
                "8e7f55c3f2f0dadb",
                "944884b6c71b9151",
                "61756564f2b0b2f5",
                "77f00ff0c210fdd8"
            ]
        ]
    },
    {
        "id": "57fb630186ea18bc",
        "type": "ui_switch",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "label": "[cb]oc",
        "tooltip": "",
        "group": "c8b8d44246de8478",
        "order": 23,
        "width": 1,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1323.8923892974854,
        "y": 564.2435865402222,
        "wires": [
            []
        ]
    },
    {
        "id": "18ab5a81c9531b8b",
        "type": "markdown",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "x": 819.3958129882812,
        "y": 658.2225141525269,
        "wires": [
            [
                "7bf62c8b086bce96"
            ]
        ]
    },
    {
        "id": "7bf62c8b086bce96",
        "type": "ui_template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "group": "c8b8d44246de8478",
        "name": "proposal creation",
        "order": 28,
        "width": 6,
        "height": 3,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1034.906229019165,
        "y": 657.3058757781982,
        "wires": [
            []
        ]
    },
    {
        "id": "10652afca8cd4f06",
        "type": "template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "Proposal / Desire creation",
        "field": "payload",
        "fieldType": "msg",
        "format": "markdown",
        "syntax": "mustache",
        "template": "----\n\n## I am buying switch - Seller on platform (aka Proposal Creation)\n\n- Create a proposal for someone on the platform\n    - Ensure I can bid on the proposal\n    - Ensure that the seller can only accept/decline the proposal\n    - Ensure that the seller can also accept/decline the initial bid\n    - Ensure that an email is sent when the proposal is accepted\n",
        "output": "str",
        "x": 422.89587593078613,
        "y": 655.2743692398071,
        "wires": [
            [
                "18ab5a81c9531b8b"
            ]
        ]
    },
    {
        "id": "0e97d2f196b2b580",
        "type": "ui_switch",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "label": "[cb]pc",
        "tooltip": "",
        "group": "c8b8d44246de8478",
        "order": 31,
        "width": 1,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1323.8923892974854,
        "y": 655.6113481521606,
        "wires": [
            []
        ]
    },
    {
        "id": "6e0f31f3e0b6335f",
        "type": "markdown",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "x": 819.3958129882812,
        "y": 471.2901282310486,
        "wires": [
            [
                "94e5eebb16cd775a"
            ]
        ]
    },
    {
        "id": "94e5eebb16cd775a",
        "type": "ui_template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "group": "c8b8d44246de8478",
        "name": "signup",
        "order": 4,
        "width": 6,
        "height": 3,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 994.906229019165,
        "y": 471.2901282310486,
        "wires": [
            []
        ]
    },
    {
        "id": "b2544d34b3e18dd6",
        "type": "template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "SignUp",
        "field": "payload",
        "fieldType": "msg",
        "format": "markdown",
        "syntax": "mustache",
        "template": "----\n\n## Sign Up\n\n- Signup only possible if Terms & Services have been checked\n- Only possible if all fields (email, firstname and surname) have been filled in\n- Ensure that an email is sent with the verification code\n    - ensure the don't spam link in the email works\n    - ensure that the verification link in the email also verifies the email",
        "output": "str",
        "x": 372.89587593078613,
        "y": 471.2901282310486,
        "wires": [
            [
                "6e0f31f3e0b6335f"
            ]
        ]
    },
    {
        "id": "85f1235feba1c861",
        "type": "ui_switch",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "label": "[cb]signup",
        "tooltip": "",
        "group": "c8b8d44246de8478",
        "order": 7,
        "width": 1,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1303.8923892974854,
        "y": 466.61109495162964,
        "wires": [
            []
        ]
    },
    {
        "id": "48ba750c40d31b41",
        "type": "markdown",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "x": 819.3958129882812,
        "y": 376.95067048072815,
        "wires": [
            [
                "d48f0c61d924ec01"
            ]
        ]
    },
    {
        "id": "d48f0c61d924ec01",
        "type": "ui_template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "group": "c8b8d44246de8478",
        "name": "login",
        "order": 12,
        "width": 6,
        "height": 3,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 994.906229019165,
        "y": 376.95067048072815,
        "wires": [
            []
        ]
    },
    {
        "id": "4420a36dc3475cea",
        "type": "template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "Login",
        "field": "payload",
        "fieldType": "msg",
        "format": "markdown",
        "syntax": "mustache",
        "template": "----\n\n## Login\n\n- Login only possible if a verified email-addresss\n- If the email-addresss isn't verified, a corresponding message is shown\n- If the email-addresss isn't known to the system, a corresponding message is shown\n- If the email-addresss is banned, then a corresponding message is shown\n- If email-addresss is verified and known and not banned then:\n    - Email message is sent with a login link and login code\n    - The email message should contain a \"don't spam me\"-link that badlists the email-addresss",
        "output": "str",
        "x": 362.89587593078613,
        "y": 376.95067048072815,
        "wires": [
            [
                "48ba750c40d31b41"
            ]
        ]
    },
    {
        "id": "a43df303f7a163b1",
        "type": "ui_switch",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "label": "[cb]login",
        "tooltip": "",
        "group": "c8b8d44246de8478",
        "order": 15,
        "width": 1,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1313.8923892974854,
        "y": 376.95067048072815,
        "wires": [
            []
        ]
    },
    {
        "id": "a7da7fb704b4ec0f",
        "type": "markdown",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "x": 819.3958129882812,
        "y": 716.7640891075134,
        "wires": [
            [
                "3be213485874ced7"
            ]
        ]
    },
    {
        "id": "3be213485874ced7",
        "type": "ui_template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "group": "c8b8d44246de8478",
        "name": "proposal creation - seller non-user",
        "order": 36,
        "width": 6,
        "height": 5,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1084.906229019165,
        "y": 716.7640891075134,
        "wires": [
            []
        ]
    },
    {
        "id": "8e7f55c3f2f0dadb",
        "type": "template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "Proposal / Desire creation - Seller not on platform",
        "field": "payload",
        "fieldType": "msg",
        "format": "markdown",
        "syntax": "mustache",
        "template": "----\n\n## I am buying switch - Seller not on platform\n\n- Create a proposal for someone **not** on the platform\n    - Ensure creator of proposal can bid on the proposal\n    - Ensure that the seller recieves an email \n        - the email contains a don't spam me link and telling the seller that if they think this is spam, that they should click on that link.\n        - the email informs the seller who the creator of the proposal is\n        - the email provides a description of the proposal\n        - the email informs the seller that they should signup on the platform to accept or decline the proposal\n\n- Sign up \n    - Ensure that the seller can signup with their email-address\n        - the email-address should not be blocked\n\n- After Sign up and login:\n    - Ensure that the seller can only accept/decline the proposal\n    - Ensure that the seller can also accept/decline the initial bid\n    - Ensure that an email is sent when the proposal is accepted        ",
        "output": "str",
        "x": 502.89587593078613,
        "y": 716.7640891075134,
        "wires": [
            [
                "a7da7fb704b4ec0f"
            ]
        ]
    },
    {
        "id": "76ba823543804652",
        "type": "ui_switch",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "label": "[cb]pc-nu",
        "tooltip": "",
        "group": "c8b8d44246de8478",
        "order": 41,
        "width": 1,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1313.8923892974854,
        "y": 715.6111092567444,
        "wires": [
            []
        ]
    },
    {
        "id": "9feeafbf4edb1656",
        "type": "markdown",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "x": 821.3958339691162,
        "y": 795.2642450332642,
        "wires": [
            [
                "cc53fc2820fea9eb"
            ]
        ]
    },
    {
        "id": "cc53fc2820fea9eb",
        "type": "ui_template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "group": "c8b8d44246de8478",
        "name": "emails",
        "order": 48,
        "width": 6,
        "height": 5,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 996.90625,
        "y": 795.2642450332642,
        "wires": [
            []
        ]
    },
    {
        "id": "944884b6c71b9151",
        "type": "template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "Emails",
        "field": "payload",
        "fieldType": "msg",
        "format": "markdown",
        "syntax": "mustache",
        "template": "----\n\n## Emails\n\n- Ensure all emails with only a TO email-address shoujld have a \"dont spam me\" link\n    - the link should go to a page where the user can confirm their email\n    - their email-address is then black-listed and should no longer recieve emails of any kind\n    - Ensure that the page shown to the user clearly spells this out\n- Ensure that emails with a CC and TO email-address should not have a \"dont spam me\" link\n    - Emails that confirm the acceptance of a bid for an offer or proposal, should have:\n        - CC email-address of the buyer, i.e. the highest bidder\n        - TO email-address of the seller\n        - It should contain **NO** \"dont spam me\"-link (else the highest bidder could black-list the sellers email)\n- Login Emails\n    - ensure that the login link works\n- Verification Emails\n    - ensure that the verification link works.",
        "output": "str",
        "x": 364.8958969116211,
        "y": 795.2642450332642,
        "wires": [
            [
                "9feeafbf4edb1656"
            ]
        ]
    },
    {
        "id": "fed3a67f67427e96",
        "type": "ui_switch",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "label": "[cb]emails",
        "tooltip": "",
        "group": "c8b8d44246de8478",
        "order": 53,
        "width": 1,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1313.8923892974854,
        "y": 799.6110067367554,
        "wires": [
            []
        ]
    },
    {
        "id": "73947b1021464429",
        "type": "markdown",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "",
        "x": 538.499979019165,
        "y": 290.99999713897705,
        "wires": [
            [
                "8b1ec1c668801d85"
            ]
        ]
    },
    {
        "id": "61756564f2b0b2f5",
        "type": "template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "name": "Terminology",
        "field": "payload",
        "fieldType": "msg",
        "format": "markdown",
        "syntax": "mustache",
        "template": "----\n\n## Terminology\n\n### Proposal, offer and desire\n\nThe following might help. The terminology is as viewed from\nthe users standpoint (a/d is accept or decline):\n\n      | Creator | seller | can bid? | can a/d? | Terminology |\n      | ------- | ------ | -------- | -------- | ----------- |\n      |  user   | user   |   no     |    yes   |   Offer     |\n      |   --    | user   |   no     |    yes   |   Proposal  |\n      |  user   |  --    |   yes    |    no    |   Desire    |\n      |   --    |  --    |   yes    |    no    |   Auction   |\n\nSo:\n\n- offers are when the user is creator and seller, \n- desires are when user is creator but someone else is the seller and \n- proposals are when the user is the seller but not the creator\n\nIn the database, all three are stored in the `auctions` table.",
        "output": "str",
        "x": 380.49997901916504,
        "y": 290.99999713897705,
        "wires": [
            [
                "73947b1021464429"
            ]
        ]
    },
    {
        "id": "8b1ec1c668801d85",
        "type": "ui_template",
        "z": "3270a3a7e718167b",
        "g": "6ca1f3f48de564e8",
        "group": "c8b8d44246de8478",
        "name": "Terminology",
        "order": 1,
        "width": 9,
        "height": 6,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 696.499979019165,
        "y": 290.99999713897705,
        "wires": [
            []
        ]
    },
    {
        "id": "1e5bdff5a166dc5c",
        "type": "markdown",
        "z": "3270a3a7e718167b",
        "name": "",
        "x": 577,
        "y": 139,
        "wires": [
            [
                "8eeb8e8a3ed215d6"
            ]
        ]
    },
    {
        "id": "77f00ff0c210fdd8",
        "type": "template",
        "z": "3270a3a7e718167b",
        "name": "Welcome Text",
        "field": "payload",
        "fieldType": "msg",
        "format": "markdown",
        "syntax": "mustache",
        "template": "----\n\n## Welcome to Bid'n'Buy Admin Tool\n\nUsed for adminstration of the platform.\n\n",
        "output": "str",
        "x": 390,
        "y": 138,
        "wires": [
            [
                "1e5bdff5a166dc5c"
            ]
        ]
    },
    {
        "id": "8eeb8e8a3ed215d6",
        "type": "ui_template",
        "z": "3270a3a7e718167b",
        "group": "780f92655947be78",
        "name": "Welcome",
        "order": 1,
        "width": 10,
        "height": 5,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 772,
        "y": 139,
        "wires": [
            []
        ]
    }
]